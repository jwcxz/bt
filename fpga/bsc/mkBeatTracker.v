//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Tue May  7 12:53:40 EDT 2013
//
// Method conflict info:
// Method: q_sync
// Conflict-free: putSampleInput, getBeatInfo
// Conflicts: q_sync
//
// Method: putSampleInput
// Conflict-free: q_sync, getBeatInfo
// Conflicts: putSampleInput
//
// Method: getBeatInfo
// Conflict-free: q_sync, putSampleInput
// Conflicts: getBeatInfo
//
//
// Ports:
// Name                         I/O  size props
// RDY_q_sync                     O     1
// RDY_putSampleInput             O     1 reg
// getBeatInfo                    O     8 reg
// RDY_getBeatInfo                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putSampleInput_in              I    28 reg
// EN_q_sync                      I     1
// EN_putSampleInput              I     1
// EN_getBeatInfo                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBeatTracker(CLK,
		     RST_N,

		     EN_q_sync,
		     RDY_q_sync,

		     putSampleInput_in,
		     EN_putSampleInput,
		     RDY_putSampleInput,

		     EN_getBeatInfo,
		     getBeatInfo,
		     RDY_getBeatInfo);
  input  CLK;
  input  RST_N;

  // action method q_sync
  input  EN_q_sync;
  output RDY_q_sync;

  // action method putSampleInput
  input  [27 : 0] putSampleInput_in;
  input  EN_putSampleInput;
  output RDY_putSampleInput;

  // actionvalue method getBeatInfo
  input  EN_getBeatInfo;
  output [7 : 0] getBeatInfo;
  output RDY_getBeatInfo;

  // signals for module outputs
  wire [7 : 0] getBeatInfo;
  wire RDY_getBeatInfo, RDY_putSampleInput, RDY_q_sync;

  // register bc_bc_avg_energy
  reg [25 : 0] bc_bc_avg_energy;
  wire [25 : 0] bc_bc_avg_energy$D_IN;
  wire bc_bc_avg_energy$EN;

  // register bc_bc_cur_energy
  reg [25 : 0] bc_bc_cur_energy;
  wire [25 : 0] bc_bc_cur_energy$D_IN;
  wire bc_bc_cur_energy$EN;

  // register bc_bc_energy_buf
  reg [25 : 0] bc_bc_energy_buf;
  wire [25 : 0] bc_bc_energy_buf$D_IN;
  wire bc_bc_energy_buf$EN;

  // register bc_bc_energy_buf_1
  reg [25 : 0] bc_bc_energy_buf_1;
  wire [25 : 0] bc_bc_energy_buf_1$D_IN;
  wire bc_bc_energy_buf_1$EN;

  // register bc_bc_energy_buf_10
  reg [25 : 0] bc_bc_energy_buf_10;
  wire [25 : 0] bc_bc_energy_buf_10$D_IN;
  wire bc_bc_energy_buf_10$EN;

  // register bc_bc_energy_buf_11
  reg [25 : 0] bc_bc_energy_buf_11;
  wire [25 : 0] bc_bc_energy_buf_11$D_IN;
  wire bc_bc_energy_buf_11$EN;

  // register bc_bc_energy_buf_12
  reg [25 : 0] bc_bc_energy_buf_12;
  wire [25 : 0] bc_bc_energy_buf_12$D_IN;
  wire bc_bc_energy_buf_12$EN;

  // register bc_bc_energy_buf_13
  reg [25 : 0] bc_bc_energy_buf_13;
  wire [25 : 0] bc_bc_energy_buf_13$D_IN;
  wire bc_bc_energy_buf_13$EN;

  // register bc_bc_energy_buf_14
  reg [25 : 0] bc_bc_energy_buf_14;
  wire [25 : 0] bc_bc_energy_buf_14$D_IN;
  wire bc_bc_energy_buf_14$EN;

  // register bc_bc_energy_buf_15
  reg [25 : 0] bc_bc_energy_buf_15;
  wire [25 : 0] bc_bc_energy_buf_15$D_IN;
  wire bc_bc_energy_buf_15$EN;

  // register bc_bc_energy_buf_16
  reg [25 : 0] bc_bc_energy_buf_16;
  wire [25 : 0] bc_bc_energy_buf_16$D_IN;
  wire bc_bc_energy_buf_16$EN;

  // register bc_bc_energy_buf_17
  reg [25 : 0] bc_bc_energy_buf_17;
  wire [25 : 0] bc_bc_energy_buf_17$D_IN;
  wire bc_bc_energy_buf_17$EN;

  // register bc_bc_energy_buf_18
  reg [25 : 0] bc_bc_energy_buf_18;
  wire [25 : 0] bc_bc_energy_buf_18$D_IN;
  wire bc_bc_energy_buf_18$EN;

  // register bc_bc_energy_buf_19
  reg [25 : 0] bc_bc_energy_buf_19;
  wire [25 : 0] bc_bc_energy_buf_19$D_IN;
  wire bc_bc_energy_buf_19$EN;

  // register bc_bc_energy_buf_2
  reg [25 : 0] bc_bc_energy_buf_2;
  wire [25 : 0] bc_bc_energy_buf_2$D_IN;
  wire bc_bc_energy_buf_2$EN;

  // register bc_bc_energy_buf_20
  reg [25 : 0] bc_bc_energy_buf_20;
  wire [25 : 0] bc_bc_energy_buf_20$D_IN;
  wire bc_bc_energy_buf_20$EN;

  // register bc_bc_energy_buf_21
  reg [25 : 0] bc_bc_energy_buf_21;
  wire [25 : 0] bc_bc_energy_buf_21$D_IN;
  wire bc_bc_energy_buf_21$EN;

  // register bc_bc_energy_buf_22
  reg [25 : 0] bc_bc_energy_buf_22;
  wire [25 : 0] bc_bc_energy_buf_22$D_IN;
  wire bc_bc_energy_buf_22$EN;

  // register bc_bc_energy_buf_23
  reg [25 : 0] bc_bc_energy_buf_23;
  wire [25 : 0] bc_bc_energy_buf_23$D_IN;
  wire bc_bc_energy_buf_23$EN;

  // register bc_bc_energy_buf_24
  reg [25 : 0] bc_bc_energy_buf_24;
  wire [25 : 0] bc_bc_energy_buf_24$D_IN;
  wire bc_bc_energy_buf_24$EN;

  // register bc_bc_energy_buf_25
  reg [25 : 0] bc_bc_energy_buf_25;
  wire [25 : 0] bc_bc_energy_buf_25$D_IN;
  wire bc_bc_energy_buf_25$EN;

  // register bc_bc_energy_buf_26
  reg [25 : 0] bc_bc_energy_buf_26;
  wire [25 : 0] bc_bc_energy_buf_26$D_IN;
  wire bc_bc_energy_buf_26$EN;

  // register bc_bc_energy_buf_27
  reg [25 : 0] bc_bc_energy_buf_27;
  wire [25 : 0] bc_bc_energy_buf_27$D_IN;
  wire bc_bc_energy_buf_27$EN;

  // register bc_bc_energy_buf_28
  reg [25 : 0] bc_bc_energy_buf_28;
  wire [25 : 0] bc_bc_energy_buf_28$D_IN;
  wire bc_bc_energy_buf_28$EN;

  // register bc_bc_energy_buf_29
  reg [25 : 0] bc_bc_energy_buf_29;
  wire [25 : 0] bc_bc_energy_buf_29$D_IN;
  wire bc_bc_energy_buf_29$EN;

  // register bc_bc_energy_buf_3
  reg [25 : 0] bc_bc_energy_buf_3;
  wire [25 : 0] bc_bc_energy_buf_3$D_IN;
  wire bc_bc_energy_buf_3$EN;

  // register bc_bc_energy_buf_30
  reg [25 : 0] bc_bc_energy_buf_30;
  wire [25 : 0] bc_bc_energy_buf_30$D_IN;
  wire bc_bc_energy_buf_30$EN;

  // register bc_bc_energy_buf_31
  reg [25 : 0] bc_bc_energy_buf_31;
  wire [25 : 0] bc_bc_energy_buf_31$D_IN;
  wire bc_bc_energy_buf_31$EN;

  // register bc_bc_energy_buf_32
  reg [25 : 0] bc_bc_energy_buf_32;
  wire [25 : 0] bc_bc_energy_buf_32$D_IN;
  wire bc_bc_energy_buf_32$EN;

  // register bc_bc_energy_buf_33
  reg [25 : 0] bc_bc_energy_buf_33;
  wire [25 : 0] bc_bc_energy_buf_33$D_IN;
  wire bc_bc_energy_buf_33$EN;

  // register bc_bc_energy_buf_34
  reg [25 : 0] bc_bc_energy_buf_34;
  wire [25 : 0] bc_bc_energy_buf_34$D_IN;
  wire bc_bc_energy_buf_34$EN;

  // register bc_bc_energy_buf_35
  reg [25 : 0] bc_bc_energy_buf_35;
  wire [25 : 0] bc_bc_energy_buf_35$D_IN;
  wire bc_bc_energy_buf_35$EN;

  // register bc_bc_energy_buf_36
  reg [25 : 0] bc_bc_energy_buf_36;
  wire [25 : 0] bc_bc_energy_buf_36$D_IN;
  wire bc_bc_energy_buf_36$EN;

  // register bc_bc_energy_buf_37
  reg [25 : 0] bc_bc_energy_buf_37;
  wire [25 : 0] bc_bc_energy_buf_37$D_IN;
  wire bc_bc_energy_buf_37$EN;

  // register bc_bc_energy_buf_38
  reg [25 : 0] bc_bc_energy_buf_38;
  wire [25 : 0] bc_bc_energy_buf_38$D_IN;
  wire bc_bc_energy_buf_38$EN;

  // register bc_bc_energy_buf_39
  reg [25 : 0] bc_bc_energy_buf_39;
  wire [25 : 0] bc_bc_energy_buf_39$D_IN;
  wire bc_bc_energy_buf_39$EN;

  // register bc_bc_energy_buf_4
  reg [25 : 0] bc_bc_energy_buf_4;
  wire [25 : 0] bc_bc_energy_buf_4$D_IN;
  wire bc_bc_energy_buf_4$EN;

  // register bc_bc_energy_buf_40
  reg [25 : 0] bc_bc_energy_buf_40;
  wire [25 : 0] bc_bc_energy_buf_40$D_IN;
  wire bc_bc_energy_buf_40$EN;

  // register bc_bc_energy_buf_41
  reg [25 : 0] bc_bc_energy_buf_41;
  wire [25 : 0] bc_bc_energy_buf_41$D_IN;
  wire bc_bc_energy_buf_41$EN;

  // register bc_bc_energy_buf_42
  reg [25 : 0] bc_bc_energy_buf_42;
  wire [25 : 0] bc_bc_energy_buf_42$D_IN;
  wire bc_bc_energy_buf_42$EN;

  // register bc_bc_energy_buf_43
  reg [25 : 0] bc_bc_energy_buf_43;
  wire [25 : 0] bc_bc_energy_buf_43$D_IN;
  wire bc_bc_energy_buf_43$EN;

  // register bc_bc_energy_buf_44
  reg [25 : 0] bc_bc_energy_buf_44;
  wire [25 : 0] bc_bc_energy_buf_44$D_IN;
  wire bc_bc_energy_buf_44$EN;

  // register bc_bc_energy_buf_45
  reg [25 : 0] bc_bc_energy_buf_45;
  wire [25 : 0] bc_bc_energy_buf_45$D_IN;
  wire bc_bc_energy_buf_45$EN;

  // register bc_bc_energy_buf_46
  reg [25 : 0] bc_bc_energy_buf_46;
  wire [25 : 0] bc_bc_energy_buf_46$D_IN;
  wire bc_bc_energy_buf_46$EN;

  // register bc_bc_energy_buf_47
  reg [25 : 0] bc_bc_energy_buf_47;
  wire [25 : 0] bc_bc_energy_buf_47$D_IN;
  wire bc_bc_energy_buf_47$EN;

  // register bc_bc_energy_buf_48
  reg [25 : 0] bc_bc_energy_buf_48;
  wire [25 : 0] bc_bc_energy_buf_48$D_IN;
  wire bc_bc_energy_buf_48$EN;

  // register bc_bc_energy_buf_49
  reg [25 : 0] bc_bc_energy_buf_49;
  wire [25 : 0] bc_bc_energy_buf_49$D_IN;
  wire bc_bc_energy_buf_49$EN;

  // register bc_bc_energy_buf_5
  reg [25 : 0] bc_bc_energy_buf_5;
  wire [25 : 0] bc_bc_energy_buf_5$D_IN;
  wire bc_bc_energy_buf_5$EN;

  // register bc_bc_energy_buf_50
  reg [25 : 0] bc_bc_energy_buf_50;
  wire [25 : 0] bc_bc_energy_buf_50$D_IN;
  wire bc_bc_energy_buf_50$EN;

  // register bc_bc_energy_buf_51
  reg [25 : 0] bc_bc_energy_buf_51;
  wire [25 : 0] bc_bc_energy_buf_51$D_IN;
  wire bc_bc_energy_buf_51$EN;

  // register bc_bc_energy_buf_52
  reg [25 : 0] bc_bc_energy_buf_52;
  wire [25 : 0] bc_bc_energy_buf_52$D_IN;
  wire bc_bc_energy_buf_52$EN;

  // register bc_bc_energy_buf_53
  reg [25 : 0] bc_bc_energy_buf_53;
  wire [25 : 0] bc_bc_energy_buf_53$D_IN;
  wire bc_bc_energy_buf_53$EN;

  // register bc_bc_energy_buf_54
  reg [25 : 0] bc_bc_energy_buf_54;
  wire [25 : 0] bc_bc_energy_buf_54$D_IN;
  wire bc_bc_energy_buf_54$EN;

  // register bc_bc_energy_buf_55
  reg [25 : 0] bc_bc_energy_buf_55;
  wire [25 : 0] bc_bc_energy_buf_55$D_IN;
  wire bc_bc_energy_buf_55$EN;

  // register bc_bc_energy_buf_56
  reg [25 : 0] bc_bc_energy_buf_56;
  wire [25 : 0] bc_bc_energy_buf_56$D_IN;
  wire bc_bc_energy_buf_56$EN;

  // register bc_bc_energy_buf_57
  reg [25 : 0] bc_bc_energy_buf_57;
  wire [25 : 0] bc_bc_energy_buf_57$D_IN;
  wire bc_bc_energy_buf_57$EN;

  // register bc_bc_energy_buf_58
  reg [25 : 0] bc_bc_energy_buf_58;
  wire [25 : 0] bc_bc_energy_buf_58$D_IN;
  wire bc_bc_energy_buf_58$EN;

  // register bc_bc_energy_buf_59
  reg [25 : 0] bc_bc_energy_buf_59;
  wire [25 : 0] bc_bc_energy_buf_59$D_IN;
  wire bc_bc_energy_buf_59$EN;

  // register bc_bc_energy_buf_6
  reg [25 : 0] bc_bc_energy_buf_6;
  wire [25 : 0] bc_bc_energy_buf_6$D_IN;
  wire bc_bc_energy_buf_6$EN;

  // register bc_bc_energy_buf_60
  reg [25 : 0] bc_bc_energy_buf_60;
  wire [25 : 0] bc_bc_energy_buf_60$D_IN;
  wire bc_bc_energy_buf_60$EN;

  // register bc_bc_energy_buf_61
  reg [25 : 0] bc_bc_energy_buf_61;
  wire [25 : 0] bc_bc_energy_buf_61$D_IN;
  wire bc_bc_energy_buf_61$EN;

  // register bc_bc_energy_buf_62
  reg [25 : 0] bc_bc_energy_buf_62;
  wire [25 : 0] bc_bc_energy_buf_62$D_IN;
  wire bc_bc_energy_buf_62$EN;

  // register bc_bc_energy_buf_63
  reg [25 : 0] bc_bc_energy_buf_63;
  wire [25 : 0] bc_bc_energy_buf_63$D_IN;
  wire bc_bc_energy_buf_63$EN;

  // register bc_bc_energy_buf_7
  reg [25 : 0] bc_bc_energy_buf_7;
  wire [25 : 0] bc_bc_energy_buf_7$D_IN;
  wire bc_bc_energy_buf_7$EN;

  // register bc_bc_energy_buf_8
  reg [25 : 0] bc_bc_energy_buf_8;
  wire [25 : 0] bc_bc_energy_buf_8$D_IN;
  wire bc_bc_energy_buf_8$EN;

  // register bc_bc_energy_buf_9
  reg [25 : 0] bc_bc_energy_buf_9;
  wire [25 : 0] bc_bc_energy_buf_9$D_IN;
  wire bc_bc_energy_buf_9$EN;

  // register bc_bc_energy_stage
  reg [3 : 0] bc_bc_energy_stage;
  reg [3 : 0] bc_bc_energy_stage$D_IN;
  wire bc_bc_energy_stage$EN;

  // register bc_bc_fp_lin_a
  reg [94 : 0] bc_bc_fp_lin_a;
  wire [94 : 0] bc_bc_fp_lin_a$D_IN;
  wire bc_bc_fp_lin_a$EN;

  // register bc_bc_fp_lin_b
  reg [94 : 0] bc_bc_fp_lin_b;
  wire [94 : 0] bc_bc_fp_lin_b$D_IN;
  wire bc_bc_fp_lin_b$EN;

  // register bc_bc_lin_b
  reg [77 : 0] bc_bc_lin_b;
  wire [77 : 0] bc_bc_lin_b$D_IN;
  wire bc_bc_lin_b$EN;

  // register bc_bc_sample_count
  reg [9 : 0] bc_bc_sample_count;
  wire [9 : 0] bc_bc_sample_count$D_IN;
  wire bc_bc_sample_count$EN;

  // register bc_bc_sqr_energy
  reg [51 : 0] bc_bc_sqr_energy;
  wire [51 : 0] bc_bc_sqr_energy$D_IN;
  wire bc_bc_sqr_energy$EN;

  // register bc_bc_square_buf
  reg [51 : 0] bc_bc_square_buf;
  wire [51 : 0] bc_bc_square_buf$D_IN;
  wire bc_bc_square_buf$EN;

  // register bc_bc_square_buf_1
  reg [51 : 0] bc_bc_square_buf_1;
  wire [51 : 0] bc_bc_square_buf_1$D_IN;
  wire bc_bc_square_buf_1$EN;

  // register bc_bc_square_buf_10
  reg [51 : 0] bc_bc_square_buf_10;
  wire [51 : 0] bc_bc_square_buf_10$D_IN;
  wire bc_bc_square_buf_10$EN;

  // register bc_bc_square_buf_11
  reg [51 : 0] bc_bc_square_buf_11;
  wire [51 : 0] bc_bc_square_buf_11$D_IN;
  wire bc_bc_square_buf_11$EN;

  // register bc_bc_square_buf_12
  reg [51 : 0] bc_bc_square_buf_12;
  wire [51 : 0] bc_bc_square_buf_12$D_IN;
  wire bc_bc_square_buf_12$EN;

  // register bc_bc_square_buf_13
  reg [51 : 0] bc_bc_square_buf_13;
  wire [51 : 0] bc_bc_square_buf_13$D_IN;
  wire bc_bc_square_buf_13$EN;

  // register bc_bc_square_buf_14
  reg [51 : 0] bc_bc_square_buf_14;
  wire [51 : 0] bc_bc_square_buf_14$D_IN;
  wire bc_bc_square_buf_14$EN;

  // register bc_bc_square_buf_15
  reg [51 : 0] bc_bc_square_buf_15;
  wire [51 : 0] bc_bc_square_buf_15$D_IN;
  wire bc_bc_square_buf_15$EN;

  // register bc_bc_square_buf_16
  reg [51 : 0] bc_bc_square_buf_16;
  wire [51 : 0] bc_bc_square_buf_16$D_IN;
  wire bc_bc_square_buf_16$EN;

  // register bc_bc_square_buf_17
  reg [51 : 0] bc_bc_square_buf_17;
  wire [51 : 0] bc_bc_square_buf_17$D_IN;
  wire bc_bc_square_buf_17$EN;

  // register bc_bc_square_buf_18
  reg [51 : 0] bc_bc_square_buf_18;
  wire [51 : 0] bc_bc_square_buf_18$D_IN;
  wire bc_bc_square_buf_18$EN;

  // register bc_bc_square_buf_19
  reg [51 : 0] bc_bc_square_buf_19;
  wire [51 : 0] bc_bc_square_buf_19$D_IN;
  wire bc_bc_square_buf_19$EN;

  // register bc_bc_square_buf_2
  reg [51 : 0] bc_bc_square_buf_2;
  wire [51 : 0] bc_bc_square_buf_2$D_IN;
  wire bc_bc_square_buf_2$EN;

  // register bc_bc_square_buf_20
  reg [51 : 0] bc_bc_square_buf_20;
  wire [51 : 0] bc_bc_square_buf_20$D_IN;
  wire bc_bc_square_buf_20$EN;

  // register bc_bc_square_buf_21
  reg [51 : 0] bc_bc_square_buf_21;
  wire [51 : 0] bc_bc_square_buf_21$D_IN;
  wire bc_bc_square_buf_21$EN;

  // register bc_bc_square_buf_22
  reg [51 : 0] bc_bc_square_buf_22;
  wire [51 : 0] bc_bc_square_buf_22$D_IN;
  wire bc_bc_square_buf_22$EN;

  // register bc_bc_square_buf_23
  reg [51 : 0] bc_bc_square_buf_23;
  wire [51 : 0] bc_bc_square_buf_23$D_IN;
  wire bc_bc_square_buf_23$EN;

  // register bc_bc_square_buf_24
  reg [51 : 0] bc_bc_square_buf_24;
  wire [51 : 0] bc_bc_square_buf_24$D_IN;
  wire bc_bc_square_buf_24$EN;

  // register bc_bc_square_buf_25
  reg [51 : 0] bc_bc_square_buf_25;
  wire [51 : 0] bc_bc_square_buf_25$D_IN;
  wire bc_bc_square_buf_25$EN;

  // register bc_bc_square_buf_26
  reg [51 : 0] bc_bc_square_buf_26;
  wire [51 : 0] bc_bc_square_buf_26$D_IN;
  wire bc_bc_square_buf_26$EN;

  // register bc_bc_square_buf_27
  reg [51 : 0] bc_bc_square_buf_27;
  wire [51 : 0] bc_bc_square_buf_27$D_IN;
  wire bc_bc_square_buf_27$EN;

  // register bc_bc_square_buf_28
  reg [51 : 0] bc_bc_square_buf_28;
  wire [51 : 0] bc_bc_square_buf_28$D_IN;
  wire bc_bc_square_buf_28$EN;

  // register bc_bc_square_buf_29
  reg [51 : 0] bc_bc_square_buf_29;
  wire [51 : 0] bc_bc_square_buf_29$D_IN;
  wire bc_bc_square_buf_29$EN;

  // register bc_bc_square_buf_3
  reg [51 : 0] bc_bc_square_buf_3;
  wire [51 : 0] bc_bc_square_buf_3$D_IN;
  wire bc_bc_square_buf_3$EN;

  // register bc_bc_square_buf_30
  reg [51 : 0] bc_bc_square_buf_30;
  wire [51 : 0] bc_bc_square_buf_30$D_IN;
  wire bc_bc_square_buf_30$EN;

  // register bc_bc_square_buf_31
  reg [51 : 0] bc_bc_square_buf_31;
  wire [51 : 0] bc_bc_square_buf_31$D_IN;
  wire bc_bc_square_buf_31$EN;

  // register bc_bc_square_buf_32
  reg [51 : 0] bc_bc_square_buf_32;
  wire [51 : 0] bc_bc_square_buf_32$D_IN;
  wire bc_bc_square_buf_32$EN;

  // register bc_bc_square_buf_33
  reg [51 : 0] bc_bc_square_buf_33;
  wire [51 : 0] bc_bc_square_buf_33$D_IN;
  wire bc_bc_square_buf_33$EN;

  // register bc_bc_square_buf_34
  reg [51 : 0] bc_bc_square_buf_34;
  wire [51 : 0] bc_bc_square_buf_34$D_IN;
  wire bc_bc_square_buf_34$EN;

  // register bc_bc_square_buf_35
  reg [51 : 0] bc_bc_square_buf_35;
  wire [51 : 0] bc_bc_square_buf_35$D_IN;
  wire bc_bc_square_buf_35$EN;

  // register bc_bc_square_buf_36
  reg [51 : 0] bc_bc_square_buf_36;
  wire [51 : 0] bc_bc_square_buf_36$D_IN;
  wire bc_bc_square_buf_36$EN;

  // register bc_bc_square_buf_37
  reg [51 : 0] bc_bc_square_buf_37;
  wire [51 : 0] bc_bc_square_buf_37$D_IN;
  wire bc_bc_square_buf_37$EN;

  // register bc_bc_square_buf_38
  reg [51 : 0] bc_bc_square_buf_38;
  wire [51 : 0] bc_bc_square_buf_38$D_IN;
  wire bc_bc_square_buf_38$EN;

  // register bc_bc_square_buf_39
  reg [51 : 0] bc_bc_square_buf_39;
  wire [51 : 0] bc_bc_square_buf_39$D_IN;
  wire bc_bc_square_buf_39$EN;

  // register bc_bc_square_buf_4
  reg [51 : 0] bc_bc_square_buf_4;
  wire [51 : 0] bc_bc_square_buf_4$D_IN;
  wire bc_bc_square_buf_4$EN;

  // register bc_bc_square_buf_40
  reg [51 : 0] bc_bc_square_buf_40;
  wire [51 : 0] bc_bc_square_buf_40$D_IN;
  wire bc_bc_square_buf_40$EN;

  // register bc_bc_square_buf_41
  reg [51 : 0] bc_bc_square_buf_41;
  wire [51 : 0] bc_bc_square_buf_41$D_IN;
  wire bc_bc_square_buf_41$EN;

  // register bc_bc_square_buf_42
  reg [51 : 0] bc_bc_square_buf_42;
  wire [51 : 0] bc_bc_square_buf_42$D_IN;
  wire bc_bc_square_buf_42$EN;

  // register bc_bc_square_buf_43
  reg [51 : 0] bc_bc_square_buf_43;
  wire [51 : 0] bc_bc_square_buf_43$D_IN;
  wire bc_bc_square_buf_43$EN;

  // register bc_bc_square_buf_44
  reg [51 : 0] bc_bc_square_buf_44;
  wire [51 : 0] bc_bc_square_buf_44$D_IN;
  wire bc_bc_square_buf_44$EN;

  // register bc_bc_square_buf_45
  reg [51 : 0] bc_bc_square_buf_45;
  wire [51 : 0] bc_bc_square_buf_45$D_IN;
  wire bc_bc_square_buf_45$EN;

  // register bc_bc_square_buf_46
  reg [51 : 0] bc_bc_square_buf_46;
  wire [51 : 0] bc_bc_square_buf_46$D_IN;
  wire bc_bc_square_buf_46$EN;

  // register bc_bc_square_buf_47
  reg [51 : 0] bc_bc_square_buf_47;
  wire [51 : 0] bc_bc_square_buf_47$D_IN;
  wire bc_bc_square_buf_47$EN;

  // register bc_bc_square_buf_48
  reg [51 : 0] bc_bc_square_buf_48;
  wire [51 : 0] bc_bc_square_buf_48$D_IN;
  wire bc_bc_square_buf_48$EN;

  // register bc_bc_square_buf_49
  reg [51 : 0] bc_bc_square_buf_49;
  wire [51 : 0] bc_bc_square_buf_49$D_IN;
  wire bc_bc_square_buf_49$EN;

  // register bc_bc_square_buf_5
  reg [51 : 0] bc_bc_square_buf_5;
  wire [51 : 0] bc_bc_square_buf_5$D_IN;
  wire bc_bc_square_buf_5$EN;

  // register bc_bc_square_buf_50
  reg [51 : 0] bc_bc_square_buf_50;
  wire [51 : 0] bc_bc_square_buf_50$D_IN;
  wire bc_bc_square_buf_50$EN;

  // register bc_bc_square_buf_51
  reg [51 : 0] bc_bc_square_buf_51;
  wire [51 : 0] bc_bc_square_buf_51$D_IN;
  wire bc_bc_square_buf_51$EN;

  // register bc_bc_square_buf_52
  reg [51 : 0] bc_bc_square_buf_52;
  wire [51 : 0] bc_bc_square_buf_52$D_IN;
  wire bc_bc_square_buf_52$EN;

  // register bc_bc_square_buf_53
  reg [51 : 0] bc_bc_square_buf_53;
  wire [51 : 0] bc_bc_square_buf_53$D_IN;
  wire bc_bc_square_buf_53$EN;

  // register bc_bc_square_buf_54
  reg [51 : 0] bc_bc_square_buf_54;
  wire [51 : 0] bc_bc_square_buf_54$D_IN;
  wire bc_bc_square_buf_54$EN;

  // register bc_bc_square_buf_55
  reg [51 : 0] bc_bc_square_buf_55;
  wire [51 : 0] bc_bc_square_buf_55$D_IN;
  wire bc_bc_square_buf_55$EN;

  // register bc_bc_square_buf_56
  reg [51 : 0] bc_bc_square_buf_56;
  wire [51 : 0] bc_bc_square_buf_56$D_IN;
  wire bc_bc_square_buf_56$EN;

  // register bc_bc_square_buf_57
  reg [51 : 0] bc_bc_square_buf_57;
  wire [51 : 0] bc_bc_square_buf_57$D_IN;
  wire bc_bc_square_buf_57$EN;

  // register bc_bc_square_buf_58
  reg [51 : 0] bc_bc_square_buf_58;
  wire [51 : 0] bc_bc_square_buf_58$D_IN;
  wire bc_bc_square_buf_58$EN;

  // register bc_bc_square_buf_59
  reg [51 : 0] bc_bc_square_buf_59;
  wire [51 : 0] bc_bc_square_buf_59$D_IN;
  wire bc_bc_square_buf_59$EN;

  // register bc_bc_square_buf_6
  reg [51 : 0] bc_bc_square_buf_6;
  wire [51 : 0] bc_bc_square_buf_6$D_IN;
  wire bc_bc_square_buf_6$EN;

  // register bc_bc_square_buf_60
  reg [51 : 0] bc_bc_square_buf_60;
  wire [51 : 0] bc_bc_square_buf_60$D_IN;
  wire bc_bc_square_buf_60$EN;

  // register bc_bc_square_buf_61
  reg [51 : 0] bc_bc_square_buf_61;
  wire [51 : 0] bc_bc_square_buf_61$D_IN;
  wire bc_bc_square_buf_61$EN;

  // register bc_bc_square_buf_62
  reg [51 : 0] bc_bc_square_buf_62;
  wire [51 : 0] bc_bc_square_buf_62$D_IN;
  wire bc_bc_square_buf_62$EN;

  // register bc_bc_square_buf_63
  reg [51 : 0] bc_bc_square_buf_63;
  wire [51 : 0] bc_bc_square_buf_63$D_IN;
  wire bc_bc_square_buf_63$EN;

  // register bc_bc_square_buf_7
  reg [51 : 0] bc_bc_square_buf_7;
  wire [51 : 0] bc_bc_square_buf_7$D_IN;
  wire bc_bc_square_buf_7$EN;

  // register bc_bc_square_buf_8
  reg [51 : 0] bc_bc_square_buf_8;
  wire [51 : 0] bc_bc_square_buf_8$D_IN;
  wire bc_bc_square_buf_8$EN;

  // register bc_bc_square_buf_9
  reg [51 : 0] bc_bc_square_buf_9;
  wire [51 : 0] bc_bc_square_buf_9$D_IN;
  wire bc_bc_square_buf_9$EN;

  // register bc_bc_variance
  reg [51 : 0] bc_bc_variance;
  wire [51 : 0] bc_bc_variance$D_IN;
  wire bc_bc_variance$EN;

  // register beat_guess
  reg [27 : 0] beat_guess;
  wire [27 : 0] beat_guess$D_IN;
  wire beat_guess$EN;

  // register mb_counter
  reg [21 : 0] mb_counter;
  wire [21 : 0] mb_counter$D_IN;
  wire mb_counter$EN;

  // register mb_counter_1
  reg [21 : 0] mb_counter_1;
  wire [21 : 0] mb_counter_1$D_IN;
  wire mb_counter_1$EN;

  // register mb_counter_10
  reg [21 : 0] mb_counter_10;
  wire [21 : 0] mb_counter_10$D_IN;
  wire mb_counter_10$EN;

  // register mb_counter_11
  reg [21 : 0] mb_counter_11;
  wire [21 : 0] mb_counter_11$D_IN;
  wire mb_counter_11$EN;

  // register mb_counter_12
  reg [21 : 0] mb_counter_12;
  wire [21 : 0] mb_counter_12$D_IN;
  wire mb_counter_12$EN;

  // register mb_counter_13
  reg [21 : 0] mb_counter_13;
  wire [21 : 0] mb_counter_13$D_IN;
  wire mb_counter_13$EN;

  // register mb_counter_14
  reg [21 : 0] mb_counter_14;
  wire [21 : 0] mb_counter_14$D_IN;
  wire mb_counter_14$EN;

  // register mb_counter_15
  reg [21 : 0] mb_counter_15;
  wire [21 : 0] mb_counter_15$D_IN;
  wire mb_counter_15$EN;

  // register mb_counter_16
  reg [21 : 0] mb_counter_16;
  wire [21 : 0] mb_counter_16$D_IN;
  wire mb_counter_16$EN;

  // register mb_counter_17
  reg [21 : 0] mb_counter_17;
  wire [21 : 0] mb_counter_17$D_IN;
  wire mb_counter_17$EN;

  // register mb_counter_18
  reg [21 : 0] mb_counter_18;
  wire [21 : 0] mb_counter_18$D_IN;
  wire mb_counter_18$EN;

  // register mb_counter_19
  reg [21 : 0] mb_counter_19;
  wire [21 : 0] mb_counter_19$D_IN;
  wire mb_counter_19$EN;

  // register mb_counter_2
  reg [21 : 0] mb_counter_2;
  wire [21 : 0] mb_counter_2$D_IN;
  wire mb_counter_2$EN;

  // register mb_counter_20
  reg [21 : 0] mb_counter_20;
  wire [21 : 0] mb_counter_20$D_IN;
  wire mb_counter_20$EN;

  // register mb_counter_21
  reg [21 : 0] mb_counter_21;
  wire [21 : 0] mb_counter_21$D_IN;
  wire mb_counter_21$EN;

  // register mb_counter_22
  reg [21 : 0] mb_counter_22;
  wire [21 : 0] mb_counter_22$D_IN;
  wire mb_counter_22$EN;

  // register mb_counter_23
  reg [21 : 0] mb_counter_23;
  wire [21 : 0] mb_counter_23$D_IN;
  wire mb_counter_23$EN;

  // register mb_counter_24
  reg [21 : 0] mb_counter_24;
  wire [21 : 0] mb_counter_24$D_IN;
  wire mb_counter_24$EN;

  // register mb_counter_25
  reg [21 : 0] mb_counter_25;
  wire [21 : 0] mb_counter_25$D_IN;
  wire mb_counter_25$EN;

  // register mb_counter_26
  reg [21 : 0] mb_counter_26;
  wire [21 : 0] mb_counter_26$D_IN;
  wire mb_counter_26$EN;

  // register mb_counter_27
  reg [21 : 0] mb_counter_27;
  wire [21 : 0] mb_counter_27$D_IN;
  wire mb_counter_27$EN;

  // register mb_counter_28
  reg [21 : 0] mb_counter_28;
  wire [21 : 0] mb_counter_28$D_IN;
  wire mb_counter_28$EN;

  // register mb_counter_29
  reg [21 : 0] mb_counter_29;
  wire [21 : 0] mb_counter_29$D_IN;
  wire mb_counter_29$EN;

  // register mb_counter_3
  reg [21 : 0] mb_counter_3;
  wire [21 : 0] mb_counter_3$D_IN;
  wire mb_counter_3$EN;

  // register mb_counter_30
  reg [21 : 0] mb_counter_30;
  wire [21 : 0] mb_counter_30$D_IN;
  wire mb_counter_30$EN;

  // register mb_counter_31
  reg [21 : 0] mb_counter_31;
  wire [21 : 0] mb_counter_31$D_IN;
  wire mb_counter_31$EN;

  // register mb_counter_32
  reg [21 : 0] mb_counter_32;
  wire [21 : 0] mb_counter_32$D_IN;
  wire mb_counter_32$EN;

  // register mb_counter_33
  reg [21 : 0] mb_counter_33;
  wire [21 : 0] mb_counter_33$D_IN;
  wire mb_counter_33$EN;

  // register mb_counter_34
  reg [21 : 0] mb_counter_34;
  wire [21 : 0] mb_counter_34$D_IN;
  wire mb_counter_34$EN;

  // register mb_counter_35
  reg [21 : 0] mb_counter_35;
  wire [21 : 0] mb_counter_35$D_IN;
  wire mb_counter_35$EN;

  // register mb_counter_36
  reg [21 : 0] mb_counter_36;
  wire [21 : 0] mb_counter_36$D_IN;
  wire mb_counter_36$EN;

  // register mb_counter_37
  reg [21 : 0] mb_counter_37;
  wire [21 : 0] mb_counter_37$D_IN;
  wire mb_counter_37$EN;

  // register mb_counter_38
  reg [21 : 0] mb_counter_38;
  wire [21 : 0] mb_counter_38$D_IN;
  wire mb_counter_38$EN;

  // register mb_counter_39
  reg [21 : 0] mb_counter_39;
  wire [21 : 0] mb_counter_39$D_IN;
  wire mb_counter_39$EN;

  // register mb_counter_4
  reg [21 : 0] mb_counter_4;
  wire [21 : 0] mb_counter_4$D_IN;
  wire mb_counter_4$EN;

  // register mb_counter_40
  reg [21 : 0] mb_counter_40;
  wire [21 : 0] mb_counter_40$D_IN;
  wire mb_counter_40$EN;

  // register mb_counter_41
  reg [21 : 0] mb_counter_41;
  wire [21 : 0] mb_counter_41$D_IN;
  wire mb_counter_41$EN;

  // register mb_counter_42
  reg [21 : 0] mb_counter_42;
  wire [21 : 0] mb_counter_42$D_IN;
  wire mb_counter_42$EN;

  // register mb_counter_43
  reg [21 : 0] mb_counter_43;
  wire [21 : 0] mb_counter_43$D_IN;
  wire mb_counter_43$EN;

  // register mb_counter_44
  reg [21 : 0] mb_counter_44;
  wire [21 : 0] mb_counter_44$D_IN;
  wire mb_counter_44$EN;

  // register mb_counter_45
  reg [21 : 0] mb_counter_45;
  wire [21 : 0] mb_counter_45$D_IN;
  wire mb_counter_45$EN;

  // register mb_counter_46
  reg [21 : 0] mb_counter_46;
  wire [21 : 0] mb_counter_46$D_IN;
  wire mb_counter_46$EN;

  // register mb_counter_47
  reg [21 : 0] mb_counter_47;
  wire [21 : 0] mb_counter_47$D_IN;
  wire mb_counter_47$EN;

  // register mb_counter_48
  reg [21 : 0] mb_counter_48;
  wire [21 : 0] mb_counter_48$D_IN;
  wire mb_counter_48$EN;

  // register mb_counter_49
  reg [21 : 0] mb_counter_49;
  wire [21 : 0] mb_counter_49$D_IN;
  wire mb_counter_49$EN;

  // register mb_counter_5
  reg [21 : 0] mb_counter_5;
  wire [21 : 0] mb_counter_5$D_IN;
  wire mb_counter_5$EN;

  // register mb_counter_50
  reg [21 : 0] mb_counter_50;
  wire [21 : 0] mb_counter_50$D_IN;
  wire mb_counter_50$EN;

  // register mb_counter_51
  reg [21 : 0] mb_counter_51;
  wire [21 : 0] mb_counter_51$D_IN;
  wire mb_counter_51$EN;

  // register mb_counter_52
  reg [21 : 0] mb_counter_52;
  wire [21 : 0] mb_counter_52$D_IN;
  wire mb_counter_52$EN;

  // register mb_counter_53
  reg [21 : 0] mb_counter_53;
  wire [21 : 0] mb_counter_53$D_IN;
  wire mb_counter_53$EN;

  // register mb_counter_54
  reg [21 : 0] mb_counter_54;
  wire [21 : 0] mb_counter_54$D_IN;
  wire mb_counter_54$EN;

  // register mb_counter_55
  reg [21 : 0] mb_counter_55;
  wire [21 : 0] mb_counter_55$D_IN;
  wire mb_counter_55$EN;

  // register mb_counter_56
  reg [21 : 0] mb_counter_56;
  wire [21 : 0] mb_counter_56$D_IN;
  wire mb_counter_56$EN;

  // register mb_counter_57
  reg [21 : 0] mb_counter_57;
  wire [21 : 0] mb_counter_57$D_IN;
  wire mb_counter_57$EN;

  // register mb_counter_58
  reg [21 : 0] mb_counter_58;
  wire [21 : 0] mb_counter_58$D_IN;
  wire mb_counter_58$EN;

  // register mb_counter_59
  reg [21 : 0] mb_counter_59;
  wire [21 : 0] mb_counter_59$D_IN;
  wire mb_counter_59$EN;

  // register mb_counter_6
  reg [21 : 0] mb_counter_6;
  wire [21 : 0] mb_counter_6$D_IN;
  wire mb_counter_6$EN;

  // register mb_counter_60
  reg [21 : 0] mb_counter_60;
  wire [21 : 0] mb_counter_60$D_IN;
  wire mb_counter_60$EN;

  // register mb_counter_61
  reg [21 : 0] mb_counter_61;
  wire [21 : 0] mb_counter_61$D_IN;
  wire mb_counter_61$EN;

  // register mb_counter_62
  reg [21 : 0] mb_counter_62;
  wire [21 : 0] mb_counter_62$D_IN;
  wire mb_counter_62$EN;

  // register mb_counter_63
  reg [21 : 0] mb_counter_63;
  wire [21 : 0] mb_counter_63$D_IN;
  wire mb_counter_63$EN;

  // register mb_counter_64
  reg [21 : 0] mb_counter_64;
  wire [21 : 0] mb_counter_64$D_IN;
  wire mb_counter_64$EN;

  // register mb_counter_7
  reg [21 : 0] mb_counter_7;
  wire [21 : 0] mb_counter_7$D_IN;
  wire mb_counter_7$EN;

  // register mb_counter_8
  reg [21 : 0] mb_counter_8;
  wire [21 : 0] mb_counter_8$D_IN;
  wire mb_counter_8$EN;

  // register mb_counter_9
  reg [21 : 0] mb_counter_9;
  wire [21 : 0] mb_counter_9$D_IN;
  wire mb_counter_9$EN;

  // register mb_last_counter
  reg [21 : 0] mb_last_counter;
  wire [21 : 0] mb_last_counter$D_IN;
  wire mb_last_counter$EN;

  // register mb_last_counter_1
  reg [21 : 0] mb_last_counter_1;
  wire [21 : 0] mb_last_counter_1$D_IN;
  wire mb_last_counter_1$EN;

  // register mb_last_counter_10
  reg [21 : 0] mb_last_counter_10;
  wire [21 : 0] mb_last_counter_10$D_IN;
  wire mb_last_counter_10$EN;

  // register mb_last_counter_11
  reg [21 : 0] mb_last_counter_11;
  wire [21 : 0] mb_last_counter_11$D_IN;
  wire mb_last_counter_11$EN;

  // register mb_last_counter_12
  reg [21 : 0] mb_last_counter_12;
  wire [21 : 0] mb_last_counter_12$D_IN;
  wire mb_last_counter_12$EN;

  // register mb_last_counter_13
  reg [21 : 0] mb_last_counter_13;
  wire [21 : 0] mb_last_counter_13$D_IN;
  wire mb_last_counter_13$EN;

  // register mb_last_counter_14
  reg [21 : 0] mb_last_counter_14;
  wire [21 : 0] mb_last_counter_14$D_IN;
  wire mb_last_counter_14$EN;

  // register mb_last_counter_15
  reg [21 : 0] mb_last_counter_15;
  wire [21 : 0] mb_last_counter_15$D_IN;
  wire mb_last_counter_15$EN;

  // register mb_last_counter_16
  reg [21 : 0] mb_last_counter_16;
  wire [21 : 0] mb_last_counter_16$D_IN;
  wire mb_last_counter_16$EN;

  // register mb_last_counter_17
  reg [21 : 0] mb_last_counter_17;
  wire [21 : 0] mb_last_counter_17$D_IN;
  wire mb_last_counter_17$EN;

  // register mb_last_counter_18
  reg [21 : 0] mb_last_counter_18;
  wire [21 : 0] mb_last_counter_18$D_IN;
  wire mb_last_counter_18$EN;

  // register mb_last_counter_19
  reg [21 : 0] mb_last_counter_19;
  wire [21 : 0] mb_last_counter_19$D_IN;
  wire mb_last_counter_19$EN;

  // register mb_last_counter_2
  reg [21 : 0] mb_last_counter_2;
  wire [21 : 0] mb_last_counter_2$D_IN;
  wire mb_last_counter_2$EN;

  // register mb_last_counter_20
  reg [21 : 0] mb_last_counter_20;
  wire [21 : 0] mb_last_counter_20$D_IN;
  wire mb_last_counter_20$EN;

  // register mb_last_counter_21
  reg [21 : 0] mb_last_counter_21;
  wire [21 : 0] mb_last_counter_21$D_IN;
  wire mb_last_counter_21$EN;

  // register mb_last_counter_22
  reg [21 : 0] mb_last_counter_22;
  wire [21 : 0] mb_last_counter_22$D_IN;
  wire mb_last_counter_22$EN;

  // register mb_last_counter_23
  reg [21 : 0] mb_last_counter_23;
  wire [21 : 0] mb_last_counter_23$D_IN;
  wire mb_last_counter_23$EN;

  // register mb_last_counter_24
  reg [21 : 0] mb_last_counter_24;
  wire [21 : 0] mb_last_counter_24$D_IN;
  wire mb_last_counter_24$EN;

  // register mb_last_counter_25
  reg [21 : 0] mb_last_counter_25;
  wire [21 : 0] mb_last_counter_25$D_IN;
  wire mb_last_counter_25$EN;

  // register mb_last_counter_26
  reg [21 : 0] mb_last_counter_26;
  wire [21 : 0] mb_last_counter_26$D_IN;
  wire mb_last_counter_26$EN;

  // register mb_last_counter_27
  reg [21 : 0] mb_last_counter_27;
  wire [21 : 0] mb_last_counter_27$D_IN;
  wire mb_last_counter_27$EN;

  // register mb_last_counter_28
  reg [21 : 0] mb_last_counter_28;
  wire [21 : 0] mb_last_counter_28$D_IN;
  wire mb_last_counter_28$EN;

  // register mb_last_counter_29
  reg [21 : 0] mb_last_counter_29;
  wire [21 : 0] mb_last_counter_29$D_IN;
  wire mb_last_counter_29$EN;

  // register mb_last_counter_3
  reg [21 : 0] mb_last_counter_3;
  wire [21 : 0] mb_last_counter_3$D_IN;
  wire mb_last_counter_3$EN;

  // register mb_last_counter_30
  reg [21 : 0] mb_last_counter_30;
  wire [21 : 0] mb_last_counter_30$D_IN;
  wire mb_last_counter_30$EN;

  // register mb_last_counter_31
  reg [21 : 0] mb_last_counter_31;
  wire [21 : 0] mb_last_counter_31$D_IN;
  wire mb_last_counter_31$EN;

  // register mb_last_counter_32
  reg [21 : 0] mb_last_counter_32;
  wire [21 : 0] mb_last_counter_32$D_IN;
  wire mb_last_counter_32$EN;

  // register mb_last_counter_33
  reg [21 : 0] mb_last_counter_33;
  wire [21 : 0] mb_last_counter_33$D_IN;
  wire mb_last_counter_33$EN;

  // register mb_last_counter_34
  reg [21 : 0] mb_last_counter_34;
  wire [21 : 0] mb_last_counter_34$D_IN;
  wire mb_last_counter_34$EN;

  // register mb_last_counter_35
  reg [21 : 0] mb_last_counter_35;
  wire [21 : 0] mb_last_counter_35$D_IN;
  wire mb_last_counter_35$EN;

  // register mb_last_counter_36
  reg [21 : 0] mb_last_counter_36;
  wire [21 : 0] mb_last_counter_36$D_IN;
  wire mb_last_counter_36$EN;

  // register mb_last_counter_37
  reg [21 : 0] mb_last_counter_37;
  wire [21 : 0] mb_last_counter_37$D_IN;
  wire mb_last_counter_37$EN;

  // register mb_last_counter_38
  reg [21 : 0] mb_last_counter_38;
  wire [21 : 0] mb_last_counter_38$D_IN;
  wire mb_last_counter_38$EN;

  // register mb_last_counter_39
  reg [21 : 0] mb_last_counter_39;
  wire [21 : 0] mb_last_counter_39$D_IN;
  wire mb_last_counter_39$EN;

  // register mb_last_counter_4
  reg [21 : 0] mb_last_counter_4;
  wire [21 : 0] mb_last_counter_4$D_IN;
  wire mb_last_counter_4$EN;

  // register mb_last_counter_40
  reg [21 : 0] mb_last_counter_40;
  wire [21 : 0] mb_last_counter_40$D_IN;
  wire mb_last_counter_40$EN;

  // register mb_last_counter_41
  reg [21 : 0] mb_last_counter_41;
  wire [21 : 0] mb_last_counter_41$D_IN;
  wire mb_last_counter_41$EN;

  // register mb_last_counter_42
  reg [21 : 0] mb_last_counter_42;
  wire [21 : 0] mb_last_counter_42$D_IN;
  wire mb_last_counter_42$EN;

  // register mb_last_counter_43
  reg [21 : 0] mb_last_counter_43;
  wire [21 : 0] mb_last_counter_43$D_IN;
  wire mb_last_counter_43$EN;

  // register mb_last_counter_44
  reg [21 : 0] mb_last_counter_44;
  wire [21 : 0] mb_last_counter_44$D_IN;
  wire mb_last_counter_44$EN;

  // register mb_last_counter_45
  reg [21 : 0] mb_last_counter_45;
  wire [21 : 0] mb_last_counter_45$D_IN;
  wire mb_last_counter_45$EN;

  // register mb_last_counter_46
  reg [21 : 0] mb_last_counter_46;
  wire [21 : 0] mb_last_counter_46$D_IN;
  wire mb_last_counter_46$EN;

  // register mb_last_counter_47
  reg [21 : 0] mb_last_counter_47;
  wire [21 : 0] mb_last_counter_47$D_IN;
  wire mb_last_counter_47$EN;

  // register mb_last_counter_48
  reg [21 : 0] mb_last_counter_48;
  wire [21 : 0] mb_last_counter_48$D_IN;
  wire mb_last_counter_48$EN;

  // register mb_last_counter_49
  reg [21 : 0] mb_last_counter_49;
  wire [21 : 0] mb_last_counter_49$D_IN;
  wire mb_last_counter_49$EN;

  // register mb_last_counter_5
  reg [21 : 0] mb_last_counter_5;
  wire [21 : 0] mb_last_counter_5$D_IN;
  wire mb_last_counter_5$EN;

  // register mb_last_counter_50
  reg [21 : 0] mb_last_counter_50;
  wire [21 : 0] mb_last_counter_50$D_IN;
  wire mb_last_counter_50$EN;

  // register mb_last_counter_51
  reg [21 : 0] mb_last_counter_51;
  wire [21 : 0] mb_last_counter_51$D_IN;
  wire mb_last_counter_51$EN;

  // register mb_last_counter_52
  reg [21 : 0] mb_last_counter_52;
  wire [21 : 0] mb_last_counter_52$D_IN;
  wire mb_last_counter_52$EN;

  // register mb_last_counter_53
  reg [21 : 0] mb_last_counter_53;
  wire [21 : 0] mb_last_counter_53$D_IN;
  wire mb_last_counter_53$EN;

  // register mb_last_counter_54
  reg [21 : 0] mb_last_counter_54;
  wire [21 : 0] mb_last_counter_54$D_IN;
  wire mb_last_counter_54$EN;

  // register mb_last_counter_55
  reg [21 : 0] mb_last_counter_55;
  wire [21 : 0] mb_last_counter_55$D_IN;
  wire mb_last_counter_55$EN;

  // register mb_last_counter_56
  reg [21 : 0] mb_last_counter_56;
  wire [21 : 0] mb_last_counter_56$D_IN;
  wire mb_last_counter_56$EN;

  // register mb_last_counter_57
  reg [21 : 0] mb_last_counter_57;
  wire [21 : 0] mb_last_counter_57$D_IN;
  wire mb_last_counter_57$EN;

  // register mb_last_counter_58
  reg [21 : 0] mb_last_counter_58;
  wire [21 : 0] mb_last_counter_58$D_IN;
  wire mb_last_counter_58$EN;

  // register mb_last_counter_59
  reg [21 : 0] mb_last_counter_59;
  wire [21 : 0] mb_last_counter_59$D_IN;
  wire mb_last_counter_59$EN;

  // register mb_last_counter_6
  reg [21 : 0] mb_last_counter_6;
  wire [21 : 0] mb_last_counter_6$D_IN;
  wire mb_last_counter_6$EN;

  // register mb_last_counter_60
  reg [21 : 0] mb_last_counter_60;
  wire [21 : 0] mb_last_counter_60$D_IN;
  wire mb_last_counter_60$EN;

  // register mb_last_counter_61
  reg [21 : 0] mb_last_counter_61;
  wire [21 : 0] mb_last_counter_61$D_IN;
  wire mb_last_counter_61$EN;

  // register mb_last_counter_62
  reg [21 : 0] mb_last_counter_62;
  wire [21 : 0] mb_last_counter_62$D_IN;
  wire mb_last_counter_62$EN;

  // register mb_last_counter_63
  reg [21 : 0] mb_last_counter_63;
  wire [21 : 0] mb_last_counter_63$D_IN;
  wire mb_last_counter_63$EN;

  // register mb_last_counter_64
  reg [21 : 0] mb_last_counter_64;
  wire [21 : 0] mb_last_counter_64$D_IN;
  wire mb_last_counter_64$EN;

  // register mb_last_counter_7
  reg [21 : 0] mb_last_counter_7;
  wire [21 : 0] mb_last_counter_7$D_IN;
  wire mb_last_counter_7$EN;

  // register mb_last_counter_8
  reg [21 : 0] mb_last_counter_8;
  wire [21 : 0] mb_last_counter_8$D_IN;
  wire mb_last_counter_8$EN;

  // register mb_last_counter_9
  reg [21 : 0] mb_last_counter_9;
  wire [21 : 0] mb_last_counter_9$D_IN;
  wire mb_last_counter_9$EN;

  // register mb_out_count
  reg [6 : 0] mb_out_count;
  wire [6 : 0] mb_out_count$D_IN;
  wire mb_out_count$EN;

  // register mb_tick_pulse
  reg mb_tick_pulse;
  wire mb_tick_pulse$D_IN, mb_tick_pulse$EN;

  // register mb_tick_pulse_1
  reg mb_tick_pulse_1;
  wire mb_tick_pulse_1$D_IN, mb_tick_pulse_1$EN;

  // register mb_tick_pulse_10
  reg mb_tick_pulse_10;
  wire mb_tick_pulse_10$D_IN, mb_tick_pulse_10$EN;

  // register mb_tick_pulse_11
  reg mb_tick_pulse_11;
  wire mb_tick_pulse_11$D_IN, mb_tick_pulse_11$EN;

  // register mb_tick_pulse_12
  reg mb_tick_pulse_12;
  wire mb_tick_pulse_12$D_IN, mb_tick_pulse_12$EN;

  // register mb_tick_pulse_13
  reg mb_tick_pulse_13;
  wire mb_tick_pulse_13$D_IN, mb_tick_pulse_13$EN;

  // register mb_tick_pulse_14
  reg mb_tick_pulse_14;
  wire mb_tick_pulse_14$D_IN, mb_tick_pulse_14$EN;

  // register mb_tick_pulse_15
  reg mb_tick_pulse_15;
  wire mb_tick_pulse_15$D_IN, mb_tick_pulse_15$EN;

  // register mb_tick_pulse_16
  reg mb_tick_pulse_16;
  wire mb_tick_pulse_16$D_IN, mb_tick_pulse_16$EN;

  // register mb_tick_pulse_17
  reg mb_tick_pulse_17;
  wire mb_tick_pulse_17$D_IN, mb_tick_pulse_17$EN;

  // register mb_tick_pulse_18
  reg mb_tick_pulse_18;
  wire mb_tick_pulse_18$D_IN, mb_tick_pulse_18$EN;

  // register mb_tick_pulse_19
  reg mb_tick_pulse_19;
  wire mb_tick_pulse_19$D_IN, mb_tick_pulse_19$EN;

  // register mb_tick_pulse_2
  reg mb_tick_pulse_2;
  wire mb_tick_pulse_2$D_IN, mb_tick_pulse_2$EN;

  // register mb_tick_pulse_20
  reg mb_tick_pulse_20;
  wire mb_tick_pulse_20$D_IN, mb_tick_pulse_20$EN;

  // register mb_tick_pulse_21
  reg mb_tick_pulse_21;
  wire mb_tick_pulse_21$D_IN, mb_tick_pulse_21$EN;

  // register mb_tick_pulse_22
  reg mb_tick_pulse_22;
  wire mb_tick_pulse_22$D_IN, mb_tick_pulse_22$EN;

  // register mb_tick_pulse_23
  reg mb_tick_pulse_23;
  wire mb_tick_pulse_23$D_IN, mb_tick_pulse_23$EN;

  // register mb_tick_pulse_24
  reg mb_tick_pulse_24;
  wire mb_tick_pulse_24$D_IN, mb_tick_pulse_24$EN;

  // register mb_tick_pulse_25
  reg mb_tick_pulse_25;
  wire mb_tick_pulse_25$D_IN, mb_tick_pulse_25$EN;

  // register mb_tick_pulse_26
  reg mb_tick_pulse_26;
  wire mb_tick_pulse_26$D_IN, mb_tick_pulse_26$EN;

  // register mb_tick_pulse_27
  reg mb_tick_pulse_27;
  wire mb_tick_pulse_27$D_IN, mb_tick_pulse_27$EN;

  // register mb_tick_pulse_28
  reg mb_tick_pulse_28;
  wire mb_tick_pulse_28$D_IN, mb_tick_pulse_28$EN;

  // register mb_tick_pulse_29
  reg mb_tick_pulse_29;
  wire mb_tick_pulse_29$D_IN, mb_tick_pulse_29$EN;

  // register mb_tick_pulse_3
  reg mb_tick_pulse_3;
  wire mb_tick_pulse_3$D_IN, mb_tick_pulse_3$EN;

  // register mb_tick_pulse_30
  reg mb_tick_pulse_30;
  wire mb_tick_pulse_30$D_IN, mb_tick_pulse_30$EN;

  // register mb_tick_pulse_31
  reg mb_tick_pulse_31;
  wire mb_tick_pulse_31$D_IN, mb_tick_pulse_31$EN;

  // register mb_tick_pulse_32
  reg mb_tick_pulse_32;
  wire mb_tick_pulse_32$D_IN, mb_tick_pulse_32$EN;

  // register mb_tick_pulse_33
  reg mb_tick_pulse_33;
  wire mb_tick_pulse_33$D_IN, mb_tick_pulse_33$EN;

  // register mb_tick_pulse_34
  reg mb_tick_pulse_34;
  wire mb_tick_pulse_34$D_IN, mb_tick_pulse_34$EN;

  // register mb_tick_pulse_35
  reg mb_tick_pulse_35;
  wire mb_tick_pulse_35$D_IN, mb_tick_pulse_35$EN;

  // register mb_tick_pulse_36
  reg mb_tick_pulse_36;
  wire mb_tick_pulse_36$D_IN, mb_tick_pulse_36$EN;

  // register mb_tick_pulse_37
  reg mb_tick_pulse_37;
  wire mb_tick_pulse_37$D_IN, mb_tick_pulse_37$EN;

  // register mb_tick_pulse_38
  reg mb_tick_pulse_38;
  wire mb_tick_pulse_38$D_IN, mb_tick_pulse_38$EN;

  // register mb_tick_pulse_39
  reg mb_tick_pulse_39;
  wire mb_tick_pulse_39$D_IN, mb_tick_pulse_39$EN;

  // register mb_tick_pulse_4
  reg mb_tick_pulse_4;
  wire mb_tick_pulse_4$D_IN, mb_tick_pulse_4$EN;

  // register mb_tick_pulse_40
  reg mb_tick_pulse_40;
  wire mb_tick_pulse_40$D_IN, mb_tick_pulse_40$EN;

  // register mb_tick_pulse_41
  reg mb_tick_pulse_41;
  wire mb_tick_pulse_41$D_IN, mb_tick_pulse_41$EN;

  // register mb_tick_pulse_42
  reg mb_tick_pulse_42;
  wire mb_tick_pulse_42$D_IN, mb_tick_pulse_42$EN;

  // register mb_tick_pulse_43
  reg mb_tick_pulse_43;
  wire mb_tick_pulse_43$D_IN, mb_tick_pulse_43$EN;

  // register mb_tick_pulse_44
  reg mb_tick_pulse_44;
  wire mb_tick_pulse_44$D_IN, mb_tick_pulse_44$EN;

  // register mb_tick_pulse_45
  reg mb_tick_pulse_45;
  wire mb_tick_pulse_45$D_IN, mb_tick_pulse_45$EN;

  // register mb_tick_pulse_46
  reg mb_tick_pulse_46;
  wire mb_tick_pulse_46$D_IN, mb_tick_pulse_46$EN;

  // register mb_tick_pulse_47
  reg mb_tick_pulse_47;
  wire mb_tick_pulse_47$D_IN, mb_tick_pulse_47$EN;

  // register mb_tick_pulse_48
  reg mb_tick_pulse_48;
  wire mb_tick_pulse_48$D_IN, mb_tick_pulse_48$EN;

  // register mb_tick_pulse_49
  reg mb_tick_pulse_49;
  wire mb_tick_pulse_49$D_IN, mb_tick_pulse_49$EN;

  // register mb_tick_pulse_5
  reg mb_tick_pulse_5;
  wire mb_tick_pulse_5$D_IN, mb_tick_pulse_5$EN;

  // register mb_tick_pulse_50
  reg mb_tick_pulse_50;
  wire mb_tick_pulse_50$D_IN, mb_tick_pulse_50$EN;

  // register mb_tick_pulse_51
  reg mb_tick_pulse_51;
  wire mb_tick_pulse_51$D_IN, mb_tick_pulse_51$EN;

  // register mb_tick_pulse_52
  reg mb_tick_pulse_52;
  wire mb_tick_pulse_52$D_IN, mb_tick_pulse_52$EN;

  // register mb_tick_pulse_53
  reg mb_tick_pulse_53;
  wire mb_tick_pulse_53$D_IN, mb_tick_pulse_53$EN;

  // register mb_tick_pulse_54
  reg mb_tick_pulse_54;
  wire mb_tick_pulse_54$D_IN, mb_tick_pulse_54$EN;

  // register mb_tick_pulse_55
  reg mb_tick_pulse_55;
  wire mb_tick_pulse_55$D_IN, mb_tick_pulse_55$EN;

  // register mb_tick_pulse_56
  reg mb_tick_pulse_56;
  wire mb_tick_pulse_56$D_IN, mb_tick_pulse_56$EN;

  // register mb_tick_pulse_57
  reg mb_tick_pulse_57;
  wire mb_tick_pulse_57$D_IN, mb_tick_pulse_57$EN;

  // register mb_tick_pulse_58
  reg mb_tick_pulse_58;
  wire mb_tick_pulse_58$D_IN, mb_tick_pulse_58$EN;

  // register mb_tick_pulse_59
  reg mb_tick_pulse_59;
  wire mb_tick_pulse_59$D_IN, mb_tick_pulse_59$EN;

  // register mb_tick_pulse_6
  reg mb_tick_pulse_6;
  wire mb_tick_pulse_6$D_IN, mb_tick_pulse_6$EN;

  // register mb_tick_pulse_60
  reg mb_tick_pulse_60;
  wire mb_tick_pulse_60$D_IN, mb_tick_pulse_60$EN;

  // register mb_tick_pulse_61
  reg mb_tick_pulse_61;
  wire mb_tick_pulse_61$D_IN, mb_tick_pulse_61$EN;

  // register mb_tick_pulse_62
  reg mb_tick_pulse_62;
  wire mb_tick_pulse_62$D_IN, mb_tick_pulse_62$EN;

  // register mb_tick_pulse_63
  reg mb_tick_pulse_63;
  wire mb_tick_pulse_63$D_IN, mb_tick_pulse_63$EN;

  // register mb_tick_pulse_64
  reg mb_tick_pulse_64;
  wire mb_tick_pulse_64$D_IN, mb_tick_pulse_64$EN;

  // register mb_tick_pulse_7
  reg mb_tick_pulse_7;
  wire mb_tick_pulse_7$D_IN, mb_tick_pulse_7$EN;

  // register mb_tick_pulse_8
  reg mb_tick_pulse_8;
  wire mb_tick_pulse_8$D_IN, mb_tick_pulse_8$EN;

  // register mb_tick_pulse_9
  reg mb_tick_pulse_9;
  wire mb_tick_pulse_9$D_IN, mb_tick_pulse_9$EN;

  // register mpc
  reg [8 : 0] mpc;
  wire [8 : 0] mpc$D_IN;
  wire mpc$EN;

  // register sync_next
  reg sync_next;
  wire sync_next$D_IN, sync_next$EN;

  // register sync_this
  reg sync_this;
  wire sync_this$D_IN, sync_this$EN;

  // ports of submodule bc_bc_infifo
  wire [27 : 0] bc_bc_infifo$D_IN, bc_bc_infifo$D_OUT;
  wire bc_bc_infifo$CLR,
       bc_bc_infifo$DEQ,
       bc_bc_infifo$EMPTY_N,
       bc_bc_infifo$ENQ,
       bc_bc_infifo$FULL_N;

  // ports of submodule bc_bc_outfifo
  wire [27 : 0] bc_bc_outfifo$D_IN, bc_bc_outfifo$D_OUT;
  wire bc_bc_outfifo$CLR,
       bc_bc_outfifo$DEQ,
       bc_bc_outfifo$EMPTY_N,
       bc_bc_outfifo$ENQ,
       bc_bc_outfifo$FULL_N;

  // ports of submodule bt_info
  wire [7 : 0] bt_info$D_IN, bt_info$D_OUT;
  wire bt_info$CLR, bt_info$DEQ, bt_info$EMPTY_N, bt_info$ENQ, bt_info$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_bc_bc_energy_calc_1,
       CAN_FIRE_RL_bc_bc_energy_calc_2,
       CAN_FIRE_RL_bc_bc_energy_calc_3,
       CAN_FIRE_RL_bc_bc_energy_calc_4,
       CAN_FIRE_RL_bc_bc_energy_calc_in,
       CAN_FIRE_RL_bc_bc_inject_sample,
       CAN_FIRE_RL_beat_injector_cont,
       CAN_FIRE_RL_beat_injector_start,
       CAN_FIRE_RL_mb_metronome_counter,
       CAN_FIRE_RL_mb_metronome_counter_1,
       CAN_FIRE_RL_mb_metronome_counter_10,
       CAN_FIRE_RL_mb_metronome_counter_11,
       CAN_FIRE_RL_mb_metronome_counter_12,
       CAN_FIRE_RL_mb_metronome_counter_13,
       CAN_FIRE_RL_mb_metronome_counter_14,
       CAN_FIRE_RL_mb_metronome_counter_15,
       CAN_FIRE_RL_mb_metronome_counter_16,
       CAN_FIRE_RL_mb_metronome_counter_17,
       CAN_FIRE_RL_mb_metronome_counter_18,
       CAN_FIRE_RL_mb_metronome_counter_19,
       CAN_FIRE_RL_mb_metronome_counter_2,
       CAN_FIRE_RL_mb_metronome_counter_20,
       CAN_FIRE_RL_mb_metronome_counter_21,
       CAN_FIRE_RL_mb_metronome_counter_22,
       CAN_FIRE_RL_mb_metronome_counter_23,
       CAN_FIRE_RL_mb_metronome_counter_24,
       CAN_FIRE_RL_mb_metronome_counter_25,
       CAN_FIRE_RL_mb_metronome_counter_26,
       CAN_FIRE_RL_mb_metronome_counter_27,
       CAN_FIRE_RL_mb_metronome_counter_28,
       CAN_FIRE_RL_mb_metronome_counter_29,
       CAN_FIRE_RL_mb_metronome_counter_3,
       CAN_FIRE_RL_mb_metronome_counter_30,
       CAN_FIRE_RL_mb_metronome_counter_31,
       CAN_FIRE_RL_mb_metronome_counter_32,
       CAN_FIRE_RL_mb_metronome_counter_33,
       CAN_FIRE_RL_mb_metronome_counter_34,
       CAN_FIRE_RL_mb_metronome_counter_35,
       CAN_FIRE_RL_mb_metronome_counter_36,
       CAN_FIRE_RL_mb_metronome_counter_37,
       CAN_FIRE_RL_mb_metronome_counter_38,
       CAN_FIRE_RL_mb_metronome_counter_39,
       CAN_FIRE_RL_mb_metronome_counter_4,
       CAN_FIRE_RL_mb_metronome_counter_40,
       CAN_FIRE_RL_mb_metronome_counter_41,
       CAN_FIRE_RL_mb_metronome_counter_42,
       CAN_FIRE_RL_mb_metronome_counter_43,
       CAN_FIRE_RL_mb_metronome_counter_44,
       CAN_FIRE_RL_mb_metronome_counter_45,
       CAN_FIRE_RL_mb_metronome_counter_46,
       CAN_FIRE_RL_mb_metronome_counter_47,
       CAN_FIRE_RL_mb_metronome_counter_48,
       CAN_FIRE_RL_mb_metronome_counter_49,
       CAN_FIRE_RL_mb_metronome_counter_5,
       CAN_FIRE_RL_mb_metronome_counter_50,
       CAN_FIRE_RL_mb_metronome_counter_51,
       CAN_FIRE_RL_mb_metronome_counter_52,
       CAN_FIRE_RL_mb_metronome_counter_53,
       CAN_FIRE_RL_mb_metronome_counter_54,
       CAN_FIRE_RL_mb_metronome_counter_55,
       CAN_FIRE_RL_mb_metronome_counter_56,
       CAN_FIRE_RL_mb_metronome_counter_57,
       CAN_FIRE_RL_mb_metronome_counter_58,
       CAN_FIRE_RL_mb_metronome_counter_59,
       CAN_FIRE_RL_mb_metronome_counter_6,
       CAN_FIRE_RL_mb_metronome_counter_60,
       CAN_FIRE_RL_mb_metronome_counter_61,
       CAN_FIRE_RL_mb_metronome_counter_62,
       CAN_FIRE_RL_mb_metronome_counter_63,
       CAN_FIRE_RL_mb_metronome_counter_64,
       CAN_FIRE_RL_mb_metronome_counter_7,
       CAN_FIRE_RL_mb_metronome_counter_8,
       CAN_FIRE_RL_mb_metronome_counter_9,
       CAN_FIRE_RL_mb_tick_pulse_off,
       CAN_FIRE_RL_mb_tick_pulse_off_1,
       CAN_FIRE_RL_mb_tick_pulse_off_10,
       CAN_FIRE_RL_mb_tick_pulse_off_11,
       CAN_FIRE_RL_mb_tick_pulse_off_12,
       CAN_FIRE_RL_mb_tick_pulse_off_13,
       CAN_FIRE_RL_mb_tick_pulse_off_14,
       CAN_FIRE_RL_mb_tick_pulse_off_15,
       CAN_FIRE_RL_mb_tick_pulse_off_16,
       CAN_FIRE_RL_mb_tick_pulse_off_17,
       CAN_FIRE_RL_mb_tick_pulse_off_18,
       CAN_FIRE_RL_mb_tick_pulse_off_19,
       CAN_FIRE_RL_mb_tick_pulse_off_2,
       CAN_FIRE_RL_mb_tick_pulse_off_20,
       CAN_FIRE_RL_mb_tick_pulse_off_21,
       CAN_FIRE_RL_mb_tick_pulse_off_22,
       CAN_FIRE_RL_mb_tick_pulse_off_23,
       CAN_FIRE_RL_mb_tick_pulse_off_24,
       CAN_FIRE_RL_mb_tick_pulse_off_25,
       CAN_FIRE_RL_mb_tick_pulse_off_26,
       CAN_FIRE_RL_mb_tick_pulse_off_27,
       CAN_FIRE_RL_mb_tick_pulse_off_28,
       CAN_FIRE_RL_mb_tick_pulse_off_29,
       CAN_FIRE_RL_mb_tick_pulse_off_3,
       CAN_FIRE_RL_mb_tick_pulse_off_30,
       CAN_FIRE_RL_mb_tick_pulse_off_31,
       CAN_FIRE_RL_mb_tick_pulse_off_32,
       CAN_FIRE_RL_mb_tick_pulse_off_33,
       CAN_FIRE_RL_mb_tick_pulse_off_34,
       CAN_FIRE_RL_mb_tick_pulse_off_35,
       CAN_FIRE_RL_mb_tick_pulse_off_36,
       CAN_FIRE_RL_mb_tick_pulse_off_37,
       CAN_FIRE_RL_mb_tick_pulse_off_38,
       CAN_FIRE_RL_mb_tick_pulse_off_39,
       CAN_FIRE_RL_mb_tick_pulse_off_4,
       CAN_FIRE_RL_mb_tick_pulse_off_40,
       CAN_FIRE_RL_mb_tick_pulse_off_41,
       CAN_FIRE_RL_mb_tick_pulse_off_42,
       CAN_FIRE_RL_mb_tick_pulse_off_43,
       CAN_FIRE_RL_mb_tick_pulse_off_44,
       CAN_FIRE_RL_mb_tick_pulse_off_45,
       CAN_FIRE_RL_mb_tick_pulse_off_46,
       CAN_FIRE_RL_mb_tick_pulse_off_47,
       CAN_FIRE_RL_mb_tick_pulse_off_48,
       CAN_FIRE_RL_mb_tick_pulse_off_49,
       CAN_FIRE_RL_mb_tick_pulse_off_5,
       CAN_FIRE_RL_mb_tick_pulse_off_50,
       CAN_FIRE_RL_mb_tick_pulse_off_51,
       CAN_FIRE_RL_mb_tick_pulse_off_52,
       CAN_FIRE_RL_mb_tick_pulse_off_53,
       CAN_FIRE_RL_mb_tick_pulse_off_54,
       CAN_FIRE_RL_mb_tick_pulse_off_55,
       CAN_FIRE_RL_mb_tick_pulse_off_56,
       CAN_FIRE_RL_mb_tick_pulse_off_57,
       CAN_FIRE_RL_mb_tick_pulse_off_58,
       CAN_FIRE_RL_mb_tick_pulse_off_59,
       CAN_FIRE_RL_mb_tick_pulse_off_6,
       CAN_FIRE_RL_mb_tick_pulse_off_60,
       CAN_FIRE_RL_mb_tick_pulse_off_61,
       CAN_FIRE_RL_mb_tick_pulse_off_62,
       CAN_FIRE_RL_mb_tick_pulse_off_63,
       CAN_FIRE_RL_mb_tick_pulse_off_64,
       CAN_FIRE_RL_mb_tick_pulse_off_7,
       CAN_FIRE_RL_mb_tick_pulse_off_8,
       CAN_FIRE_RL_mb_tick_pulse_off_9,
       CAN_FIRE_RL_pulser,
       CAN_FIRE_getBeatInfo,
       CAN_FIRE_putSampleInput,
       CAN_FIRE_q_sync,
       WILL_FIRE_RL_bc_bc_energy_calc_1,
       WILL_FIRE_RL_bc_bc_energy_calc_2,
       WILL_FIRE_RL_bc_bc_energy_calc_3,
       WILL_FIRE_RL_bc_bc_energy_calc_4,
       WILL_FIRE_RL_bc_bc_energy_calc_in,
       WILL_FIRE_RL_bc_bc_inject_sample,
       WILL_FIRE_RL_beat_injector_cont,
       WILL_FIRE_RL_beat_injector_start,
       WILL_FIRE_RL_mb_metronome_counter,
       WILL_FIRE_RL_mb_metronome_counter_1,
       WILL_FIRE_RL_mb_metronome_counter_10,
       WILL_FIRE_RL_mb_metronome_counter_11,
       WILL_FIRE_RL_mb_metronome_counter_12,
       WILL_FIRE_RL_mb_metronome_counter_13,
       WILL_FIRE_RL_mb_metronome_counter_14,
       WILL_FIRE_RL_mb_metronome_counter_15,
       WILL_FIRE_RL_mb_metronome_counter_16,
       WILL_FIRE_RL_mb_metronome_counter_17,
       WILL_FIRE_RL_mb_metronome_counter_18,
       WILL_FIRE_RL_mb_metronome_counter_19,
       WILL_FIRE_RL_mb_metronome_counter_2,
       WILL_FIRE_RL_mb_metronome_counter_20,
       WILL_FIRE_RL_mb_metronome_counter_21,
       WILL_FIRE_RL_mb_metronome_counter_22,
       WILL_FIRE_RL_mb_metronome_counter_23,
       WILL_FIRE_RL_mb_metronome_counter_24,
       WILL_FIRE_RL_mb_metronome_counter_25,
       WILL_FIRE_RL_mb_metronome_counter_26,
       WILL_FIRE_RL_mb_metronome_counter_27,
       WILL_FIRE_RL_mb_metronome_counter_28,
       WILL_FIRE_RL_mb_metronome_counter_29,
       WILL_FIRE_RL_mb_metronome_counter_3,
       WILL_FIRE_RL_mb_metronome_counter_30,
       WILL_FIRE_RL_mb_metronome_counter_31,
       WILL_FIRE_RL_mb_metronome_counter_32,
       WILL_FIRE_RL_mb_metronome_counter_33,
       WILL_FIRE_RL_mb_metronome_counter_34,
       WILL_FIRE_RL_mb_metronome_counter_35,
       WILL_FIRE_RL_mb_metronome_counter_36,
       WILL_FIRE_RL_mb_metronome_counter_37,
       WILL_FIRE_RL_mb_metronome_counter_38,
       WILL_FIRE_RL_mb_metronome_counter_39,
       WILL_FIRE_RL_mb_metronome_counter_4,
       WILL_FIRE_RL_mb_metronome_counter_40,
       WILL_FIRE_RL_mb_metronome_counter_41,
       WILL_FIRE_RL_mb_metronome_counter_42,
       WILL_FIRE_RL_mb_metronome_counter_43,
       WILL_FIRE_RL_mb_metronome_counter_44,
       WILL_FIRE_RL_mb_metronome_counter_45,
       WILL_FIRE_RL_mb_metronome_counter_46,
       WILL_FIRE_RL_mb_metronome_counter_47,
       WILL_FIRE_RL_mb_metronome_counter_48,
       WILL_FIRE_RL_mb_metronome_counter_49,
       WILL_FIRE_RL_mb_metronome_counter_5,
       WILL_FIRE_RL_mb_metronome_counter_50,
       WILL_FIRE_RL_mb_metronome_counter_51,
       WILL_FIRE_RL_mb_metronome_counter_52,
       WILL_FIRE_RL_mb_metronome_counter_53,
       WILL_FIRE_RL_mb_metronome_counter_54,
       WILL_FIRE_RL_mb_metronome_counter_55,
       WILL_FIRE_RL_mb_metronome_counter_56,
       WILL_FIRE_RL_mb_metronome_counter_57,
       WILL_FIRE_RL_mb_metronome_counter_58,
       WILL_FIRE_RL_mb_metronome_counter_59,
       WILL_FIRE_RL_mb_metronome_counter_6,
       WILL_FIRE_RL_mb_metronome_counter_60,
       WILL_FIRE_RL_mb_metronome_counter_61,
       WILL_FIRE_RL_mb_metronome_counter_62,
       WILL_FIRE_RL_mb_metronome_counter_63,
       WILL_FIRE_RL_mb_metronome_counter_64,
       WILL_FIRE_RL_mb_metronome_counter_7,
       WILL_FIRE_RL_mb_metronome_counter_8,
       WILL_FIRE_RL_mb_metronome_counter_9,
       WILL_FIRE_RL_mb_tick_pulse_off,
       WILL_FIRE_RL_mb_tick_pulse_off_1,
       WILL_FIRE_RL_mb_tick_pulse_off_10,
       WILL_FIRE_RL_mb_tick_pulse_off_11,
       WILL_FIRE_RL_mb_tick_pulse_off_12,
       WILL_FIRE_RL_mb_tick_pulse_off_13,
       WILL_FIRE_RL_mb_tick_pulse_off_14,
       WILL_FIRE_RL_mb_tick_pulse_off_15,
       WILL_FIRE_RL_mb_tick_pulse_off_16,
       WILL_FIRE_RL_mb_tick_pulse_off_17,
       WILL_FIRE_RL_mb_tick_pulse_off_18,
       WILL_FIRE_RL_mb_tick_pulse_off_19,
       WILL_FIRE_RL_mb_tick_pulse_off_2,
       WILL_FIRE_RL_mb_tick_pulse_off_20,
       WILL_FIRE_RL_mb_tick_pulse_off_21,
       WILL_FIRE_RL_mb_tick_pulse_off_22,
       WILL_FIRE_RL_mb_tick_pulse_off_23,
       WILL_FIRE_RL_mb_tick_pulse_off_24,
       WILL_FIRE_RL_mb_tick_pulse_off_25,
       WILL_FIRE_RL_mb_tick_pulse_off_26,
       WILL_FIRE_RL_mb_tick_pulse_off_27,
       WILL_FIRE_RL_mb_tick_pulse_off_28,
       WILL_FIRE_RL_mb_tick_pulse_off_29,
       WILL_FIRE_RL_mb_tick_pulse_off_3,
       WILL_FIRE_RL_mb_tick_pulse_off_30,
       WILL_FIRE_RL_mb_tick_pulse_off_31,
       WILL_FIRE_RL_mb_tick_pulse_off_32,
       WILL_FIRE_RL_mb_tick_pulse_off_33,
       WILL_FIRE_RL_mb_tick_pulse_off_34,
       WILL_FIRE_RL_mb_tick_pulse_off_35,
       WILL_FIRE_RL_mb_tick_pulse_off_36,
       WILL_FIRE_RL_mb_tick_pulse_off_37,
       WILL_FIRE_RL_mb_tick_pulse_off_38,
       WILL_FIRE_RL_mb_tick_pulse_off_39,
       WILL_FIRE_RL_mb_tick_pulse_off_4,
       WILL_FIRE_RL_mb_tick_pulse_off_40,
       WILL_FIRE_RL_mb_tick_pulse_off_41,
       WILL_FIRE_RL_mb_tick_pulse_off_42,
       WILL_FIRE_RL_mb_tick_pulse_off_43,
       WILL_FIRE_RL_mb_tick_pulse_off_44,
       WILL_FIRE_RL_mb_tick_pulse_off_45,
       WILL_FIRE_RL_mb_tick_pulse_off_46,
       WILL_FIRE_RL_mb_tick_pulse_off_47,
       WILL_FIRE_RL_mb_tick_pulse_off_48,
       WILL_FIRE_RL_mb_tick_pulse_off_49,
       WILL_FIRE_RL_mb_tick_pulse_off_5,
       WILL_FIRE_RL_mb_tick_pulse_off_50,
       WILL_FIRE_RL_mb_tick_pulse_off_51,
       WILL_FIRE_RL_mb_tick_pulse_off_52,
       WILL_FIRE_RL_mb_tick_pulse_off_53,
       WILL_FIRE_RL_mb_tick_pulse_off_54,
       WILL_FIRE_RL_mb_tick_pulse_off_55,
       WILL_FIRE_RL_mb_tick_pulse_off_56,
       WILL_FIRE_RL_mb_tick_pulse_off_57,
       WILL_FIRE_RL_mb_tick_pulse_off_58,
       WILL_FIRE_RL_mb_tick_pulse_off_59,
       WILL_FIRE_RL_mb_tick_pulse_off_6,
       WILL_FIRE_RL_mb_tick_pulse_off_60,
       WILL_FIRE_RL_mb_tick_pulse_off_61,
       WILL_FIRE_RL_mb_tick_pulse_off_62,
       WILL_FIRE_RL_mb_tick_pulse_off_63,
       WILL_FIRE_RL_mb_tick_pulse_off_64,
       WILL_FIRE_RL_mb_tick_pulse_off_7,
       WILL_FIRE_RL_mb_tick_pulse_off_8,
       WILL_FIRE_RL_mb_tick_pulse_off_9,
       WILL_FIRE_RL_pulser,
       WILL_FIRE_getBeatInfo,
       WILL_FIRE_putSampleInput,
       WILL_FIRE_q_sync;

  // inputs to muxes for submodule ports
  wire [21 : 0] MUX_mb_counter$write_1__VAL_1,
		MUX_mb_counter$write_1__VAL_2,
		MUX_mb_counter_1$write_1__VAL_1,
		MUX_mb_counter_1$write_1__VAL_2,
		MUX_mb_counter_10$write_1__VAL_1,
		MUX_mb_counter_10$write_1__VAL_2,
		MUX_mb_counter_11$write_1__VAL_1,
		MUX_mb_counter_11$write_1__VAL_2,
		MUX_mb_counter_12$write_1__VAL_1,
		MUX_mb_counter_12$write_1__VAL_2,
		MUX_mb_counter_13$write_1__VAL_1,
		MUX_mb_counter_13$write_1__VAL_2,
		MUX_mb_counter_14$write_1__VAL_1,
		MUX_mb_counter_14$write_1__VAL_2,
		MUX_mb_counter_15$write_1__VAL_1,
		MUX_mb_counter_15$write_1__VAL_2,
		MUX_mb_counter_16$write_1__VAL_1,
		MUX_mb_counter_16$write_1__VAL_2,
		MUX_mb_counter_17$write_1__VAL_1,
		MUX_mb_counter_17$write_1__VAL_2,
		MUX_mb_counter_18$write_1__VAL_1,
		MUX_mb_counter_18$write_1__VAL_2,
		MUX_mb_counter_19$write_1__VAL_1,
		MUX_mb_counter_19$write_1__VAL_2,
		MUX_mb_counter_2$write_1__VAL_1,
		MUX_mb_counter_2$write_1__VAL_2,
		MUX_mb_counter_20$write_1__VAL_1,
		MUX_mb_counter_20$write_1__VAL_2,
		MUX_mb_counter_21$write_1__VAL_1,
		MUX_mb_counter_21$write_1__VAL_2,
		MUX_mb_counter_22$write_1__VAL_1,
		MUX_mb_counter_22$write_1__VAL_2,
		MUX_mb_counter_23$write_1__VAL_1,
		MUX_mb_counter_23$write_1__VAL_2,
		MUX_mb_counter_24$write_1__VAL_1,
		MUX_mb_counter_24$write_1__VAL_2,
		MUX_mb_counter_25$write_1__VAL_1,
		MUX_mb_counter_25$write_1__VAL_2,
		MUX_mb_counter_26$write_1__VAL_1,
		MUX_mb_counter_26$write_1__VAL_2,
		MUX_mb_counter_27$write_1__VAL_1,
		MUX_mb_counter_27$write_1__VAL_2,
		MUX_mb_counter_28$write_1__VAL_1,
		MUX_mb_counter_28$write_1__VAL_2,
		MUX_mb_counter_29$write_1__VAL_1,
		MUX_mb_counter_29$write_1__VAL_2,
		MUX_mb_counter_3$write_1__VAL_1,
		MUX_mb_counter_3$write_1__VAL_2,
		MUX_mb_counter_30$write_1__VAL_1,
		MUX_mb_counter_30$write_1__VAL_2,
		MUX_mb_counter_31$write_1__VAL_1,
		MUX_mb_counter_31$write_1__VAL_2,
		MUX_mb_counter_32$write_1__VAL_1,
		MUX_mb_counter_32$write_1__VAL_2,
		MUX_mb_counter_33$write_1__VAL_1,
		MUX_mb_counter_33$write_1__VAL_2,
		MUX_mb_counter_34$write_1__VAL_1,
		MUX_mb_counter_34$write_1__VAL_2,
		MUX_mb_counter_35$write_1__VAL_1,
		MUX_mb_counter_35$write_1__VAL_2,
		MUX_mb_counter_36$write_1__VAL_1,
		MUX_mb_counter_36$write_1__VAL_2,
		MUX_mb_counter_37$write_1__VAL_1,
		MUX_mb_counter_37$write_1__VAL_2,
		MUX_mb_counter_38$write_1__VAL_1,
		MUX_mb_counter_38$write_1__VAL_2,
		MUX_mb_counter_39$write_1__VAL_1,
		MUX_mb_counter_39$write_1__VAL_2,
		MUX_mb_counter_4$write_1__VAL_1,
		MUX_mb_counter_4$write_1__VAL_2,
		MUX_mb_counter_40$write_1__VAL_1,
		MUX_mb_counter_40$write_1__VAL_2,
		MUX_mb_counter_41$write_1__VAL_1,
		MUX_mb_counter_41$write_1__VAL_2,
		MUX_mb_counter_42$write_1__VAL_1,
		MUX_mb_counter_42$write_1__VAL_2,
		MUX_mb_counter_43$write_1__VAL_1,
		MUX_mb_counter_43$write_1__VAL_2,
		MUX_mb_counter_44$write_1__VAL_1,
		MUX_mb_counter_44$write_1__VAL_2,
		MUX_mb_counter_45$write_1__VAL_1,
		MUX_mb_counter_45$write_1__VAL_2,
		MUX_mb_counter_46$write_1__VAL_1,
		MUX_mb_counter_46$write_1__VAL_2,
		MUX_mb_counter_47$write_1__VAL_1,
		MUX_mb_counter_47$write_1__VAL_2,
		MUX_mb_counter_48$write_1__VAL_1,
		MUX_mb_counter_48$write_1__VAL_2,
		MUX_mb_counter_49$write_1__VAL_1,
		MUX_mb_counter_49$write_1__VAL_2,
		MUX_mb_counter_5$write_1__VAL_1,
		MUX_mb_counter_5$write_1__VAL_2,
		MUX_mb_counter_50$write_1__VAL_1,
		MUX_mb_counter_50$write_1__VAL_2,
		MUX_mb_counter_51$write_1__VAL_1,
		MUX_mb_counter_51$write_1__VAL_2,
		MUX_mb_counter_52$write_1__VAL_1,
		MUX_mb_counter_52$write_1__VAL_2,
		MUX_mb_counter_53$write_1__VAL_1,
		MUX_mb_counter_53$write_1__VAL_2,
		MUX_mb_counter_54$write_1__VAL_1,
		MUX_mb_counter_54$write_1__VAL_2,
		MUX_mb_counter_55$write_1__VAL_1,
		MUX_mb_counter_55$write_1__VAL_2,
		MUX_mb_counter_56$write_1__VAL_1,
		MUX_mb_counter_56$write_1__VAL_2,
		MUX_mb_counter_57$write_1__VAL_1,
		MUX_mb_counter_57$write_1__VAL_2,
		MUX_mb_counter_58$write_1__VAL_1,
		MUX_mb_counter_58$write_1__VAL_2,
		MUX_mb_counter_59$write_1__VAL_1,
		MUX_mb_counter_59$write_1__VAL_2,
		MUX_mb_counter_6$write_1__VAL_1,
		MUX_mb_counter_6$write_1__VAL_2,
		MUX_mb_counter_60$write_1__VAL_1,
		MUX_mb_counter_60$write_1__VAL_2,
		MUX_mb_counter_61$write_1__VAL_1,
		MUX_mb_counter_61$write_1__VAL_2,
		MUX_mb_counter_62$write_1__VAL_1,
		MUX_mb_counter_62$write_1__VAL_2,
		MUX_mb_counter_63$write_1__VAL_1,
		MUX_mb_counter_63$write_1__VAL_2,
		MUX_mb_counter_64$write_1__VAL_1,
		MUX_mb_counter_64$write_1__VAL_2,
		MUX_mb_counter_7$write_1__VAL_1,
		MUX_mb_counter_7$write_1__VAL_2,
		MUX_mb_counter_8$write_1__VAL_1,
		MUX_mb_counter_8$write_1__VAL_2,
		MUX_mb_counter_9$write_1__VAL_1,
		MUX_mb_counter_9$write_1__VAL_2;
  wire [9 : 0] MUX_bc_bc_sample_count$write_1__VAL_1;
  wire [6 : 0] MUX_mb_out_count$write_1__VAL_1;
  wire MUX_bt_info$enq_1__SEL_1,
       MUX_mb_counter_1$write_1__SEL_1,
       MUX_mb_counter_10$write_1__SEL_1,
       MUX_mb_counter_11$write_1__SEL_1,
       MUX_mb_counter_12$write_1__SEL_1,
       MUX_mb_counter_13$write_1__SEL_1,
       MUX_mb_counter_14$write_1__SEL_1,
       MUX_mb_counter_15$write_1__SEL_1,
       MUX_mb_counter_16$write_1__SEL_1,
       MUX_mb_counter_17$write_1__SEL_1,
       MUX_mb_counter_18$write_1__SEL_1,
       MUX_mb_counter_19$write_1__SEL_1,
       MUX_mb_counter_2$write_1__SEL_1,
       MUX_mb_counter_20$write_1__SEL_1,
       MUX_mb_counter_21$write_1__SEL_1,
       MUX_mb_counter_22$write_1__SEL_1,
       MUX_mb_counter_23$write_1__SEL_1,
       MUX_mb_counter_24$write_1__SEL_1,
       MUX_mb_counter_25$write_1__SEL_1,
       MUX_mb_counter_26$write_1__SEL_1,
       MUX_mb_counter_27$write_1__SEL_1,
       MUX_mb_counter_28$write_1__SEL_1,
       MUX_mb_counter_29$write_1__SEL_1,
       MUX_mb_counter_3$write_1__SEL_1,
       MUX_mb_counter_30$write_1__SEL_1,
       MUX_mb_counter_31$write_1__SEL_1,
       MUX_mb_counter_32$write_1__SEL_1,
       MUX_mb_counter_33$write_1__SEL_1,
       MUX_mb_counter_34$write_1__SEL_1,
       MUX_mb_counter_35$write_1__SEL_1,
       MUX_mb_counter_36$write_1__SEL_1,
       MUX_mb_counter_37$write_1__SEL_1,
       MUX_mb_counter_38$write_1__SEL_1,
       MUX_mb_counter_39$write_1__SEL_1,
       MUX_mb_counter_4$write_1__SEL_1,
       MUX_mb_counter_40$write_1__SEL_1,
       MUX_mb_counter_41$write_1__SEL_1,
       MUX_mb_counter_42$write_1__SEL_1,
       MUX_mb_counter_43$write_1__SEL_1,
       MUX_mb_counter_44$write_1__SEL_1,
       MUX_mb_counter_45$write_1__SEL_1,
       MUX_mb_counter_46$write_1__SEL_1,
       MUX_mb_counter_47$write_1__SEL_1,
       MUX_mb_counter_48$write_1__SEL_1,
       MUX_mb_counter_49$write_1__SEL_1,
       MUX_mb_counter_5$write_1__SEL_1,
       MUX_mb_counter_50$write_1__SEL_1,
       MUX_mb_counter_51$write_1__SEL_1,
       MUX_mb_counter_52$write_1__SEL_1,
       MUX_mb_counter_53$write_1__SEL_1,
       MUX_mb_counter_54$write_1__SEL_1,
       MUX_mb_counter_55$write_1__SEL_1,
       MUX_mb_counter_56$write_1__SEL_1,
       MUX_mb_counter_57$write_1__SEL_1,
       MUX_mb_counter_58$write_1__SEL_1,
       MUX_mb_counter_59$write_1__SEL_1,
       MUX_mb_counter_6$write_1__SEL_1,
       MUX_mb_counter_60$write_1__SEL_1,
       MUX_mb_counter_61$write_1__SEL_1,
       MUX_mb_counter_62$write_1__SEL_1,
       MUX_mb_counter_63$write_1__SEL_1,
       MUX_mb_counter_64$write_1__SEL_1,
       MUX_mb_counter_7$write_1__SEL_1,
       MUX_mb_counter_8$write_1__SEL_1,
       MUX_mb_counter_9$write_1__SEL_1,
       MUX_mb_tick_pulse$write_1__SEL_1;

  // remaining internal signals
  reg [21 : 0] CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3;
  wire [189 : 0] _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131,
		 x__h25526;
  wire [173 : 0] IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196,
		 _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0__ETC___d994,
		 _99240_MUL_0_CONCAT_bc_bc_avg_energy_9_75_CONCA_ETC___d993,
		 x__h24206;
  wire [94 : 0] x__h25652, x__h35837;
  wire [78 : 0] temp__h25620, temp__h35804, temp__h43325;
  wire [51 : 0] bc_bc_avg_energy_9_MUL_bc_bc_avg_energy_9___d169,
		bc_bc_cur_energy_MUL_bc_bc_cur_energy___d1060;
  wire [25 : 0] IF_bc_bc_infifo_first_BIT_13_5_THEN_NEG_bc_bc__ETC___d20,
		IF_bc_bc_infifo_first_BIT_27_THEN_NEG_bc_bc_in_ETC___d13;
  wire [15 : 0] y_f__h28491, y_f__h38673;
  wire [13 : 0] IF_bc_bc_infifoD_OUT_BIT_13_THEN_NEG_bc_bc_in_ETC__q1,
		IF_bc_bc_infifoD_OUT_BIT_27_THEN_NEG_bc_bc_in_ETC__q2;
  wire NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255,
       NOT_mb_tick_pulse_10_88_63_AND_NOT_mb_tick_pul_ETC___d571,
       NOT_mb_tick_pulse_16_06_69_AND_NOT_mb_tick_pul_ETC___d565,
       NOT_mb_tick_pulse_22_24_75_AND_NOT_mb_tick_pul_ETC___d559,
       NOT_mb_tick_pulse_28_42_81_AND_NOT_mb_tick_pul_ETC___d553,
       NOT_mb_tick_pulse_34_60_87_AND_NOT_mb_tick_pul_ETC___d547,
       NOT_mb_tick_pulse_40_78_93_AND_NOT_mb_tick_pul_ETC___d541,
       NOT_mb_tick_pulse_46_96_99_AND_NOT_mb_tick_pul_ETC___d535,
       NOT_mb_tick_pulse_4_70_57_AND_NOT_mb_tick_puls_ETC___d577,
       NOT_mb_tick_pulse_52_14_05_AND_NOT_mb_tick_pul_ETC___d529,
       NOT_mb_tick_pulse_58_32_11_AND_NOT_mb_tick_pul_ETC___d523;

  // action method q_sync
  assign RDY_q_sync = !sync_next ;
  assign CAN_FIRE_q_sync = !sync_next ;
  assign WILL_FIRE_q_sync = EN_q_sync ;

  // action method putSampleInput
  assign RDY_putSampleInput = bc_bc_infifo$FULL_N ;
  assign CAN_FIRE_putSampleInput = bc_bc_infifo$FULL_N ;
  assign WILL_FIRE_putSampleInput = EN_putSampleInput ;

  // actionvalue method getBeatInfo
  assign getBeatInfo = bt_info$D_OUT ;
  assign RDY_getBeatInfo = bt_info$EMPTY_N ;
  assign CAN_FIRE_getBeatInfo = bt_info$EMPTY_N ;
  assign WILL_FIRE_getBeatInfo = EN_getBeatInfo ;

  // submodule bc_bc_infifo
  FIFO1 #(.width(32'd28), .guarded(32'd1)) bc_bc_infifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bc_bc_infifo$D_IN),
							.ENQ(bc_bc_infifo$ENQ),
							.DEQ(bc_bc_infifo$DEQ),
							.CLR(bc_bc_infifo$CLR),
							.D_OUT(bc_bc_infifo$D_OUT),
							.FULL_N(bc_bc_infifo$FULL_N),
							.EMPTY_N(bc_bc_infifo$EMPTY_N));

  // submodule bc_bc_outfifo
  FIFO1 #(.width(32'd28), .guarded(32'd1)) bc_bc_outfifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(bc_bc_outfifo$D_IN),
							 .ENQ(bc_bc_outfifo$ENQ),
							 .DEQ(bc_bc_outfifo$DEQ),
							 .CLR(bc_bc_outfifo$CLR),
							 .D_OUT(bc_bc_outfifo$D_OUT),
							 .FULL_N(bc_bc_outfifo$FULL_N),
							 .EMPTY_N(bc_bc_outfifo$EMPTY_N));

  // submodule bt_info
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd65),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) bt_info(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(bt_info$D_IN),
				       .ENQ(bt_info$ENQ),
				       .DEQ(bt_info$DEQ),
				       .CLR(bt_info$CLR),
				       .D_OUT(bt_info$D_OUT),
				       .FULL_N(bt_info$FULL_N),
				       .EMPTY_N(bt_info$EMPTY_N));

  // rule RL_pulser
  assign CAN_FIRE_RL_pulser =
	     !mb_tick_pulse && !mb_tick_pulse_1 && !mb_tick_pulse_2 &&
	     !mb_tick_pulse_3 &&
	     NOT_mb_tick_pulse_4_70_57_AND_NOT_mb_tick_puls_ETC___d577 ;
  assign WILL_FIRE_RL_pulser = CAN_FIRE_RL_pulser ;

  // rule RL_beat_injector_start
  assign CAN_FIRE_RL_beat_injector_start =
	     bc_bc_outfifo$EMPTY_N && bt_info$FULL_N && mb_out_count == 7'd0 ;
  assign WILL_FIRE_RL_beat_injector_start =
	     CAN_FIRE_RL_beat_injector_start && !EN_q_sync ;

  // rule RL_beat_injector_cont
  assign CAN_FIRE_RL_beat_injector_cont =
	     bt_info$FULL_N && mb_out_count != 7'd0 && mb_out_count < 7'd65 ;
  assign WILL_FIRE_RL_beat_injector_cont = CAN_FIRE_RL_beat_injector_cont ;

  // rule RL_bc_bc_inject_sample
  assign CAN_FIRE_RL_bc_bc_inject_sample =
	     bc_bc_infifo$EMPTY_N && bc_bc_sample_count != 10'd1023 ;
  assign WILL_FIRE_RL_bc_bc_inject_sample = CAN_FIRE_RL_bc_bc_inject_sample ;

  // rule RL_bc_bc_energy_calc_in
  assign CAN_FIRE_RL_bc_bc_energy_calc_in =
	     bc_bc_sample_count == 10'd1023 && bc_bc_energy_stage == 4'd0 ;
  assign WILL_FIRE_RL_bc_bc_energy_calc_in =
	     CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // rule RL_bc_bc_energy_calc_1
  assign CAN_FIRE_RL_bc_bc_energy_calc_1 = bc_bc_energy_stage == 4'd1 ;
  assign WILL_FIRE_RL_bc_bc_energy_calc_1 = CAN_FIRE_RL_bc_bc_energy_calc_1 ;

  // rule RL_bc_bc_energy_calc_2
  assign CAN_FIRE_RL_bc_bc_energy_calc_2 = bc_bc_energy_stage == 4'd2 ;
  assign WILL_FIRE_RL_bc_bc_energy_calc_2 = CAN_FIRE_RL_bc_bc_energy_calc_2 ;

  // rule RL_bc_bc_energy_calc_3
  assign CAN_FIRE_RL_bc_bc_energy_calc_3 = bc_bc_energy_stage == 4'd3 ;
  assign WILL_FIRE_RL_bc_bc_energy_calc_3 = CAN_FIRE_RL_bc_bc_energy_calc_3 ;

  // rule RL_bc_bc_energy_calc_4
  assign CAN_FIRE_RL_bc_bc_energy_calc_4 =
	     bc_bc_outfifo$FULL_N && bc_bc_energy_stage == 4'd4 ;
  assign WILL_FIRE_RL_bc_bc_energy_calc_4 =
	     CAN_FIRE_RL_bc_bc_energy_calc_4 &&
	     !WILL_FIRE_RL_bc_bc_inject_sample ;

  // rule RL_mb_metronome_counter
  assign CAN_FIRE_RL_mb_metronome_counter = mb_tick_pulse ;
  assign WILL_FIRE_RL_mb_metronome_counter =
	     mb_tick_pulse && !WILL_FIRE_RL_beat_injector_start ;

  // rule RL_mb_tick_pulse_off
  assign CAN_FIRE_RL_mb_tick_pulse_off = mb_tick_pulse ;
  assign WILL_FIRE_RL_mb_tick_pulse_off = mb_tick_pulse ;

  // rule RL_mb_metronome_counter_1
  assign CAN_FIRE_RL_mb_metronome_counter_1 = mb_tick_pulse_1 ;
  assign WILL_FIRE_RL_mb_metronome_counter_1 =
	     mb_tick_pulse_1 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_1
  assign CAN_FIRE_RL_mb_tick_pulse_off_1 = mb_tick_pulse_1 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_1 = mb_tick_pulse_1 ;

  // rule RL_mb_metronome_counter_2
  assign CAN_FIRE_RL_mb_metronome_counter_2 = mb_tick_pulse_2 ;
  assign WILL_FIRE_RL_mb_metronome_counter_2 =
	     mb_tick_pulse_2 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_2
  assign CAN_FIRE_RL_mb_tick_pulse_off_2 = mb_tick_pulse_2 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_2 = mb_tick_pulse_2 ;

  // rule RL_mb_metronome_counter_3
  assign CAN_FIRE_RL_mb_metronome_counter_3 = mb_tick_pulse_3 ;
  assign WILL_FIRE_RL_mb_metronome_counter_3 =
	     mb_tick_pulse_3 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_3
  assign CAN_FIRE_RL_mb_tick_pulse_off_3 = mb_tick_pulse_3 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_3 = mb_tick_pulse_3 ;

  // rule RL_mb_metronome_counter_4
  assign CAN_FIRE_RL_mb_metronome_counter_4 = mb_tick_pulse_4 ;
  assign WILL_FIRE_RL_mb_metronome_counter_4 =
	     mb_tick_pulse_4 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_4
  assign CAN_FIRE_RL_mb_tick_pulse_off_4 = mb_tick_pulse_4 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_4 = mb_tick_pulse_4 ;

  // rule RL_mb_metronome_counter_5
  assign CAN_FIRE_RL_mb_metronome_counter_5 = mb_tick_pulse_5 ;
  assign WILL_FIRE_RL_mb_metronome_counter_5 =
	     mb_tick_pulse_5 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_5
  assign CAN_FIRE_RL_mb_tick_pulse_off_5 = mb_tick_pulse_5 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_5 = mb_tick_pulse_5 ;

  // rule RL_mb_metronome_counter_6
  assign CAN_FIRE_RL_mb_metronome_counter_6 = mb_tick_pulse_6 ;
  assign WILL_FIRE_RL_mb_metronome_counter_6 =
	     mb_tick_pulse_6 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_6
  assign CAN_FIRE_RL_mb_tick_pulse_off_6 = mb_tick_pulse_6 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_6 = mb_tick_pulse_6 ;

  // rule RL_mb_metronome_counter_7
  assign CAN_FIRE_RL_mb_metronome_counter_7 = mb_tick_pulse_7 ;
  assign WILL_FIRE_RL_mb_metronome_counter_7 =
	     mb_tick_pulse_7 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_7
  assign CAN_FIRE_RL_mb_tick_pulse_off_7 = mb_tick_pulse_7 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_7 = mb_tick_pulse_7 ;

  // rule RL_mb_metronome_counter_8
  assign CAN_FIRE_RL_mb_metronome_counter_8 = mb_tick_pulse_8 ;
  assign WILL_FIRE_RL_mb_metronome_counter_8 =
	     mb_tick_pulse_8 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_8
  assign CAN_FIRE_RL_mb_tick_pulse_off_8 = mb_tick_pulse_8 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_8 = mb_tick_pulse_8 ;

  // rule RL_mb_metronome_counter_9
  assign CAN_FIRE_RL_mb_metronome_counter_9 = mb_tick_pulse_9 ;
  assign WILL_FIRE_RL_mb_metronome_counter_9 =
	     mb_tick_pulse_9 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_9
  assign CAN_FIRE_RL_mb_tick_pulse_off_9 = mb_tick_pulse_9 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_9 = mb_tick_pulse_9 ;

  // rule RL_mb_metronome_counter_10
  assign CAN_FIRE_RL_mb_metronome_counter_10 = mb_tick_pulse_10 ;
  assign WILL_FIRE_RL_mb_metronome_counter_10 =
	     mb_tick_pulse_10 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_10
  assign CAN_FIRE_RL_mb_tick_pulse_off_10 = mb_tick_pulse_10 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_10 = mb_tick_pulse_10 ;

  // rule RL_mb_metronome_counter_11
  assign CAN_FIRE_RL_mb_metronome_counter_11 = mb_tick_pulse_11 ;
  assign WILL_FIRE_RL_mb_metronome_counter_11 =
	     mb_tick_pulse_11 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_11
  assign CAN_FIRE_RL_mb_tick_pulse_off_11 = mb_tick_pulse_11 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_11 = mb_tick_pulse_11 ;

  // rule RL_mb_metronome_counter_12
  assign CAN_FIRE_RL_mb_metronome_counter_12 = mb_tick_pulse_12 ;
  assign WILL_FIRE_RL_mb_metronome_counter_12 =
	     mb_tick_pulse_12 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_12
  assign CAN_FIRE_RL_mb_tick_pulse_off_12 = mb_tick_pulse_12 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_12 = mb_tick_pulse_12 ;

  // rule RL_mb_metronome_counter_13
  assign CAN_FIRE_RL_mb_metronome_counter_13 = mb_tick_pulse_13 ;
  assign WILL_FIRE_RL_mb_metronome_counter_13 =
	     mb_tick_pulse_13 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_13
  assign CAN_FIRE_RL_mb_tick_pulse_off_13 = mb_tick_pulse_13 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_13 = mb_tick_pulse_13 ;

  // rule RL_mb_metronome_counter_14
  assign CAN_FIRE_RL_mb_metronome_counter_14 = mb_tick_pulse_14 ;
  assign WILL_FIRE_RL_mb_metronome_counter_14 =
	     mb_tick_pulse_14 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_14
  assign CAN_FIRE_RL_mb_tick_pulse_off_14 = mb_tick_pulse_14 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_14 = mb_tick_pulse_14 ;

  // rule RL_mb_metronome_counter_15
  assign CAN_FIRE_RL_mb_metronome_counter_15 = mb_tick_pulse_15 ;
  assign WILL_FIRE_RL_mb_metronome_counter_15 =
	     mb_tick_pulse_15 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_15
  assign CAN_FIRE_RL_mb_tick_pulse_off_15 = mb_tick_pulse_15 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_15 = mb_tick_pulse_15 ;

  // rule RL_mb_metronome_counter_16
  assign CAN_FIRE_RL_mb_metronome_counter_16 = mb_tick_pulse_16 ;
  assign WILL_FIRE_RL_mb_metronome_counter_16 =
	     mb_tick_pulse_16 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_16
  assign CAN_FIRE_RL_mb_tick_pulse_off_16 = mb_tick_pulse_16 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_16 = mb_tick_pulse_16 ;

  // rule RL_mb_metronome_counter_17
  assign CAN_FIRE_RL_mb_metronome_counter_17 = mb_tick_pulse_17 ;
  assign WILL_FIRE_RL_mb_metronome_counter_17 =
	     mb_tick_pulse_17 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_17
  assign CAN_FIRE_RL_mb_tick_pulse_off_17 = mb_tick_pulse_17 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_17 = mb_tick_pulse_17 ;

  // rule RL_mb_metronome_counter_18
  assign CAN_FIRE_RL_mb_metronome_counter_18 = mb_tick_pulse_18 ;
  assign WILL_FIRE_RL_mb_metronome_counter_18 =
	     mb_tick_pulse_18 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_18
  assign CAN_FIRE_RL_mb_tick_pulse_off_18 = mb_tick_pulse_18 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_18 = mb_tick_pulse_18 ;

  // rule RL_mb_metronome_counter_19
  assign CAN_FIRE_RL_mb_metronome_counter_19 = mb_tick_pulse_19 ;
  assign WILL_FIRE_RL_mb_metronome_counter_19 =
	     mb_tick_pulse_19 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_19
  assign CAN_FIRE_RL_mb_tick_pulse_off_19 = mb_tick_pulse_19 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_19 = mb_tick_pulse_19 ;

  // rule RL_mb_metronome_counter_20
  assign CAN_FIRE_RL_mb_metronome_counter_20 = mb_tick_pulse_20 ;
  assign WILL_FIRE_RL_mb_metronome_counter_20 =
	     mb_tick_pulse_20 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_20
  assign CAN_FIRE_RL_mb_tick_pulse_off_20 = mb_tick_pulse_20 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_20 = mb_tick_pulse_20 ;

  // rule RL_mb_metronome_counter_21
  assign CAN_FIRE_RL_mb_metronome_counter_21 = mb_tick_pulse_21 ;
  assign WILL_FIRE_RL_mb_metronome_counter_21 =
	     mb_tick_pulse_21 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_21
  assign CAN_FIRE_RL_mb_tick_pulse_off_21 = mb_tick_pulse_21 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_21 = mb_tick_pulse_21 ;

  // rule RL_mb_metronome_counter_22
  assign CAN_FIRE_RL_mb_metronome_counter_22 = mb_tick_pulse_22 ;
  assign WILL_FIRE_RL_mb_metronome_counter_22 =
	     mb_tick_pulse_22 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_22
  assign CAN_FIRE_RL_mb_tick_pulse_off_22 = mb_tick_pulse_22 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_22 = mb_tick_pulse_22 ;

  // rule RL_mb_metronome_counter_23
  assign CAN_FIRE_RL_mb_metronome_counter_23 = mb_tick_pulse_23 ;
  assign WILL_FIRE_RL_mb_metronome_counter_23 =
	     mb_tick_pulse_23 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_23
  assign CAN_FIRE_RL_mb_tick_pulse_off_23 = mb_tick_pulse_23 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_23 = mb_tick_pulse_23 ;

  // rule RL_mb_metronome_counter_24
  assign CAN_FIRE_RL_mb_metronome_counter_24 = mb_tick_pulse_24 ;
  assign WILL_FIRE_RL_mb_metronome_counter_24 =
	     mb_tick_pulse_24 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_24
  assign CAN_FIRE_RL_mb_tick_pulse_off_24 = mb_tick_pulse_24 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_24 = mb_tick_pulse_24 ;

  // rule RL_mb_metronome_counter_25
  assign CAN_FIRE_RL_mb_metronome_counter_25 = mb_tick_pulse_25 ;
  assign WILL_FIRE_RL_mb_metronome_counter_25 =
	     mb_tick_pulse_25 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_25
  assign CAN_FIRE_RL_mb_tick_pulse_off_25 = mb_tick_pulse_25 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_25 = mb_tick_pulse_25 ;

  // rule RL_mb_metronome_counter_26
  assign CAN_FIRE_RL_mb_metronome_counter_26 = mb_tick_pulse_26 ;
  assign WILL_FIRE_RL_mb_metronome_counter_26 =
	     mb_tick_pulse_26 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_26
  assign CAN_FIRE_RL_mb_tick_pulse_off_26 = mb_tick_pulse_26 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_26 = mb_tick_pulse_26 ;

  // rule RL_mb_metronome_counter_27
  assign CAN_FIRE_RL_mb_metronome_counter_27 = mb_tick_pulse_27 ;
  assign WILL_FIRE_RL_mb_metronome_counter_27 =
	     mb_tick_pulse_27 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_27
  assign CAN_FIRE_RL_mb_tick_pulse_off_27 = mb_tick_pulse_27 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_27 = mb_tick_pulse_27 ;

  // rule RL_mb_metronome_counter_28
  assign CAN_FIRE_RL_mb_metronome_counter_28 = mb_tick_pulse_28 ;
  assign WILL_FIRE_RL_mb_metronome_counter_28 =
	     mb_tick_pulse_28 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_28
  assign CAN_FIRE_RL_mb_tick_pulse_off_28 = mb_tick_pulse_28 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_28 = mb_tick_pulse_28 ;

  // rule RL_mb_metronome_counter_29
  assign CAN_FIRE_RL_mb_metronome_counter_29 = mb_tick_pulse_29 ;
  assign WILL_FIRE_RL_mb_metronome_counter_29 =
	     mb_tick_pulse_29 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_29
  assign CAN_FIRE_RL_mb_tick_pulse_off_29 = mb_tick_pulse_29 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_29 = mb_tick_pulse_29 ;

  // rule RL_mb_metronome_counter_30
  assign CAN_FIRE_RL_mb_metronome_counter_30 = mb_tick_pulse_30 ;
  assign WILL_FIRE_RL_mb_metronome_counter_30 =
	     mb_tick_pulse_30 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_30
  assign CAN_FIRE_RL_mb_tick_pulse_off_30 = mb_tick_pulse_30 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_30 = mb_tick_pulse_30 ;

  // rule RL_mb_metronome_counter_31
  assign CAN_FIRE_RL_mb_metronome_counter_31 = mb_tick_pulse_31 ;
  assign WILL_FIRE_RL_mb_metronome_counter_31 =
	     mb_tick_pulse_31 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_31
  assign CAN_FIRE_RL_mb_tick_pulse_off_31 = mb_tick_pulse_31 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_31 = mb_tick_pulse_31 ;

  // rule RL_mb_metronome_counter_32
  assign CAN_FIRE_RL_mb_metronome_counter_32 = mb_tick_pulse_32 ;
  assign WILL_FIRE_RL_mb_metronome_counter_32 =
	     mb_tick_pulse_32 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_32
  assign CAN_FIRE_RL_mb_tick_pulse_off_32 = mb_tick_pulse_32 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_32 = mb_tick_pulse_32 ;

  // rule RL_mb_metronome_counter_33
  assign CAN_FIRE_RL_mb_metronome_counter_33 = mb_tick_pulse_33 ;
  assign WILL_FIRE_RL_mb_metronome_counter_33 =
	     mb_tick_pulse_33 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_33
  assign CAN_FIRE_RL_mb_tick_pulse_off_33 = mb_tick_pulse_33 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_33 = mb_tick_pulse_33 ;

  // rule RL_mb_metronome_counter_34
  assign CAN_FIRE_RL_mb_metronome_counter_34 = mb_tick_pulse_34 ;
  assign WILL_FIRE_RL_mb_metronome_counter_34 =
	     mb_tick_pulse_34 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_34
  assign CAN_FIRE_RL_mb_tick_pulse_off_34 = mb_tick_pulse_34 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_34 = mb_tick_pulse_34 ;

  // rule RL_mb_metronome_counter_35
  assign CAN_FIRE_RL_mb_metronome_counter_35 = mb_tick_pulse_35 ;
  assign WILL_FIRE_RL_mb_metronome_counter_35 =
	     mb_tick_pulse_35 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_35
  assign CAN_FIRE_RL_mb_tick_pulse_off_35 = mb_tick_pulse_35 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_35 = mb_tick_pulse_35 ;

  // rule RL_mb_metronome_counter_36
  assign CAN_FIRE_RL_mb_metronome_counter_36 = mb_tick_pulse_36 ;
  assign WILL_FIRE_RL_mb_metronome_counter_36 =
	     mb_tick_pulse_36 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_36
  assign CAN_FIRE_RL_mb_tick_pulse_off_36 = mb_tick_pulse_36 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_36 = mb_tick_pulse_36 ;

  // rule RL_mb_metronome_counter_37
  assign CAN_FIRE_RL_mb_metronome_counter_37 = mb_tick_pulse_37 ;
  assign WILL_FIRE_RL_mb_metronome_counter_37 =
	     mb_tick_pulse_37 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_37
  assign CAN_FIRE_RL_mb_tick_pulse_off_37 = mb_tick_pulse_37 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_37 = mb_tick_pulse_37 ;

  // rule RL_mb_metronome_counter_38
  assign CAN_FIRE_RL_mb_metronome_counter_38 = mb_tick_pulse_38 ;
  assign WILL_FIRE_RL_mb_metronome_counter_38 =
	     mb_tick_pulse_38 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_38
  assign CAN_FIRE_RL_mb_tick_pulse_off_38 = mb_tick_pulse_38 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_38 = mb_tick_pulse_38 ;

  // rule RL_mb_metronome_counter_39
  assign CAN_FIRE_RL_mb_metronome_counter_39 = mb_tick_pulse_39 ;
  assign WILL_FIRE_RL_mb_metronome_counter_39 =
	     mb_tick_pulse_39 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_39
  assign CAN_FIRE_RL_mb_tick_pulse_off_39 = mb_tick_pulse_39 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_39 = mb_tick_pulse_39 ;

  // rule RL_mb_metronome_counter_40
  assign CAN_FIRE_RL_mb_metronome_counter_40 = mb_tick_pulse_40 ;
  assign WILL_FIRE_RL_mb_metronome_counter_40 =
	     mb_tick_pulse_40 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_40
  assign CAN_FIRE_RL_mb_tick_pulse_off_40 = mb_tick_pulse_40 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_40 = mb_tick_pulse_40 ;

  // rule RL_mb_metronome_counter_41
  assign CAN_FIRE_RL_mb_metronome_counter_41 = mb_tick_pulse_41 ;
  assign WILL_FIRE_RL_mb_metronome_counter_41 =
	     mb_tick_pulse_41 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_41
  assign CAN_FIRE_RL_mb_tick_pulse_off_41 = mb_tick_pulse_41 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_41 = mb_tick_pulse_41 ;

  // rule RL_mb_metronome_counter_42
  assign CAN_FIRE_RL_mb_metronome_counter_42 = mb_tick_pulse_42 ;
  assign WILL_FIRE_RL_mb_metronome_counter_42 =
	     mb_tick_pulse_42 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_42
  assign CAN_FIRE_RL_mb_tick_pulse_off_42 = mb_tick_pulse_42 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_42 = mb_tick_pulse_42 ;

  // rule RL_mb_metronome_counter_43
  assign CAN_FIRE_RL_mb_metronome_counter_43 = mb_tick_pulse_43 ;
  assign WILL_FIRE_RL_mb_metronome_counter_43 =
	     mb_tick_pulse_43 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_43
  assign CAN_FIRE_RL_mb_tick_pulse_off_43 = mb_tick_pulse_43 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_43 = mb_tick_pulse_43 ;

  // rule RL_mb_metronome_counter_44
  assign CAN_FIRE_RL_mb_metronome_counter_44 = mb_tick_pulse_44 ;
  assign WILL_FIRE_RL_mb_metronome_counter_44 =
	     mb_tick_pulse_44 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_44
  assign CAN_FIRE_RL_mb_tick_pulse_off_44 = mb_tick_pulse_44 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_44 = mb_tick_pulse_44 ;

  // rule RL_mb_metronome_counter_45
  assign CAN_FIRE_RL_mb_metronome_counter_45 = mb_tick_pulse_45 ;
  assign WILL_FIRE_RL_mb_metronome_counter_45 =
	     mb_tick_pulse_45 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_45
  assign CAN_FIRE_RL_mb_tick_pulse_off_45 = mb_tick_pulse_45 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_45 = mb_tick_pulse_45 ;

  // rule RL_mb_metronome_counter_46
  assign CAN_FIRE_RL_mb_metronome_counter_46 = mb_tick_pulse_46 ;
  assign WILL_FIRE_RL_mb_metronome_counter_46 =
	     mb_tick_pulse_46 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_46
  assign CAN_FIRE_RL_mb_tick_pulse_off_46 = mb_tick_pulse_46 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_46 = mb_tick_pulse_46 ;

  // rule RL_mb_metronome_counter_47
  assign CAN_FIRE_RL_mb_metronome_counter_47 = mb_tick_pulse_47 ;
  assign WILL_FIRE_RL_mb_metronome_counter_47 =
	     mb_tick_pulse_47 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_47
  assign CAN_FIRE_RL_mb_tick_pulse_off_47 = mb_tick_pulse_47 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_47 = mb_tick_pulse_47 ;

  // rule RL_mb_metronome_counter_48
  assign CAN_FIRE_RL_mb_metronome_counter_48 = mb_tick_pulse_48 ;
  assign WILL_FIRE_RL_mb_metronome_counter_48 =
	     mb_tick_pulse_48 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_48
  assign CAN_FIRE_RL_mb_tick_pulse_off_48 = mb_tick_pulse_48 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_48 = mb_tick_pulse_48 ;

  // rule RL_mb_metronome_counter_49
  assign CAN_FIRE_RL_mb_metronome_counter_49 = mb_tick_pulse_49 ;
  assign WILL_FIRE_RL_mb_metronome_counter_49 =
	     mb_tick_pulse_49 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_49
  assign CAN_FIRE_RL_mb_tick_pulse_off_49 = mb_tick_pulse_49 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_49 = mb_tick_pulse_49 ;

  // rule RL_mb_metronome_counter_50
  assign CAN_FIRE_RL_mb_metronome_counter_50 = mb_tick_pulse_50 ;
  assign WILL_FIRE_RL_mb_metronome_counter_50 =
	     mb_tick_pulse_50 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_50
  assign CAN_FIRE_RL_mb_tick_pulse_off_50 = mb_tick_pulse_50 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_50 = mb_tick_pulse_50 ;

  // rule RL_mb_metronome_counter_51
  assign CAN_FIRE_RL_mb_metronome_counter_51 = mb_tick_pulse_51 ;
  assign WILL_FIRE_RL_mb_metronome_counter_51 =
	     mb_tick_pulse_51 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_51
  assign CAN_FIRE_RL_mb_tick_pulse_off_51 = mb_tick_pulse_51 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_51 = mb_tick_pulse_51 ;

  // rule RL_mb_metronome_counter_52
  assign CAN_FIRE_RL_mb_metronome_counter_52 = mb_tick_pulse_52 ;
  assign WILL_FIRE_RL_mb_metronome_counter_52 =
	     mb_tick_pulse_52 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_52
  assign CAN_FIRE_RL_mb_tick_pulse_off_52 = mb_tick_pulse_52 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_52 = mb_tick_pulse_52 ;

  // rule RL_mb_metronome_counter_53
  assign CAN_FIRE_RL_mb_metronome_counter_53 = mb_tick_pulse_53 ;
  assign WILL_FIRE_RL_mb_metronome_counter_53 =
	     mb_tick_pulse_53 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_53
  assign CAN_FIRE_RL_mb_tick_pulse_off_53 = mb_tick_pulse_53 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_53 = mb_tick_pulse_53 ;

  // rule RL_mb_metronome_counter_54
  assign CAN_FIRE_RL_mb_metronome_counter_54 = mb_tick_pulse_54 ;
  assign WILL_FIRE_RL_mb_metronome_counter_54 =
	     mb_tick_pulse_54 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_54
  assign CAN_FIRE_RL_mb_tick_pulse_off_54 = mb_tick_pulse_54 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_54 = mb_tick_pulse_54 ;

  // rule RL_mb_metronome_counter_55
  assign CAN_FIRE_RL_mb_metronome_counter_55 = mb_tick_pulse_55 ;
  assign WILL_FIRE_RL_mb_metronome_counter_55 =
	     mb_tick_pulse_55 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_55
  assign CAN_FIRE_RL_mb_tick_pulse_off_55 = mb_tick_pulse_55 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_55 = mb_tick_pulse_55 ;

  // rule RL_mb_metronome_counter_56
  assign CAN_FIRE_RL_mb_metronome_counter_56 = mb_tick_pulse_56 ;
  assign WILL_FIRE_RL_mb_metronome_counter_56 =
	     mb_tick_pulse_56 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_56
  assign CAN_FIRE_RL_mb_tick_pulse_off_56 = mb_tick_pulse_56 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_56 = mb_tick_pulse_56 ;

  // rule RL_mb_metronome_counter_57
  assign CAN_FIRE_RL_mb_metronome_counter_57 = mb_tick_pulse_57 ;
  assign WILL_FIRE_RL_mb_metronome_counter_57 =
	     mb_tick_pulse_57 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_57
  assign CAN_FIRE_RL_mb_tick_pulse_off_57 = mb_tick_pulse_57 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_57 = mb_tick_pulse_57 ;

  // rule RL_mb_metronome_counter_58
  assign CAN_FIRE_RL_mb_metronome_counter_58 = mb_tick_pulse_58 ;
  assign WILL_FIRE_RL_mb_metronome_counter_58 =
	     mb_tick_pulse_58 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_58
  assign CAN_FIRE_RL_mb_tick_pulse_off_58 = mb_tick_pulse_58 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_58 = mb_tick_pulse_58 ;

  // rule RL_mb_metronome_counter_59
  assign CAN_FIRE_RL_mb_metronome_counter_59 = mb_tick_pulse_59 ;
  assign WILL_FIRE_RL_mb_metronome_counter_59 =
	     mb_tick_pulse_59 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_59
  assign CAN_FIRE_RL_mb_tick_pulse_off_59 = mb_tick_pulse_59 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_59 = mb_tick_pulse_59 ;

  // rule RL_mb_metronome_counter_60
  assign CAN_FIRE_RL_mb_metronome_counter_60 = mb_tick_pulse_60 ;
  assign WILL_FIRE_RL_mb_metronome_counter_60 =
	     mb_tick_pulse_60 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_60
  assign CAN_FIRE_RL_mb_tick_pulse_off_60 = mb_tick_pulse_60 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_60 = mb_tick_pulse_60 ;

  // rule RL_mb_metronome_counter_61
  assign CAN_FIRE_RL_mb_metronome_counter_61 = mb_tick_pulse_61 ;
  assign WILL_FIRE_RL_mb_metronome_counter_61 =
	     mb_tick_pulse_61 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_61
  assign CAN_FIRE_RL_mb_tick_pulse_off_61 = mb_tick_pulse_61 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_61 = mb_tick_pulse_61 ;

  // rule RL_mb_metronome_counter_62
  assign CAN_FIRE_RL_mb_metronome_counter_62 = mb_tick_pulse_62 ;
  assign WILL_FIRE_RL_mb_metronome_counter_62 =
	     mb_tick_pulse_62 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_62
  assign CAN_FIRE_RL_mb_tick_pulse_off_62 = mb_tick_pulse_62 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_62 = mb_tick_pulse_62 ;

  // rule RL_mb_metronome_counter_63
  assign CAN_FIRE_RL_mb_metronome_counter_63 = mb_tick_pulse_63 ;
  assign WILL_FIRE_RL_mb_metronome_counter_63 =
	     mb_tick_pulse_63 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_63
  assign CAN_FIRE_RL_mb_tick_pulse_off_63 = mb_tick_pulse_63 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_63 = mb_tick_pulse_63 ;

  // rule RL_mb_metronome_counter_64
  assign CAN_FIRE_RL_mb_metronome_counter_64 = mb_tick_pulse_64 ;
  assign WILL_FIRE_RL_mb_metronome_counter_64 =
	     mb_tick_pulse_64 && !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_64
  assign CAN_FIRE_RL_mb_tick_pulse_off_64 = mb_tick_pulse_64 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_64 = mb_tick_pulse_64 ;

  // inputs to muxes for submodule ports
  assign MUX_bt_info$enq_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_start && sync_next ;
  assign MUX_mb_counter_1$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd1 ;
  assign MUX_mb_counter_10$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd10 ;
  assign MUX_mb_counter_11$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd11 ;
  assign MUX_mb_counter_12$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd12 ;
  assign MUX_mb_counter_13$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd13 ;
  assign MUX_mb_counter_14$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd14 ;
  assign MUX_mb_counter_15$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd15 ;
  assign MUX_mb_counter_16$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd16 ;
  assign MUX_mb_counter_17$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd17 ;
  assign MUX_mb_counter_18$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd18 ;
  assign MUX_mb_counter_19$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd19 ;
  assign MUX_mb_counter_2$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd2 ;
  assign MUX_mb_counter_20$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd20 ;
  assign MUX_mb_counter_21$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd21 ;
  assign MUX_mb_counter_22$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd22 ;
  assign MUX_mb_counter_23$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd23 ;
  assign MUX_mb_counter_24$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd24 ;
  assign MUX_mb_counter_25$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd25 ;
  assign MUX_mb_counter_26$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd26 ;
  assign MUX_mb_counter_27$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd27 ;
  assign MUX_mb_counter_28$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd28 ;
  assign MUX_mb_counter_29$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd29 ;
  assign MUX_mb_counter_3$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd3 ;
  assign MUX_mb_counter_30$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd30 ;
  assign MUX_mb_counter_31$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd31 ;
  assign MUX_mb_counter_32$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd32 ;
  assign MUX_mb_counter_33$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd33 ;
  assign MUX_mb_counter_34$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd34 ;
  assign MUX_mb_counter_35$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd35 ;
  assign MUX_mb_counter_36$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd36 ;
  assign MUX_mb_counter_37$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd37 ;
  assign MUX_mb_counter_38$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd38 ;
  assign MUX_mb_counter_39$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd39 ;
  assign MUX_mb_counter_4$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd4 ;
  assign MUX_mb_counter_40$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd40 ;
  assign MUX_mb_counter_41$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd41 ;
  assign MUX_mb_counter_42$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd42 ;
  assign MUX_mb_counter_43$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd43 ;
  assign MUX_mb_counter_44$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd44 ;
  assign MUX_mb_counter_45$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd45 ;
  assign MUX_mb_counter_46$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd46 ;
  assign MUX_mb_counter_47$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd47 ;
  assign MUX_mb_counter_48$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd48 ;
  assign MUX_mb_counter_49$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd49 ;
  assign MUX_mb_counter_5$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd5 ;
  assign MUX_mb_counter_50$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd50 ;
  assign MUX_mb_counter_51$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd51 ;
  assign MUX_mb_counter_52$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd52 ;
  assign MUX_mb_counter_53$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd53 ;
  assign MUX_mb_counter_54$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd54 ;
  assign MUX_mb_counter_55$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd55 ;
  assign MUX_mb_counter_56$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd56 ;
  assign MUX_mb_counter_57$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd57 ;
  assign MUX_mb_counter_58$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd58 ;
  assign MUX_mb_counter_59$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd59 ;
  assign MUX_mb_counter_6$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd6 ;
  assign MUX_mb_counter_60$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd60 ;
  assign MUX_mb_counter_61$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd61 ;
  assign MUX_mb_counter_62$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd62 ;
  assign MUX_mb_counter_63$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd63 ;
  assign MUX_mb_counter_64$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd64 ;
  assign MUX_mb_counter_7$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd7 ;
  assign MUX_mb_counter_8$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd8 ;
  assign MUX_mb_counter_9$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd9 ;
  assign MUX_mb_tick_pulse$write_1__SEL_1 =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ;
  assign MUX_bc_bc_sample_count$write_1__VAL_1 = bc_bc_sample_count + 10'd1 ;
  assign MUX_mb_counter$write_1__VAL_1 =
	     { mb_counter[21], mb_counter[21:1] } ;
  assign MUX_mb_counter$write_1__VAL_2 = mb_counter + 22'd115 ;
  assign MUX_mb_counter_1$write_1__VAL_1 =
	     { mb_counter_1[21], mb_counter_1[21:1] } ;
  assign MUX_mb_counter_1$write_1__VAL_2 = mb_counter_1 + 22'd116 ;
  assign MUX_mb_counter_10$write_1__VAL_1 =
	     { mb_counter_10[21], mb_counter_10[21:1] } ;
  assign MUX_mb_counter_10$write_1__VAL_2 = mb_counter_10 + 22'd129 ;
  assign MUX_mb_counter_11$write_1__VAL_1 =
	     { mb_counter_11[21], mb_counter_11[21:1] } ;
  assign MUX_mb_counter_11$write_1__VAL_2 = mb_counter_11 + 22'd130 ;
  assign MUX_mb_counter_12$write_1__VAL_1 =
	     { mb_counter_12[21], mb_counter_12[21:1] } ;
  assign MUX_mb_counter_12$write_1__VAL_2 = mb_counter_12 + 22'd132 ;
  assign MUX_mb_counter_13$write_1__VAL_1 =
	     { mb_counter_13[21], mb_counter_13[21:1] } ;
  assign MUX_mb_counter_13$write_1__VAL_2 = mb_counter_13 + 22'd133 ;
  assign MUX_mb_counter_14$write_1__VAL_1 =
	     { mb_counter_14[21], mb_counter_14[21:1] } ;
  assign MUX_mb_counter_14$write_1__VAL_2 = mb_counter_14 + 22'd135 ;
  assign MUX_mb_counter_15$write_1__VAL_1 =
	     { mb_counter_15[21], mb_counter_15[21:1] } ;
  assign MUX_mb_counter_15$write_1__VAL_2 = mb_counter_15 + 22'd136 ;
  assign MUX_mb_counter_16$write_1__VAL_1 =
	     { mb_counter_16[21], mb_counter_16[21:1] } ;
  assign MUX_mb_counter_16$write_1__VAL_2 = mb_counter_16 + 22'd137 ;
  assign MUX_mb_counter_17$write_1__VAL_1 =
	     { mb_counter_17[21], mb_counter_17[21:1] } ;
  assign MUX_mb_counter_17$write_1__VAL_2 = mb_counter_17 + 22'd139 ;
  assign MUX_mb_counter_18$write_1__VAL_1 =
	     { mb_counter_18[21], mb_counter_18[21:1] } ;
  assign MUX_mb_counter_18$write_1__VAL_2 = mb_counter_18 + 22'd140 ;
  assign MUX_mb_counter_19$write_1__VAL_1 =
	     { mb_counter_19[21], mb_counter_19[21:1] } ;
  assign MUX_mb_counter_19$write_1__VAL_2 = mb_counter_19 + 22'd142 ;
  assign MUX_mb_counter_2$write_1__VAL_1 =
	     { mb_counter_2[21], mb_counter_2[21:1] } ;
  assign MUX_mb_counter_2$write_1__VAL_2 = mb_counter_2 + 22'd117 ;
  assign MUX_mb_counter_20$write_1__VAL_1 =
	     { mb_counter_20[21], mb_counter_20[21:1] } ;
  assign MUX_mb_counter_20$write_1__VAL_2 = mb_counter_20 + 22'd143 ;
  assign MUX_mb_counter_21$write_1__VAL_1 =
	     { mb_counter_21[21], mb_counter_21[21:1] } ;
  assign MUX_mb_counter_21$write_1__VAL_2 = mb_counter_21 + 22'd145 ;
  assign MUX_mb_counter_22$write_1__VAL_1 =
	     { mb_counter_22[21], mb_counter_22[21:1] } ;
  assign MUX_mb_counter_22$write_1__VAL_2 = mb_counter_22 + 22'd146 ;
  assign MUX_mb_counter_23$write_1__VAL_1 =
	     { mb_counter_23[21], mb_counter_23[21:1] } ;
  assign MUX_mb_counter_23$write_1__VAL_2 = mb_counter_23 + 22'd147 ;
  assign MUX_mb_counter_24$write_1__VAL_1 =
	     { mb_counter_24[21], mb_counter_24[21:1] } ;
  assign MUX_mb_counter_24$write_1__VAL_2 = mb_counter_24 + 22'd149 ;
  assign MUX_mb_counter_25$write_1__VAL_1 =
	     { mb_counter_25[21], mb_counter_25[21:1] } ;
  assign MUX_mb_counter_25$write_1__VAL_2 = mb_counter_25 + 22'd150 ;
  assign MUX_mb_counter_26$write_1__VAL_1 =
	     { mb_counter_26[21], mb_counter_26[21:1] } ;
  assign MUX_mb_counter_26$write_1__VAL_2 = mb_counter_26 + 22'd152 ;
  assign MUX_mb_counter_27$write_1__VAL_1 =
	     { mb_counter_27[21], mb_counter_27[21:1] } ;
  assign MUX_mb_counter_27$write_1__VAL_2 = mb_counter_27 + 22'd153 ;
  assign MUX_mb_counter_28$write_1__VAL_1 =
	     { mb_counter_28[21], mb_counter_28[21:1] } ;
  assign MUX_mb_counter_28$write_1__VAL_2 = mb_counter_28 + 22'd155 ;
  assign MUX_mb_counter_29$write_1__VAL_1 =
	     { mb_counter_29[21], mb_counter_29[21:1] } ;
  assign MUX_mb_counter_29$write_1__VAL_2 = mb_counter_29 + 22'd156 ;
  assign MUX_mb_counter_3$write_1__VAL_1 =
	     { mb_counter_3[21], mb_counter_3[21:1] } ;
  assign MUX_mb_counter_3$write_1__VAL_2 = mb_counter_3 + 22'd119 ;
  assign MUX_mb_counter_30$write_1__VAL_1 =
	     { mb_counter_30[21], mb_counter_30[21:1] } ;
  assign MUX_mb_counter_30$write_1__VAL_2 = mb_counter_30 + 22'd157 ;
  assign MUX_mb_counter_31$write_1__VAL_1 =
	     { mb_counter_31[21], mb_counter_31[21:1] } ;
  assign MUX_mb_counter_31$write_1__VAL_2 = mb_counter_31 + 22'd159 ;
  assign MUX_mb_counter_32$write_1__VAL_1 =
	     { mb_counter_32[21], mb_counter_32[21:1] } ;
  assign MUX_mb_counter_32$write_1__VAL_2 = mb_counter_32 + 22'd160 ;
  assign MUX_mb_counter_33$write_1__VAL_1 =
	     { mb_counter_33[21], mb_counter_33[21:1] } ;
  assign MUX_mb_counter_33$write_1__VAL_2 = mb_counter_33 + 22'd162 ;
  assign MUX_mb_counter_34$write_1__VAL_1 =
	     { mb_counter_34[21], mb_counter_34[21:1] } ;
  assign MUX_mb_counter_34$write_1__VAL_2 = mb_counter_34 + 22'd163 ;
  assign MUX_mb_counter_35$write_1__VAL_1 =
	     { mb_counter_35[21], mb_counter_35[21:1] } ;
  assign MUX_mb_counter_35$write_1__VAL_2 = mb_counter_35 + 22'd165 ;
  assign MUX_mb_counter_36$write_1__VAL_1 =
	     { mb_counter_36[21], mb_counter_36[21:1] } ;
  assign MUX_mb_counter_36$write_1__VAL_2 = mb_counter_36 + 22'd166 ;
  assign MUX_mb_counter_37$write_1__VAL_1 =
	     { mb_counter_37[21], mb_counter_37[21:1] } ;
  assign MUX_mb_counter_37$write_1__VAL_2 = mb_counter_37 + 22'd168 ;
  assign MUX_mb_counter_38$write_1__VAL_1 =
	     { mb_counter_38[21], mb_counter_38[21:1] } ;
  assign MUX_mb_counter_38$write_1__VAL_2 = mb_counter_38 + 22'd169 ;
  assign MUX_mb_counter_39$write_1__VAL_1 =
	     { mb_counter_39[21], mb_counter_39[21:1] } ;
  assign MUX_mb_counter_39$write_1__VAL_2 = mb_counter_39 + 22'd170 ;
  assign MUX_mb_counter_4$write_1__VAL_1 =
	     { mb_counter_4[21], mb_counter_4[21:1] } ;
  assign MUX_mb_counter_4$write_1__VAL_2 = mb_counter_4 + 22'd120 ;
  assign MUX_mb_counter_40$write_1__VAL_1 =
	     { mb_counter_40[21], mb_counter_40[21:1] } ;
  assign MUX_mb_counter_40$write_1__VAL_2 = mb_counter_40 + 22'd172 ;
  assign MUX_mb_counter_41$write_1__VAL_1 =
	     { mb_counter_41[21], mb_counter_41[21:1] } ;
  assign MUX_mb_counter_41$write_1__VAL_2 = mb_counter_41 + 22'd173 ;
  assign MUX_mb_counter_42$write_1__VAL_1 =
	     { mb_counter_42[21], mb_counter_42[21:1] } ;
  assign MUX_mb_counter_42$write_1__VAL_2 = mb_counter_42 + 22'd175 ;
  assign MUX_mb_counter_43$write_1__VAL_1 =
	     { mb_counter_43[21], mb_counter_43[21:1] } ;
  assign MUX_mb_counter_43$write_1__VAL_2 = mb_counter_43 + 22'd176 ;
  assign MUX_mb_counter_44$write_1__VAL_1 =
	     { mb_counter_44[21], mb_counter_44[21:1] } ;
  assign MUX_mb_counter_44$write_1__VAL_2 = mb_counter_44 + 22'd178 ;
  assign MUX_mb_counter_45$write_1__VAL_1 =
	     { mb_counter_45[21], mb_counter_45[21:1] } ;
  assign MUX_mb_counter_45$write_1__VAL_2 = mb_counter_45 + 22'd179 ;
  assign MUX_mb_counter_46$write_1__VAL_1 =
	     { mb_counter_46[21], mb_counter_46[21:1] } ;
  assign MUX_mb_counter_46$write_1__VAL_2 = mb_counter_46 + 22'd180 ;
  assign MUX_mb_counter_47$write_1__VAL_1 =
	     { mb_counter_47[21], mb_counter_47[21:1] } ;
  assign MUX_mb_counter_47$write_1__VAL_2 = mb_counter_47 + 22'd182 ;
  assign MUX_mb_counter_48$write_1__VAL_1 =
	     { mb_counter_48[21], mb_counter_48[21:1] } ;
  assign MUX_mb_counter_48$write_1__VAL_2 = mb_counter_48 + 22'd183 ;
  assign MUX_mb_counter_49$write_1__VAL_1 =
	     { mb_counter_49[21], mb_counter_49[21:1] } ;
  assign MUX_mb_counter_49$write_1__VAL_2 = mb_counter_49 + 22'd185 ;
  assign MUX_mb_counter_5$write_1__VAL_1 =
	     { mb_counter_5[21], mb_counter_5[21:1] } ;
  assign MUX_mb_counter_5$write_1__VAL_2 = mb_counter_5 + 22'd122 ;
  assign MUX_mb_counter_50$write_1__VAL_1 =
	     { mb_counter_50[21], mb_counter_50[21:1] } ;
  assign MUX_mb_counter_50$write_1__VAL_2 = mb_counter_50 + 22'd186 ;
  assign MUX_mb_counter_51$write_1__VAL_1 =
	     { mb_counter_51[21], mb_counter_51[21:1] } ;
  assign MUX_mb_counter_51$write_1__VAL_2 = mb_counter_51 + 22'd188 ;
  assign MUX_mb_counter_52$write_1__VAL_1 =
	     { mb_counter_52[21], mb_counter_52[21:1] } ;
  assign MUX_mb_counter_52$write_1__VAL_2 = mb_counter_52 + 22'd189 ;
  assign MUX_mb_counter_53$write_1__VAL_1 =
	     { mb_counter_53[21], mb_counter_53[21:1] } ;
  assign MUX_mb_counter_53$write_1__VAL_2 = mb_counter_53 + 22'd190 ;
  assign MUX_mb_counter_54$write_1__VAL_1 =
	     { mb_counter_54[21], mb_counter_54[21:1] } ;
  assign MUX_mb_counter_54$write_1__VAL_2 = mb_counter_54 + 22'd192 ;
  assign MUX_mb_counter_55$write_1__VAL_1 =
	     { mb_counter_55[21], mb_counter_55[21:1] } ;
  assign MUX_mb_counter_55$write_1__VAL_2 = mb_counter_55 + 22'd193 ;
  assign MUX_mb_counter_56$write_1__VAL_1 =
	     { mb_counter_56[21], mb_counter_56[21:1] } ;
  assign MUX_mb_counter_56$write_1__VAL_2 = mb_counter_56 + 22'd195 ;
  assign MUX_mb_counter_57$write_1__VAL_1 =
	     { mb_counter_57[21], mb_counter_57[21:1] } ;
  assign MUX_mb_counter_57$write_1__VAL_2 = mb_counter_57 + 22'd196 ;
  assign MUX_mb_counter_58$write_1__VAL_1 =
	     { mb_counter_58[21], mb_counter_58[21:1] } ;
  assign MUX_mb_counter_58$write_1__VAL_2 = mb_counter_58 + 22'd198 ;
  assign MUX_mb_counter_59$write_1__VAL_1 =
	     { mb_counter_59[21], mb_counter_59[21:1] } ;
  assign MUX_mb_counter_59$write_1__VAL_2 = mb_counter_59 + 22'd199 ;
  assign MUX_mb_counter_6$write_1__VAL_1 =
	     { mb_counter_6[21], mb_counter_6[21:1] } ;
  assign MUX_mb_counter_6$write_1__VAL_2 = mb_counter_6 + 22'd123 ;
  assign MUX_mb_counter_60$write_1__VAL_1 =
	     { mb_counter_60[21], mb_counter_60[21:1] } ;
  assign MUX_mb_counter_60$write_1__VAL_2 = mb_counter_60 + 22'd200 ;
  assign MUX_mb_counter_61$write_1__VAL_1 =
	     { mb_counter_61[21], mb_counter_61[21:1] } ;
  assign MUX_mb_counter_61$write_1__VAL_2 = mb_counter_61 + 22'd202 ;
  assign MUX_mb_counter_62$write_1__VAL_1 =
	     { mb_counter_62[21], mb_counter_62[21:1] } ;
  assign MUX_mb_counter_62$write_1__VAL_2 = mb_counter_62 + 22'd203 ;
  assign MUX_mb_counter_63$write_1__VAL_1 =
	     { mb_counter_63[21], mb_counter_63[21:1] } ;
  assign MUX_mb_counter_63$write_1__VAL_2 = mb_counter_63 + 22'd205 ;
  assign MUX_mb_counter_64$write_1__VAL_1 =
	     { mb_counter_64[21], mb_counter_64[21:1] } ;
  assign MUX_mb_counter_64$write_1__VAL_2 = mb_counter_64 + 22'd206 ;
  assign MUX_mb_counter_7$write_1__VAL_1 =
	     { mb_counter_7[21], mb_counter_7[21:1] } ;
  assign MUX_mb_counter_7$write_1__VAL_2 = mb_counter_7 + 22'd125 ;
  assign MUX_mb_counter_8$write_1__VAL_1 =
	     { mb_counter_8[21], mb_counter_8[21:1] } ;
  assign MUX_mb_counter_8$write_1__VAL_2 = mb_counter_8 + 22'd126 ;
  assign MUX_mb_counter_9$write_1__VAL_1 =
	     { mb_counter_9[21], mb_counter_9[21:1] } ;
  assign MUX_mb_counter_9$write_1__VAL_2 = mb_counter_9 + 22'd127 ;
  assign MUX_mb_out_count$write_1__VAL_1 =
	     (mb_out_count == 7'd64) ? 7'd0 : mb_out_count + 7'd1 ;

  // register bc_bc_avg_energy
  assign bc_bc_avg_energy$D_IN =
	     (bc_bc_avg_energy - (bc_bc_energy_buf >> 6)) +
	     (bc_bc_cur_energy >> 6) ;
  assign bc_bc_avg_energy$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_cur_energy
  assign bc_bc_cur_energy$D_IN =
	     bc_bc_cur_energy +
	     ((IF_bc_bc_infifo_first_BIT_27_THEN_NEG_bc_bc_in_ETC___d13 >>
	       1) +
	      (IF_bc_bc_infifo_first_BIT_13_5_THEN_NEG_bc_bc__ETC___d20 >>
	       1) >>
	      10) ;
  assign bc_bc_cur_energy$EN = CAN_FIRE_RL_bc_bc_inject_sample ;

  // register bc_bc_energy_buf
  assign bc_bc_energy_buf$D_IN = bc_bc_energy_buf_1 ;
  assign bc_bc_energy_buf$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_1
  assign bc_bc_energy_buf_1$D_IN = bc_bc_energy_buf_2 ;
  assign bc_bc_energy_buf_1$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_10
  assign bc_bc_energy_buf_10$D_IN = bc_bc_energy_buf_11 ;
  assign bc_bc_energy_buf_10$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_11
  assign bc_bc_energy_buf_11$D_IN = bc_bc_energy_buf_12 ;
  assign bc_bc_energy_buf_11$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_12
  assign bc_bc_energy_buf_12$D_IN = bc_bc_energy_buf_13 ;
  assign bc_bc_energy_buf_12$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_13
  assign bc_bc_energy_buf_13$D_IN = bc_bc_energy_buf_14 ;
  assign bc_bc_energy_buf_13$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_14
  assign bc_bc_energy_buf_14$D_IN = bc_bc_energy_buf_15 ;
  assign bc_bc_energy_buf_14$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_15
  assign bc_bc_energy_buf_15$D_IN = bc_bc_energy_buf_16 ;
  assign bc_bc_energy_buf_15$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_16
  assign bc_bc_energy_buf_16$D_IN = bc_bc_energy_buf_17 ;
  assign bc_bc_energy_buf_16$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_17
  assign bc_bc_energy_buf_17$D_IN = bc_bc_energy_buf_18 ;
  assign bc_bc_energy_buf_17$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_18
  assign bc_bc_energy_buf_18$D_IN = bc_bc_energy_buf_19 ;
  assign bc_bc_energy_buf_18$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_19
  assign bc_bc_energy_buf_19$D_IN = bc_bc_energy_buf_20 ;
  assign bc_bc_energy_buf_19$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_2
  assign bc_bc_energy_buf_2$D_IN = bc_bc_energy_buf_3 ;
  assign bc_bc_energy_buf_2$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_20
  assign bc_bc_energy_buf_20$D_IN = bc_bc_energy_buf_21 ;
  assign bc_bc_energy_buf_20$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_21
  assign bc_bc_energy_buf_21$D_IN = bc_bc_energy_buf_22 ;
  assign bc_bc_energy_buf_21$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_22
  assign bc_bc_energy_buf_22$D_IN = bc_bc_energy_buf_23 ;
  assign bc_bc_energy_buf_22$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_23
  assign bc_bc_energy_buf_23$D_IN = bc_bc_energy_buf_24 ;
  assign bc_bc_energy_buf_23$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_24
  assign bc_bc_energy_buf_24$D_IN = bc_bc_energy_buf_25 ;
  assign bc_bc_energy_buf_24$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_25
  assign bc_bc_energy_buf_25$D_IN = bc_bc_energy_buf_26 ;
  assign bc_bc_energy_buf_25$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_26
  assign bc_bc_energy_buf_26$D_IN = bc_bc_energy_buf_27 ;
  assign bc_bc_energy_buf_26$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_27
  assign bc_bc_energy_buf_27$D_IN = bc_bc_energy_buf_28 ;
  assign bc_bc_energy_buf_27$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_28
  assign bc_bc_energy_buf_28$D_IN = bc_bc_energy_buf_29 ;
  assign bc_bc_energy_buf_28$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_29
  assign bc_bc_energy_buf_29$D_IN = bc_bc_energy_buf_30 ;
  assign bc_bc_energy_buf_29$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_3
  assign bc_bc_energy_buf_3$D_IN = bc_bc_energy_buf_4 ;
  assign bc_bc_energy_buf_3$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_30
  assign bc_bc_energy_buf_30$D_IN = bc_bc_energy_buf_31 ;
  assign bc_bc_energy_buf_30$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_31
  assign bc_bc_energy_buf_31$D_IN = bc_bc_energy_buf_32 ;
  assign bc_bc_energy_buf_31$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_32
  assign bc_bc_energy_buf_32$D_IN = bc_bc_energy_buf_33 ;
  assign bc_bc_energy_buf_32$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_33
  assign bc_bc_energy_buf_33$D_IN = bc_bc_energy_buf_34 ;
  assign bc_bc_energy_buf_33$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_34
  assign bc_bc_energy_buf_34$D_IN = bc_bc_energy_buf_35 ;
  assign bc_bc_energy_buf_34$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_35
  assign bc_bc_energy_buf_35$D_IN = bc_bc_energy_buf_36 ;
  assign bc_bc_energy_buf_35$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_36
  assign bc_bc_energy_buf_36$D_IN = bc_bc_energy_buf_37 ;
  assign bc_bc_energy_buf_36$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_37
  assign bc_bc_energy_buf_37$D_IN = bc_bc_energy_buf_38 ;
  assign bc_bc_energy_buf_37$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_38
  assign bc_bc_energy_buf_38$D_IN = bc_bc_energy_buf_39 ;
  assign bc_bc_energy_buf_38$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_39
  assign bc_bc_energy_buf_39$D_IN = bc_bc_energy_buf_40 ;
  assign bc_bc_energy_buf_39$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_4
  assign bc_bc_energy_buf_4$D_IN = bc_bc_energy_buf_5 ;
  assign bc_bc_energy_buf_4$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_40
  assign bc_bc_energy_buf_40$D_IN = bc_bc_energy_buf_41 ;
  assign bc_bc_energy_buf_40$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_41
  assign bc_bc_energy_buf_41$D_IN = bc_bc_energy_buf_42 ;
  assign bc_bc_energy_buf_41$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_42
  assign bc_bc_energy_buf_42$D_IN = bc_bc_energy_buf_43 ;
  assign bc_bc_energy_buf_42$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_43
  assign bc_bc_energy_buf_43$D_IN = bc_bc_energy_buf_44 ;
  assign bc_bc_energy_buf_43$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_44
  assign bc_bc_energy_buf_44$D_IN = bc_bc_energy_buf_45 ;
  assign bc_bc_energy_buf_44$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_45
  assign bc_bc_energy_buf_45$D_IN = bc_bc_energy_buf_46 ;
  assign bc_bc_energy_buf_45$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_46
  assign bc_bc_energy_buf_46$D_IN = bc_bc_energy_buf_47 ;
  assign bc_bc_energy_buf_46$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_47
  assign bc_bc_energy_buf_47$D_IN = bc_bc_energy_buf_48 ;
  assign bc_bc_energy_buf_47$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_48
  assign bc_bc_energy_buf_48$D_IN = bc_bc_energy_buf_49 ;
  assign bc_bc_energy_buf_48$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_49
  assign bc_bc_energy_buf_49$D_IN = bc_bc_energy_buf_50 ;
  assign bc_bc_energy_buf_49$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_5
  assign bc_bc_energy_buf_5$D_IN = bc_bc_energy_buf_6 ;
  assign bc_bc_energy_buf_5$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_50
  assign bc_bc_energy_buf_50$D_IN = bc_bc_energy_buf_51 ;
  assign bc_bc_energy_buf_50$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_51
  assign bc_bc_energy_buf_51$D_IN = bc_bc_energy_buf_52 ;
  assign bc_bc_energy_buf_51$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_52
  assign bc_bc_energy_buf_52$D_IN = bc_bc_energy_buf_53 ;
  assign bc_bc_energy_buf_52$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_53
  assign bc_bc_energy_buf_53$D_IN = bc_bc_energy_buf_54 ;
  assign bc_bc_energy_buf_53$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_54
  assign bc_bc_energy_buf_54$D_IN = bc_bc_energy_buf_55 ;
  assign bc_bc_energy_buf_54$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_55
  assign bc_bc_energy_buf_55$D_IN = bc_bc_energy_buf_56 ;
  assign bc_bc_energy_buf_55$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_56
  assign bc_bc_energy_buf_56$D_IN = bc_bc_energy_buf_57 ;
  assign bc_bc_energy_buf_56$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_57
  assign bc_bc_energy_buf_57$D_IN = bc_bc_energy_buf_58 ;
  assign bc_bc_energy_buf_57$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_58
  assign bc_bc_energy_buf_58$D_IN = bc_bc_energy_buf_59 ;
  assign bc_bc_energy_buf_58$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_59
  assign bc_bc_energy_buf_59$D_IN = bc_bc_energy_buf_60 ;
  assign bc_bc_energy_buf_59$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_6
  assign bc_bc_energy_buf_6$D_IN = bc_bc_energy_buf_7 ;
  assign bc_bc_energy_buf_6$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_60
  assign bc_bc_energy_buf_60$D_IN = bc_bc_energy_buf_61 ;
  assign bc_bc_energy_buf_60$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_61
  assign bc_bc_energy_buf_61$D_IN = bc_bc_energy_buf_62 ;
  assign bc_bc_energy_buf_61$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_62
  assign bc_bc_energy_buf_62$D_IN = bc_bc_energy_buf_63 ;
  assign bc_bc_energy_buf_62$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_63
  assign bc_bc_energy_buf_63$D_IN = bc_bc_cur_energy ;
  assign bc_bc_energy_buf_63$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_7
  assign bc_bc_energy_buf_7$D_IN = bc_bc_energy_buf_8 ;
  assign bc_bc_energy_buf_7$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_8
  assign bc_bc_energy_buf_8$D_IN = bc_bc_energy_buf_9 ;
  assign bc_bc_energy_buf_8$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_buf_9
  assign bc_bc_energy_buf_9$D_IN = bc_bc_energy_buf_10 ;
  assign bc_bc_energy_buf_9$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_energy_stage
  always@(WILL_FIRE_RL_bc_bc_energy_calc_4 or
	  WILL_FIRE_RL_bc_bc_energy_calc_in or
	  WILL_FIRE_RL_bc_bc_energy_calc_1 or
	  WILL_FIRE_RL_bc_bc_energy_calc_2 or
	  WILL_FIRE_RL_bc_bc_energy_calc_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_bc_bc_energy_calc_4: bc_bc_energy_stage$D_IN = 4'd0;
      WILL_FIRE_RL_bc_bc_energy_calc_in: bc_bc_energy_stage$D_IN = 4'd1;
      WILL_FIRE_RL_bc_bc_energy_calc_1: bc_bc_energy_stage$D_IN = 4'd2;
      WILL_FIRE_RL_bc_bc_energy_calc_2: bc_bc_energy_stage$D_IN = 4'd3;
      WILL_FIRE_RL_bc_bc_energy_calc_3: bc_bc_energy_stage$D_IN = 4'd4;
      default: bc_bc_energy_stage$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign bc_bc_energy_stage$EN =
	     WILL_FIRE_RL_bc_bc_energy_calc_4 ||
	     WILL_FIRE_RL_bc_bc_energy_calc_in ||
	     WILL_FIRE_RL_bc_bc_energy_calc_1 ||
	     WILL_FIRE_RL_bc_bc_energy_calc_2 ||
	     WILL_FIRE_RL_bc_bc_energy_calc_3 ;

  // register bc_bc_fp_lin_a
  assign bc_bc_fp_lin_a$D_IN =
	     (!x__h24206[173] &&
	      (x__h24206[94] || x__h24206[173:95] != 79'd0)) ?
	       95'h3FFFFFFFFFFFFFFFFFFFFFFF :
	       ((x__h24206[173] &&
		 (!x__h24206[94] || ~x__h24206[173:95] != 79'd0)) ?
		  95'h400000000000000000000000 :
		  x__h24206[94:0]) ;
  assign bc_bc_fp_lin_a$EN = CAN_FIRE_RL_bc_bc_energy_calc_3 ;

  // register bc_bc_fp_lin_b
  assign bc_bc_fp_lin_b$D_IN =
	     (!IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[173] &&
	      (IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[94] ||
	       IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[173:95] !=
	       79'd0)) ?
	       95'h3FFFFFFFFFFFFFFFFFFFFFFF :
	       ((IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[173] &&
		 (!IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[94] ||
		  ~IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[173:95] !=
		  79'd0)) ?
		  95'h400000000000000000000000 :
		  IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196[94:0]) ;
  assign bc_bc_fp_lin_b$EN = CAN_FIRE_RL_bc_bc_energy_calc_3 ;

  // register bc_bc_lin_b
  assign bc_bc_lin_b$D_IN = bc_bc_variance * bc_bc_avg_energy ;
  assign bc_bc_lin_b$EN = CAN_FIRE_RL_bc_bc_energy_calc_2 ;

  // register bc_bc_sample_count
  assign bc_bc_sample_count$D_IN =
	     WILL_FIRE_RL_bc_bc_inject_sample ?
	       MUX_bc_bc_sample_count$write_1__VAL_1 :
	       10'd0 ;
  assign bc_bc_sample_count$EN =
	     WILL_FIRE_RL_bc_bc_inject_sample ||
	     WILL_FIRE_RL_bc_bc_energy_calc_4 ;

  // register bc_bc_sqr_energy
  assign bc_bc_sqr_energy$D_IN =
	     (bc_bc_sqr_energy - (bc_bc_square_buf >> 6)) +
	     (bc_bc_cur_energy_MUL_bc_bc_cur_energy___d1060 >> 6) ;
  assign bc_bc_sqr_energy$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf
  assign bc_bc_square_buf$D_IN = bc_bc_square_buf_1 ;
  assign bc_bc_square_buf$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_1
  assign bc_bc_square_buf_1$D_IN = bc_bc_square_buf_2 ;
  assign bc_bc_square_buf_1$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_10
  assign bc_bc_square_buf_10$D_IN = bc_bc_square_buf_11 ;
  assign bc_bc_square_buf_10$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_11
  assign bc_bc_square_buf_11$D_IN = bc_bc_square_buf_12 ;
  assign bc_bc_square_buf_11$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_12
  assign bc_bc_square_buf_12$D_IN = bc_bc_square_buf_13 ;
  assign bc_bc_square_buf_12$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_13
  assign bc_bc_square_buf_13$D_IN = bc_bc_square_buf_14 ;
  assign bc_bc_square_buf_13$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_14
  assign bc_bc_square_buf_14$D_IN = bc_bc_square_buf_15 ;
  assign bc_bc_square_buf_14$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_15
  assign bc_bc_square_buf_15$D_IN = bc_bc_square_buf_16 ;
  assign bc_bc_square_buf_15$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_16
  assign bc_bc_square_buf_16$D_IN = bc_bc_square_buf_17 ;
  assign bc_bc_square_buf_16$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_17
  assign bc_bc_square_buf_17$D_IN = bc_bc_square_buf_18 ;
  assign bc_bc_square_buf_17$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_18
  assign bc_bc_square_buf_18$D_IN = bc_bc_square_buf_19 ;
  assign bc_bc_square_buf_18$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_19
  assign bc_bc_square_buf_19$D_IN = bc_bc_square_buf_20 ;
  assign bc_bc_square_buf_19$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_2
  assign bc_bc_square_buf_2$D_IN = bc_bc_square_buf_3 ;
  assign bc_bc_square_buf_2$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_20
  assign bc_bc_square_buf_20$D_IN = bc_bc_square_buf_21 ;
  assign bc_bc_square_buf_20$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_21
  assign bc_bc_square_buf_21$D_IN = bc_bc_square_buf_22 ;
  assign bc_bc_square_buf_21$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_22
  assign bc_bc_square_buf_22$D_IN = bc_bc_square_buf_23 ;
  assign bc_bc_square_buf_22$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_23
  assign bc_bc_square_buf_23$D_IN = bc_bc_square_buf_24 ;
  assign bc_bc_square_buf_23$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_24
  assign bc_bc_square_buf_24$D_IN = bc_bc_square_buf_25 ;
  assign bc_bc_square_buf_24$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_25
  assign bc_bc_square_buf_25$D_IN = bc_bc_square_buf_26 ;
  assign bc_bc_square_buf_25$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_26
  assign bc_bc_square_buf_26$D_IN = bc_bc_square_buf_27 ;
  assign bc_bc_square_buf_26$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_27
  assign bc_bc_square_buf_27$D_IN = bc_bc_square_buf_28 ;
  assign bc_bc_square_buf_27$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_28
  assign bc_bc_square_buf_28$D_IN = bc_bc_square_buf_29 ;
  assign bc_bc_square_buf_28$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_29
  assign bc_bc_square_buf_29$D_IN = bc_bc_square_buf_30 ;
  assign bc_bc_square_buf_29$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_3
  assign bc_bc_square_buf_3$D_IN = bc_bc_square_buf_4 ;
  assign bc_bc_square_buf_3$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_30
  assign bc_bc_square_buf_30$D_IN = bc_bc_square_buf_31 ;
  assign bc_bc_square_buf_30$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_31
  assign bc_bc_square_buf_31$D_IN = bc_bc_square_buf_32 ;
  assign bc_bc_square_buf_31$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_32
  assign bc_bc_square_buf_32$D_IN = bc_bc_square_buf_33 ;
  assign bc_bc_square_buf_32$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_33
  assign bc_bc_square_buf_33$D_IN = bc_bc_square_buf_34 ;
  assign bc_bc_square_buf_33$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_34
  assign bc_bc_square_buf_34$D_IN = bc_bc_square_buf_35 ;
  assign bc_bc_square_buf_34$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_35
  assign bc_bc_square_buf_35$D_IN = bc_bc_square_buf_36 ;
  assign bc_bc_square_buf_35$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_36
  assign bc_bc_square_buf_36$D_IN = bc_bc_square_buf_37 ;
  assign bc_bc_square_buf_36$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_37
  assign bc_bc_square_buf_37$D_IN = bc_bc_square_buf_38 ;
  assign bc_bc_square_buf_37$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_38
  assign bc_bc_square_buf_38$D_IN = bc_bc_square_buf_39 ;
  assign bc_bc_square_buf_38$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_39
  assign bc_bc_square_buf_39$D_IN = bc_bc_square_buf_40 ;
  assign bc_bc_square_buf_39$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_4
  assign bc_bc_square_buf_4$D_IN = bc_bc_square_buf_5 ;
  assign bc_bc_square_buf_4$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_40
  assign bc_bc_square_buf_40$D_IN = bc_bc_square_buf_41 ;
  assign bc_bc_square_buf_40$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_41
  assign bc_bc_square_buf_41$D_IN = bc_bc_square_buf_42 ;
  assign bc_bc_square_buf_41$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_42
  assign bc_bc_square_buf_42$D_IN = bc_bc_square_buf_43 ;
  assign bc_bc_square_buf_42$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_43
  assign bc_bc_square_buf_43$D_IN = bc_bc_square_buf_44 ;
  assign bc_bc_square_buf_43$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_44
  assign bc_bc_square_buf_44$D_IN = bc_bc_square_buf_45 ;
  assign bc_bc_square_buf_44$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_45
  assign bc_bc_square_buf_45$D_IN = bc_bc_square_buf_46 ;
  assign bc_bc_square_buf_45$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_46
  assign bc_bc_square_buf_46$D_IN = bc_bc_square_buf_47 ;
  assign bc_bc_square_buf_46$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_47
  assign bc_bc_square_buf_47$D_IN = bc_bc_square_buf_48 ;
  assign bc_bc_square_buf_47$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_48
  assign bc_bc_square_buf_48$D_IN = bc_bc_square_buf_49 ;
  assign bc_bc_square_buf_48$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_49
  assign bc_bc_square_buf_49$D_IN = bc_bc_square_buf_50 ;
  assign bc_bc_square_buf_49$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_5
  assign bc_bc_square_buf_5$D_IN = bc_bc_square_buf_6 ;
  assign bc_bc_square_buf_5$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_50
  assign bc_bc_square_buf_50$D_IN = bc_bc_square_buf_51 ;
  assign bc_bc_square_buf_50$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_51
  assign bc_bc_square_buf_51$D_IN = bc_bc_square_buf_52 ;
  assign bc_bc_square_buf_51$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_52
  assign bc_bc_square_buf_52$D_IN = bc_bc_square_buf_53 ;
  assign bc_bc_square_buf_52$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_53
  assign bc_bc_square_buf_53$D_IN = bc_bc_square_buf_54 ;
  assign bc_bc_square_buf_53$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_54
  assign bc_bc_square_buf_54$D_IN = bc_bc_square_buf_55 ;
  assign bc_bc_square_buf_54$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_55
  assign bc_bc_square_buf_55$D_IN = bc_bc_square_buf_56 ;
  assign bc_bc_square_buf_55$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_56
  assign bc_bc_square_buf_56$D_IN = bc_bc_square_buf_57 ;
  assign bc_bc_square_buf_56$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_57
  assign bc_bc_square_buf_57$D_IN = bc_bc_square_buf_58 ;
  assign bc_bc_square_buf_57$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_58
  assign bc_bc_square_buf_58$D_IN = bc_bc_square_buf_59 ;
  assign bc_bc_square_buf_58$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_59
  assign bc_bc_square_buf_59$D_IN = bc_bc_square_buf_60 ;
  assign bc_bc_square_buf_59$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_6
  assign bc_bc_square_buf_6$D_IN = bc_bc_square_buf_7 ;
  assign bc_bc_square_buf_6$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_60
  assign bc_bc_square_buf_60$D_IN = bc_bc_square_buf_61 ;
  assign bc_bc_square_buf_60$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_61
  assign bc_bc_square_buf_61$D_IN = bc_bc_square_buf_62 ;
  assign bc_bc_square_buf_61$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_62
  assign bc_bc_square_buf_62$D_IN = bc_bc_square_buf_63 ;
  assign bc_bc_square_buf_62$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_63
  assign bc_bc_square_buf_63$D_IN =
	     bc_bc_cur_energy_MUL_bc_bc_cur_energy___d1060 ;
  assign bc_bc_square_buf_63$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_7
  assign bc_bc_square_buf_7$D_IN = bc_bc_square_buf_8 ;
  assign bc_bc_square_buf_7$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_8
  assign bc_bc_square_buf_8$D_IN = bc_bc_square_buf_9 ;
  assign bc_bc_square_buf_8$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_square_buf_9
  assign bc_bc_square_buf_9$D_IN = bc_bc_square_buf_10 ;
  assign bc_bc_square_buf_9$EN = CAN_FIRE_RL_bc_bc_energy_calc_in ;

  // register bc_bc_variance
  assign bc_bc_variance$D_IN =
	     bc_bc_sqr_energy -
	     bc_bc_avg_energy_9_MUL_bc_bc_avg_energy_9___d169 ;
  assign bc_bc_variance$EN = CAN_FIRE_RL_bc_bc_energy_calc_1 ;

  // register beat_guess
  assign beat_guess$D_IN = bc_bc_outfifo$D_OUT ;
  assign beat_guess$EN = WILL_FIRE_RL_beat_injector_start ;

  // register mb_counter
  assign mb_counter$D_IN =
	     WILL_FIRE_RL_beat_injector_start ?
	       MUX_mb_counter$write_1__VAL_1 :
	       MUX_mb_counter$write_1__VAL_2 ;
  assign mb_counter$EN =
	     WILL_FIRE_RL_beat_injector_start ||
	     WILL_FIRE_RL_mb_metronome_counter ;

  // register mb_counter_1
  assign mb_counter_1$D_IN =
	     MUX_mb_counter_1$write_1__SEL_1 ?
	       MUX_mb_counter_1$write_1__VAL_1 :
	       MUX_mb_counter_1$write_1__VAL_2 ;
  assign mb_counter_1$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd1 ||
	     WILL_FIRE_RL_mb_metronome_counter_1 ;

  // register mb_counter_10
  assign mb_counter_10$D_IN =
	     MUX_mb_counter_10$write_1__SEL_1 ?
	       MUX_mb_counter_10$write_1__VAL_1 :
	       MUX_mb_counter_10$write_1__VAL_2 ;
  assign mb_counter_10$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd10 ||
	     WILL_FIRE_RL_mb_metronome_counter_10 ;

  // register mb_counter_11
  assign mb_counter_11$D_IN =
	     MUX_mb_counter_11$write_1__SEL_1 ?
	       MUX_mb_counter_11$write_1__VAL_1 :
	       MUX_mb_counter_11$write_1__VAL_2 ;
  assign mb_counter_11$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd11 ||
	     WILL_FIRE_RL_mb_metronome_counter_11 ;

  // register mb_counter_12
  assign mb_counter_12$D_IN =
	     MUX_mb_counter_12$write_1__SEL_1 ?
	       MUX_mb_counter_12$write_1__VAL_1 :
	       MUX_mb_counter_12$write_1__VAL_2 ;
  assign mb_counter_12$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd12 ||
	     WILL_FIRE_RL_mb_metronome_counter_12 ;

  // register mb_counter_13
  assign mb_counter_13$D_IN =
	     MUX_mb_counter_13$write_1__SEL_1 ?
	       MUX_mb_counter_13$write_1__VAL_1 :
	       MUX_mb_counter_13$write_1__VAL_2 ;
  assign mb_counter_13$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd13 ||
	     WILL_FIRE_RL_mb_metronome_counter_13 ;

  // register mb_counter_14
  assign mb_counter_14$D_IN =
	     MUX_mb_counter_14$write_1__SEL_1 ?
	       MUX_mb_counter_14$write_1__VAL_1 :
	       MUX_mb_counter_14$write_1__VAL_2 ;
  assign mb_counter_14$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd14 ||
	     WILL_FIRE_RL_mb_metronome_counter_14 ;

  // register mb_counter_15
  assign mb_counter_15$D_IN =
	     MUX_mb_counter_15$write_1__SEL_1 ?
	       MUX_mb_counter_15$write_1__VAL_1 :
	       MUX_mb_counter_15$write_1__VAL_2 ;
  assign mb_counter_15$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd15 ||
	     WILL_FIRE_RL_mb_metronome_counter_15 ;

  // register mb_counter_16
  assign mb_counter_16$D_IN =
	     MUX_mb_counter_16$write_1__SEL_1 ?
	       MUX_mb_counter_16$write_1__VAL_1 :
	       MUX_mb_counter_16$write_1__VAL_2 ;
  assign mb_counter_16$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd16 ||
	     WILL_FIRE_RL_mb_metronome_counter_16 ;

  // register mb_counter_17
  assign mb_counter_17$D_IN =
	     MUX_mb_counter_17$write_1__SEL_1 ?
	       MUX_mb_counter_17$write_1__VAL_1 :
	       MUX_mb_counter_17$write_1__VAL_2 ;
  assign mb_counter_17$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd17 ||
	     WILL_FIRE_RL_mb_metronome_counter_17 ;

  // register mb_counter_18
  assign mb_counter_18$D_IN =
	     MUX_mb_counter_18$write_1__SEL_1 ?
	       MUX_mb_counter_18$write_1__VAL_1 :
	       MUX_mb_counter_18$write_1__VAL_2 ;
  assign mb_counter_18$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd18 ||
	     WILL_FIRE_RL_mb_metronome_counter_18 ;

  // register mb_counter_19
  assign mb_counter_19$D_IN =
	     MUX_mb_counter_19$write_1__SEL_1 ?
	       MUX_mb_counter_19$write_1__VAL_1 :
	       MUX_mb_counter_19$write_1__VAL_2 ;
  assign mb_counter_19$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd19 ||
	     WILL_FIRE_RL_mb_metronome_counter_19 ;

  // register mb_counter_2
  assign mb_counter_2$D_IN =
	     MUX_mb_counter_2$write_1__SEL_1 ?
	       MUX_mb_counter_2$write_1__VAL_1 :
	       MUX_mb_counter_2$write_1__VAL_2 ;
  assign mb_counter_2$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd2 ||
	     WILL_FIRE_RL_mb_metronome_counter_2 ;

  // register mb_counter_20
  assign mb_counter_20$D_IN =
	     MUX_mb_counter_20$write_1__SEL_1 ?
	       MUX_mb_counter_20$write_1__VAL_1 :
	       MUX_mb_counter_20$write_1__VAL_2 ;
  assign mb_counter_20$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd20 ||
	     WILL_FIRE_RL_mb_metronome_counter_20 ;

  // register mb_counter_21
  assign mb_counter_21$D_IN =
	     MUX_mb_counter_21$write_1__SEL_1 ?
	       MUX_mb_counter_21$write_1__VAL_1 :
	       MUX_mb_counter_21$write_1__VAL_2 ;
  assign mb_counter_21$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd21 ||
	     WILL_FIRE_RL_mb_metronome_counter_21 ;

  // register mb_counter_22
  assign mb_counter_22$D_IN =
	     MUX_mb_counter_22$write_1__SEL_1 ?
	       MUX_mb_counter_22$write_1__VAL_1 :
	       MUX_mb_counter_22$write_1__VAL_2 ;
  assign mb_counter_22$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd22 ||
	     WILL_FIRE_RL_mb_metronome_counter_22 ;

  // register mb_counter_23
  assign mb_counter_23$D_IN =
	     MUX_mb_counter_23$write_1__SEL_1 ?
	       MUX_mb_counter_23$write_1__VAL_1 :
	       MUX_mb_counter_23$write_1__VAL_2 ;
  assign mb_counter_23$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd23 ||
	     WILL_FIRE_RL_mb_metronome_counter_23 ;

  // register mb_counter_24
  assign mb_counter_24$D_IN =
	     MUX_mb_counter_24$write_1__SEL_1 ?
	       MUX_mb_counter_24$write_1__VAL_1 :
	       MUX_mb_counter_24$write_1__VAL_2 ;
  assign mb_counter_24$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd24 ||
	     WILL_FIRE_RL_mb_metronome_counter_24 ;

  // register mb_counter_25
  assign mb_counter_25$D_IN =
	     MUX_mb_counter_25$write_1__SEL_1 ?
	       MUX_mb_counter_25$write_1__VAL_1 :
	       MUX_mb_counter_25$write_1__VAL_2 ;
  assign mb_counter_25$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd25 ||
	     WILL_FIRE_RL_mb_metronome_counter_25 ;

  // register mb_counter_26
  assign mb_counter_26$D_IN =
	     MUX_mb_counter_26$write_1__SEL_1 ?
	       MUX_mb_counter_26$write_1__VAL_1 :
	       MUX_mb_counter_26$write_1__VAL_2 ;
  assign mb_counter_26$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd26 ||
	     WILL_FIRE_RL_mb_metronome_counter_26 ;

  // register mb_counter_27
  assign mb_counter_27$D_IN =
	     MUX_mb_counter_27$write_1__SEL_1 ?
	       MUX_mb_counter_27$write_1__VAL_1 :
	       MUX_mb_counter_27$write_1__VAL_2 ;
  assign mb_counter_27$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd27 ||
	     WILL_FIRE_RL_mb_metronome_counter_27 ;

  // register mb_counter_28
  assign mb_counter_28$D_IN =
	     MUX_mb_counter_28$write_1__SEL_1 ?
	       MUX_mb_counter_28$write_1__VAL_1 :
	       MUX_mb_counter_28$write_1__VAL_2 ;
  assign mb_counter_28$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd28 ||
	     WILL_FIRE_RL_mb_metronome_counter_28 ;

  // register mb_counter_29
  assign mb_counter_29$D_IN =
	     MUX_mb_counter_29$write_1__SEL_1 ?
	       MUX_mb_counter_29$write_1__VAL_1 :
	       MUX_mb_counter_29$write_1__VAL_2 ;
  assign mb_counter_29$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd29 ||
	     WILL_FIRE_RL_mb_metronome_counter_29 ;

  // register mb_counter_3
  assign mb_counter_3$D_IN =
	     MUX_mb_counter_3$write_1__SEL_1 ?
	       MUX_mb_counter_3$write_1__VAL_1 :
	       MUX_mb_counter_3$write_1__VAL_2 ;
  assign mb_counter_3$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd3 ||
	     WILL_FIRE_RL_mb_metronome_counter_3 ;

  // register mb_counter_30
  assign mb_counter_30$D_IN =
	     MUX_mb_counter_30$write_1__SEL_1 ?
	       MUX_mb_counter_30$write_1__VAL_1 :
	       MUX_mb_counter_30$write_1__VAL_2 ;
  assign mb_counter_30$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd30 ||
	     WILL_FIRE_RL_mb_metronome_counter_30 ;

  // register mb_counter_31
  assign mb_counter_31$D_IN =
	     MUX_mb_counter_31$write_1__SEL_1 ?
	       MUX_mb_counter_31$write_1__VAL_1 :
	       MUX_mb_counter_31$write_1__VAL_2 ;
  assign mb_counter_31$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd31 ||
	     WILL_FIRE_RL_mb_metronome_counter_31 ;

  // register mb_counter_32
  assign mb_counter_32$D_IN =
	     MUX_mb_counter_32$write_1__SEL_1 ?
	       MUX_mb_counter_32$write_1__VAL_1 :
	       MUX_mb_counter_32$write_1__VAL_2 ;
  assign mb_counter_32$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd32 ||
	     WILL_FIRE_RL_mb_metronome_counter_32 ;

  // register mb_counter_33
  assign mb_counter_33$D_IN =
	     MUX_mb_counter_33$write_1__SEL_1 ?
	       MUX_mb_counter_33$write_1__VAL_1 :
	       MUX_mb_counter_33$write_1__VAL_2 ;
  assign mb_counter_33$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd33 ||
	     WILL_FIRE_RL_mb_metronome_counter_33 ;

  // register mb_counter_34
  assign mb_counter_34$D_IN =
	     MUX_mb_counter_34$write_1__SEL_1 ?
	       MUX_mb_counter_34$write_1__VAL_1 :
	       MUX_mb_counter_34$write_1__VAL_2 ;
  assign mb_counter_34$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd34 ||
	     WILL_FIRE_RL_mb_metronome_counter_34 ;

  // register mb_counter_35
  assign mb_counter_35$D_IN =
	     MUX_mb_counter_35$write_1__SEL_1 ?
	       MUX_mb_counter_35$write_1__VAL_1 :
	       MUX_mb_counter_35$write_1__VAL_2 ;
  assign mb_counter_35$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd35 ||
	     WILL_FIRE_RL_mb_metronome_counter_35 ;

  // register mb_counter_36
  assign mb_counter_36$D_IN =
	     MUX_mb_counter_36$write_1__SEL_1 ?
	       MUX_mb_counter_36$write_1__VAL_1 :
	       MUX_mb_counter_36$write_1__VAL_2 ;
  assign mb_counter_36$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd36 ||
	     WILL_FIRE_RL_mb_metronome_counter_36 ;

  // register mb_counter_37
  assign mb_counter_37$D_IN =
	     MUX_mb_counter_37$write_1__SEL_1 ?
	       MUX_mb_counter_37$write_1__VAL_1 :
	       MUX_mb_counter_37$write_1__VAL_2 ;
  assign mb_counter_37$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd37 ||
	     WILL_FIRE_RL_mb_metronome_counter_37 ;

  // register mb_counter_38
  assign mb_counter_38$D_IN =
	     MUX_mb_counter_38$write_1__SEL_1 ?
	       MUX_mb_counter_38$write_1__VAL_1 :
	       MUX_mb_counter_38$write_1__VAL_2 ;
  assign mb_counter_38$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd38 ||
	     WILL_FIRE_RL_mb_metronome_counter_38 ;

  // register mb_counter_39
  assign mb_counter_39$D_IN =
	     MUX_mb_counter_39$write_1__SEL_1 ?
	       MUX_mb_counter_39$write_1__VAL_1 :
	       MUX_mb_counter_39$write_1__VAL_2 ;
  assign mb_counter_39$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd39 ||
	     WILL_FIRE_RL_mb_metronome_counter_39 ;

  // register mb_counter_4
  assign mb_counter_4$D_IN =
	     MUX_mb_counter_4$write_1__SEL_1 ?
	       MUX_mb_counter_4$write_1__VAL_1 :
	       MUX_mb_counter_4$write_1__VAL_2 ;
  assign mb_counter_4$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd4 ||
	     WILL_FIRE_RL_mb_metronome_counter_4 ;

  // register mb_counter_40
  assign mb_counter_40$D_IN =
	     MUX_mb_counter_40$write_1__SEL_1 ?
	       MUX_mb_counter_40$write_1__VAL_1 :
	       MUX_mb_counter_40$write_1__VAL_2 ;
  assign mb_counter_40$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd40 ||
	     WILL_FIRE_RL_mb_metronome_counter_40 ;

  // register mb_counter_41
  assign mb_counter_41$D_IN =
	     MUX_mb_counter_41$write_1__SEL_1 ?
	       MUX_mb_counter_41$write_1__VAL_1 :
	       MUX_mb_counter_41$write_1__VAL_2 ;
  assign mb_counter_41$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd41 ||
	     WILL_FIRE_RL_mb_metronome_counter_41 ;

  // register mb_counter_42
  assign mb_counter_42$D_IN =
	     MUX_mb_counter_42$write_1__SEL_1 ?
	       MUX_mb_counter_42$write_1__VAL_1 :
	       MUX_mb_counter_42$write_1__VAL_2 ;
  assign mb_counter_42$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd42 ||
	     WILL_FIRE_RL_mb_metronome_counter_42 ;

  // register mb_counter_43
  assign mb_counter_43$D_IN =
	     MUX_mb_counter_43$write_1__SEL_1 ?
	       MUX_mb_counter_43$write_1__VAL_1 :
	       MUX_mb_counter_43$write_1__VAL_2 ;
  assign mb_counter_43$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd43 ||
	     WILL_FIRE_RL_mb_metronome_counter_43 ;

  // register mb_counter_44
  assign mb_counter_44$D_IN =
	     MUX_mb_counter_44$write_1__SEL_1 ?
	       MUX_mb_counter_44$write_1__VAL_1 :
	       MUX_mb_counter_44$write_1__VAL_2 ;
  assign mb_counter_44$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd44 ||
	     WILL_FIRE_RL_mb_metronome_counter_44 ;

  // register mb_counter_45
  assign mb_counter_45$D_IN =
	     MUX_mb_counter_45$write_1__SEL_1 ?
	       MUX_mb_counter_45$write_1__VAL_1 :
	       MUX_mb_counter_45$write_1__VAL_2 ;
  assign mb_counter_45$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd45 ||
	     WILL_FIRE_RL_mb_metronome_counter_45 ;

  // register mb_counter_46
  assign mb_counter_46$D_IN =
	     MUX_mb_counter_46$write_1__SEL_1 ?
	       MUX_mb_counter_46$write_1__VAL_1 :
	       MUX_mb_counter_46$write_1__VAL_2 ;
  assign mb_counter_46$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd46 ||
	     WILL_FIRE_RL_mb_metronome_counter_46 ;

  // register mb_counter_47
  assign mb_counter_47$D_IN =
	     MUX_mb_counter_47$write_1__SEL_1 ?
	       MUX_mb_counter_47$write_1__VAL_1 :
	       MUX_mb_counter_47$write_1__VAL_2 ;
  assign mb_counter_47$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd47 ||
	     WILL_FIRE_RL_mb_metronome_counter_47 ;

  // register mb_counter_48
  assign mb_counter_48$D_IN =
	     MUX_mb_counter_48$write_1__SEL_1 ?
	       MUX_mb_counter_48$write_1__VAL_1 :
	       MUX_mb_counter_48$write_1__VAL_2 ;
  assign mb_counter_48$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd48 ||
	     WILL_FIRE_RL_mb_metronome_counter_48 ;

  // register mb_counter_49
  assign mb_counter_49$D_IN =
	     MUX_mb_counter_49$write_1__SEL_1 ?
	       MUX_mb_counter_49$write_1__VAL_1 :
	       MUX_mb_counter_49$write_1__VAL_2 ;
  assign mb_counter_49$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd49 ||
	     WILL_FIRE_RL_mb_metronome_counter_49 ;

  // register mb_counter_5
  assign mb_counter_5$D_IN =
	     MUX_mb_counter_5$write_1__SEL_1 ?
	       MUX_mb_counter_5$write_1__VAL_1 :
	       MUX_mb_counter_5$write_1__VAL_2 ;
  assign mb_counter_5$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd5 ||
	     WILL_FIRE_RL_mb_metronome_counter_5 ;

  // register mb_counter_50
  assign mb_counter_50$D_IN =
	     MUX_mb_counter_50$write_1__SEL_1 ?
	       MUX_mb_counter_50$write_1__VAL_1 :
	       MUX_mb_counter_50$write_1__VAL_2 ;
  assign mb_counter_50$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd50 ||
	     WILL_FIRE_RL_mb_metronome_counter_50 ;

  // register mb_counter_51
  assign mb_counter_51$D_IN =
	     MUX_mb_counter_51$write_1__SEL_1 ?
	       MUX_mb_counter_51$write_1__VAL_1 :
	       MUX_mb_counter_51$write_1__VAL_2 ;
  assign mb_counter_51$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd51 ||
	     WILL_FIRE_RL_mb_metronome_counter_51 ;

  // register mb_counter_52
  assign mb_counter_52$D_IN =
	     MUX_mb_counter_52$write_1__SEL_1 ?
	       MUX_mb_counter_52$write_1__VAL_1 :
	       MUX_mb_counter_52$write_1__VAL_2 ;
  assign mb_counter_52$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd52 ||
	     WILL_FIRE_RL_mb_metronome_counter_52 ;

  // register mb_counter_53
  assign mb_counter_53$D_IN =
	     MUX_mb_counter_53$write_1__SEL_1 ?
	       MUX_mb_counter_53$write_1__VAL_1 :
	       MUX_mb_counter_53$write_1__VAL_2 ;
  assign mb_counter_53$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd53 ||
	     WILL_FIRE_RL_mb_metronome_counter_53 ;

  // register mb_counter_54
  assign mb_counter_54$D_IN =
	     MUX_mb_counter_54$write_1__SEL_1 ?
	       MUX_mb_counter_54$write_1__VAL_1 :
	       MUX_mb_counter_54$write_1__VAL_2 ;
  assign mb_counter_54$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd54 ||
	     WILL_FIRE_RL_mb_metronome_counter_54 ;

  // register mb_counter_55
  assign mb_counter_55$D_IN =
	     MUX_mb_counter_55$write_1__SEL_1 ?
	       MUX_mb_counter_55$write_1__VAL_1 :
	       MUX_mb_counter_55$write_1__VAL_2 ;
  assign mb_counter_55$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd55 ||
	     WILL_FIRE_RL_mb_metronome_counter_55 ;

  // register mb_counter_56
  assign mb_counter_56$D_IN =
	     MUX_mb_counter_56$write_1__SEL_1 ?
	       MUX_mb_counter_56$write_1__VAL_1 :
	       MUX_mb_counter_56$write_1__VAL_2 ;
  assign mb_counter_56$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd56 ||
	     WILL_FIRE_RL_mb_metronome_counter_56 ;

  // register mb_counter_57
  assign mb_counter_57$D_IN =
	     MUX_mb_counter_57$write_1__SEL_1 ?
	       MUX_mb_counter_57$write_1__VAL_1 :
	       MUX_mb_counter_57$write_1__VAL_2 ;
  assign mb_counter_57$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd57 ||
	     WILL_FIRE_RL_mb_metronome_counter_57 ;

  // register mb_counter_58
  assign mb_counter_58$D_IN =
	     MUX_mb_counter_58$write_1__SEL_1 ?
	       MUX_mb_counter_58$write_1__VAL_1 :
	       MUX_mb_counter_58$write_1__VAL_2 ;
  assign mb_counter_58$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd58 ||
	     WILL_FIRE_RL_mb_metronome_counter_58 ;

  // register mb_counter_59
  assign mb_counter_59$D_IN =
	     MUX_mb_counter_59$write_1__SEL_1 ?
	       MUX_mb_counter_59$write_1__VAL_1 :
	       MUX_mb_counter_59$write_1__VAL_2 ;
  assign mb_counter_59$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd59 ||
	     WILL_FIRE_RL_mb_metronome_counter_59 ;

  // register mb_counter_6
  assign mb_counter_6$D_IN =
	     MUX_mb_counter_6$write_1__SEL_1 ?
	       MUX_mb_counter_6$write_1__VAL_1 :
	       MUX_mb_counter_6$write_1__VAL_2 ;
  assign mb_counter_6$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd6 ||
	     WILL_FIRE_RL_mb_metronome_counter_6 ;

  // register mb_counter_60
  assign mb_counter_60$D_IN =
	     MUX_mb_counter_60$write_1__SEL_1 ?
	       MUX_mb_counter_60$write_1__VAL_1 :
	       MUX_mb_counter_60$write_1__VAL_2 ;
  assign mb_counter_60$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd60 ||
	     WILL_FIRE_RL_mb_metronome_counter_60 ;

  // register mb_counter_61
  assign mb_counter_61$D_IN =
	     MUX_mb_counter_61$write_1__SEL_1 ?
	       MUX_mb_counter_61$write_1__VAL_1 :
	       MUX_mb_counter_61$write_1__VAL_2 ;
  assign mb_counter_61$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd61 ||
	     WILL_FIRE_RL_mb_metronome_counter_61 ;

  // register mb_counter_62
  assign mb_counter_62$D_IN =
	     MUX_mb_counter_62$write_1__SEL_1 ?
	       MUX_mb_counter_62$write_1__VAL_1 :
	       MUX_mb_counter_62$write_1__VAL_2 ;
  assign mb_counter_62$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd62 ||
	     WILL_FIRE_RL_mb_metronome_counter_62 ;

  // register mb_counter_63
  assign mb_counter_63$D_IN =
	     MUX_mb_counter_63$write_1__SEL_1 ?
	       MUX_mb_counter_63$write_1__VAL_1 :
	       MUX_mb_counter_63$write_1__VAL_2 ;
  assign mb_counter_63$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd63 ||
	     WILL_FIRE_RL_mb_metronome_counter_63 ;

  // register mb_counter_64
  assign mb_counter_64$D_IN =
	     MUX_mb_counter_64$write_1__SEL_1 ?
	       MUX_mb_counter_64$write_1__VAL_1 :
	       MUX_mb_counter_64$write_1__VAL_2 ;
  assign mb_counter_64$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd64 ||
	     WILL_FIRE_RL_mb_metronome_counter_64 ;

  // register mb_counter_7
  assign mb_counter_7$D_IN =
	     MUX_mb_counter_7$write_1__SEL_1 ?
	       MUX_mb_counter_7$write_1__VAL_1 :
	       MUX_mb_counter_7$write_1__VAL_2 ;
  assign mb_counter_7$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd7 ||
	     WILL_FIRE_RL_mb_metronome_counter_7 ;

  // register mb_counter_8
  assign mb_counter_8$D_IN =
	     MUX_mb_counter_8$write_1__SEL_1 ?
	       MUX_mb_counter_8$write_1__VAL_1 :
	       MUX_mb_counter_8$write_1__VAL_2 ;
  assign mb_counter_8$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd8 ||
	     WILL_FIRE_RL_mb_metronome_counter_8 ;

  // register mb_counter_9
  assign mb_counter_9$D_IN =
	     MUX_mb_counter_9$write_1__SEL_1 ?
	       MUX_mb_counter_9$write_1__VAL_1 :
	       MUX_mb_counter_9$write_1__VAL_2 ;
  assign mb_counter_9$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 7'd9 ||
	     WILL_FIRE_RL_mb_metronome_counter_9 ;

  // register mb_last_counter
  assign mb_last_counter$D_IN = MUX_mb_counter$write_1__VAL_2 ;
  assign mb_last_counter$EN = WILL_FIRE_RL_mb_metronome_counter ;

  // register mb_last_counter_1
  assign mb_last_counter_1$D_IN = MUX_mb_counter_1$write_1__VAL_2 ;
  assign mb_last_counter_1$EN = WILL_FIRE_RL_mb_metronome_counter_1 ;

  // register mb_last_counter_10
  assign mb_last_counter_10$D_IN = MUX_mb_counter_10$write_1__VAL_2 ;
  assign mb_last_counter_10$EN = WILL_FIRE_RL_mb_metronome_counter_10 ;

  // register mb_last_counter_11
  assign mb_last_counter_11$D_IN = MUX_mb_counter_11$write_1__VAL_2 ;
  assign mb_last_counter_11$EN = WILL_FIRE_RL_mb_metronome_counter_11 ;

  // register mb_last_counter_12
  assign mb_last_counter_12$D_IN = MUX_mb_counter_12$write_1__VAL_2 ;
  assign mb_last_counter_12$EN = WILL_FIRE_RL_mb_metronome_counter_12 ;

  // register mb_last_counter_13
  assign mb_last_counter_13$D_IN = MUX_mb_counter_13$write_1__VAL_2 ;
  assign mb_last_counter_13$EN = WILL_FIRE_RL_mb_metronome_counter_13 ;

  // register mb_last_counter_14
  assign mb_last_counter_14$D_IN = MUX_mb_counter_14$write_1__VAL_2 ;
  assign mb_last_counter_14$EN = WILL_FIRE_RL_mb_metronome_counter_14 ;

  // register mb_last_counter_15
  assign mb_last_counter_15$D_IN = MUX_mb_counter_15$write_1__VAL_2 ;
  assign mb_last_counter_15$EN = WILL_FIRE_RL_mb_metronome_counter_15 ;

  // register mb_last_counter_16
  assign mb_last_counter_16$D_IN = MUX_mb_counter_16$write_1__VAL_2 ;
  assign mb_last_counter_16$EN = WILL_FIRE_RL_mb_metronome_counter_16 ;

  // register mb_last_counter_17
  assign mb_last_counter_17$D_IN = MUX_mb_counter_17$write_1__VAL_2 ;
  assign mb_last_counter_17$EN = WILL_FIRE_RL_mb_metronome_counter_17 ;

  // register mb_last_counter_18
  assign mb_last_counter_18$D_IN = MUX_mb_counter_18$write_1__VAL_2 ;
  assign mb_last_counter_18$EN = WILL_FIRE_RL_mb_metronome_counter_18 ;

  // register mb_last_counter_19
  assign mb_last_counter_19$D_IN = MUX_mb_counter_19$write_1__VAL_2 ;
  assign mb_last_counter_19$EN = WILL_FIRE_RL_mb_metronome_counter_19 ;

  // register mb_last_counter_2
  assign mb_last_counter_2$D_IN = MUX_mb_counter_2$write_1__VAL_2 ;
  assign mb_last_counter_2$EN = WILL_FIRE_RL_mb_metronome_counter_2 ;

  // register mb_last_counter_20
  assign mb_last_counter_20$D_IN = MUX_mb_counter_20$write_1__VAL_2 ;
  assign mb_last_counter_20$EN = WILL_FIRE_RL_mb_metronome_counter_20 ;

  // register mb_last_counter_21
  assign mb_last_counter_21$D_IN = MUX_mb_counter_21$write_1__VAL_2 ;
  assign mb_last_counter_21$EN = WILL_FIRE_RL_mb_metronome_counter_21 ;

  // register mb_last_counter_22
  assign mb_last_counter_22$D_IN = MUX_mb_counter_22$write_1__VAL_2 ;
  assign mb_last_counter_22$EN = WILL_FIRE_RL_mb_metronome_counter_22 ;

  // register mb_last_counter_23
  assign mb_last_counter_23$D_IN = MUX_mb_counter_23$write_1__VAL_2 ;
  assign mb_last_counter_23$EN = WILL_FIRE_RL_mb_metronome_counter_23 ;

  // register mb_last_counter_24
  assign mb_last_counter_24$D_IN = MUX_mb_counter_24$write_1__VAL_2 ;
  assign mb_last_counter_24$EN = WILL_FIRE_RL_mb_metronome_counter_24 ;

  // register mb_last_counter_25
  assign mb_last_counter_25$D_IN = MUX_mb_counter_25$write_1__VAL_2 ;
  assign mb_last_counter_25$EN = WILL_FIRE_RL_mb_metronome_counter_25 ;

  // register mb_last_counter_26
  assign mb_last_counter_26$D_IN = MUX_mb_counter_26$write_1__VAL_2 ;
  assign mb_last_counter_26$EN = WILL_FIRE_RL_mb_metronome_counter_26 ;

  // register mb_last_counter_27
  assign mb_last_counter_27$D_IN = MUX_mb_counter_27$write_1__VAL_2 ;
  assign mb_last_counter_27$EN = WILL_FIRE_RL_mb_metronome_counter_27 ;

  // register mb_last_counter_28
  assign mb_last_counter_28$D_IN = MUX_mb_counter_28$write_1__VAL_2 ;
  assign mb_last_counter_28$EN = WILL_FIRE_RL_mb_metronome_counter_28 ;

  // register mb_last_counter_29
  assign mb_last_counter_29$D_IN = MUX_mb_counter_29$write_1__VAL_2 ;
  assign mb_last_counter_29$EN = WILL_FIRE_RL_mb_metronome_counter_29 ;

  // register mb_last_counter_3
  assign mb_last_counter_3$D_IN = MUX_mb_counter_3$write_1__VAL_2 ;
  assign mb_last_counter_3$EN = WILL_FIRE_RL_mb_metronome_counter_3 ;

  // register mb_last_counter_30
  assign mb_last_counter_30$D_IN = MUX_mb_counter_30$write_1__VAL_2 ;
  assign mb_last_counter_30$EN = WILL_FIRE_RL_mb_metronome_counter_30 ;

  // register mb_last_counter_31
  assign mb_last_counter_31$D_IN = MUX_mb_counter_31$write_1__VAL_2 ;
  assign mb_last_counter_31$EN = WILL_FIRE_RL_mb_metronome_counter_31 ;

  // register mb_last_counter_32
  assign mb_last_counter_32$D_IN = MUX_mb_counter_32$write_1__VAL_2 ;
  assign mb_last_counter_32$EN = WILL_FIRE_RL_mb_metronome_counter_32 ;

  // register mb_last_counter_33
  assign mb_last_counter_33$D_IN = MUX_mb_counter_33$write_1__VAL_2 ;
  assign mb_last_counter_33$EN = WILL_FIRE_RL_mb_metronome_counter_33 ;

  // register mb_last_counter_34
  assign mb_last_counter_34$D_IN = MUX_mb_counter_34$write_1__VAL_2 ;
  assign mb_last_counter_34$EN = WILL_FIRE_RL_mb_metronome_counter_34 ;

  // register mb_last_counter_35
  assign mb_last_counter_35$D_IN = MUX_mb_counter_35$write_1__VAL_2 ;
  assign mb_last_counter_35$EN = WILL_FIRE_RL_mb_metronome_counter_35 ;

  // register mb_last_counter_36
  assign mb_last_counter_36$D_IN = MUX_mb_counter_36$write_1__VAL_2 ;
  assign mb_last_counter_36$EN = WILL_FIRE_RL_mb_metronome_counter_36 ;

  // register mb_last_counter_37
  assign mb_last_counter_37$D_IN = MUX_mb_counter_37$write_1__VAL_2 ;
  assign mb_last_counter_37$EN = WILL_FIRE_RL_mb_metronome_counter_37 ;

  // register mb_last_counter_38
  assign mb_last_counter_38$D_IN = MUX_mb_counter_38$write_1__VAL_2 ;
  assign mb_last_counter_38$EN = WILL_FIRE_RL_mb_metronome_counter_38 ;

  // register mb_last_counter_39
  assign mb_last_counter_39$D_IN = MUX_mb_counter_39$write_1__VAL_2 ;
  assign mb_last_counter_39$EN = WILL_FIRE_RL_mb_metronome_counter_39 ;

  // register mb_last_counter_4
  assign mb_last_counter_4$D_IN = MUX_mb_counter_4$write_1__VAL_2 ;
  assign mb_last_counter_4$EN = WILL_FIRE_RL_mb_metronome_counter_4 ;

  // register mb_last_counter_40
  assign mb_last_counter_40$D_IN = MUX_mb_counter_40$write_1__VAL_2 ;
  assign mb_last_counter_40$EN = WILL_FIRE_RL_mb_metronome_counter_40 ;

  // register mb_last_counter_41
  assign mb_last_counter_41$D_IN = MUX_mb_counter_41$write_1__VAL_2 ;
  assign mb_last_counter_41$EN = WILL_FIRE_RL_mb_metronome_counter_41 ;

  // register mb_last_counter_42
  assign mb_last_counter_42$D_IN = MUX_mb_counter_42$write_1__VAL_2 ;
  assign mb_last_counter_42$EN = WILL_FIRE_RL_mb_metronome_counter_42 ;

  // register mb_last_counter_43
  assign mb_last_counter_43$D_IN = MUX_mb_counter_43$write_1__VAL_2 ;
  assign mb_last_counter_43$EN = WILL_FIRE_RL_mb_metronome_counter_43 ;

  // register mb_last_counter_44
  assign mb_last_counter_44$D_IN = MUX_mb_counter_44$write_1__VAL_2 ;
  assign mb_last_counter_44$EN = WILL_FIRE_RL_mb_metronome_counter_44 ;

  // register mb_last_counter_45
  assign mb_last_counter_45$D_IN = MUX_mb_counter_45$write_1__VAL_2 ;
  assign mb_last_counter_45$EN = WILL_FIRE_RL_mb_metronome_counter_45 ;

  // register mb_last_counter_46
  assign mb_last_counter_46$D_IN = MUX_mb_counter_46$write_1__VAL_2 ;
  assign mb_last_counter_46$EN = WILL_FIRE_RL_mb_metronome_counter_46 ;

  // register mb_last_counter_47
  assign mb_last_counter_47$D_IN = MUX_mb_counter_47$write_1__VAL_2 ;
  assign mb_last_counter_47$EN = WILL_FIRE_RL_mb_metronome_counter_47 ;

  // register mb_last_counter_48
  assign mb_last_counter_48$D_IN = MUX_mb_counter_48$write_1__VAL_2 ;
  assign mb_last_counter_48$EN = WILL_FIRE_RL_mb_metronome_counter_48 ;

  // register mb_last_counter_49
  assign mb_last_counter_49$D_IN = MUX_mb_counter_49$write_1__VAL_2 ;
  assign mb_last_counter_49$EN = WILL_FIRE_RL_mb_metronome_counter_49 ;

  // register mb_last_counter_5
  assign mb_last_counter_5$D_IN = MUX_mb_counter_5$write_1__VAL_2 ;
  assign mb_last_counter_5$EN = WILL_FIRE_RL_mb_metronome_counter_5 ;

  // register mb_last_counter_50
  assign mb_last_counter_50$D_IN = MUX_mb_counter_50$write_1__VAL_2 ;
  assign mb_last_counter_50$EN = WILL_FIRE_RL_mb_metronome_counter_50 ;

  // register mb_last_counter_51
  assign mb_last_counter_51$D_IN = MUX_mb_counter_51$write_1__VAL_2 ;
  assign mb_last_counter_51$EN = WILL_FIRE_RL_mb_metronome_counter_51 ;

  // register mb_last_counter_52
  assign mb_last_counter_52$D_IN = MUX_mb_counter_52$write_1__VAL_2 ;
  assign mb_last_counter_52$EN = WILL_FIRE_RL_mb_metronome_counter_52 ;

  // register mb_last_counter_53
  assign mb_last_counter_53$D_IN = MUX_mb_counter_53$write_1__VAL_2 ;
  assign mb_last_counter_53$EN = WILL_FIRE_RL_mb_metronome_counter_53 ;

  // register mb_last_counter_54
  assign mb_last_counter_54$D_IN = MUX_mb_counter_54$write_1__VAL_2 ;
  assign mb_last_counter_54$EN = WILL_FIRE_RL_mb_metronome_counter_54 ;

  // register mb_last_counter_55
  assign mb_last_counter_55$D_IN = MUX_mb_counter_55$write_1__VAL_2 ;
  assign mb_last_counter_55$EN = WILL_FIRE_RL_mb_metronome_counter_55 ;

  // register mb_last_counter_56
  assign mb_last_counter_56$D_IN = MUX_mb_counter_56$write_1__VAL_2 ;
  assign mb_last_counter_56$EN = WILL_FIRE_RL_mb_metronome_counter_56 ;

  // register mb_last_counter_57
  assign mb_last_counter_57$D_IN = MUX_mb_counter_57$write_1__VAL_2 ;
  assign mb_last_counter_57$EN = WILL_FIRE_RL_mb_metronome_counter_57 ;

  // register mb_last_counter_58
  assign mb_last_counter_58$D_IN = MUX_mb_counter_58$write_1__VAL_2 ;
  assign mb_last_counter_58$EN = WILL_FIRE_RL_mb_metronome_counter_58 ;

  // register mb_last_counter_59
  assign mb_last_counter_59$D_IN = MUX_mb_counter_59$write_1__VAL_2 ;
  assign mb_last_counter_59$EN = WILL_FIRE_RL_mb_metronome_counter_59 ;

  // register mb_last_counter_6
  assign mb_last_counter_6$D_IN = MUX_mb_counter_6$write_1__VAL_2 ;
  assign mb_last_counter_6$EN = WILL_FIRE_RL_mb_metronome_counter_6 ;

  // register mb_last_counter_60
  assign mb_last_counter_60$D_IN = MUX_mb_counter_60$write_1__VAL_2 ;
  assign mb_last_counter_60$EN = WILL_FIRE_RL_mb_metronome_counter_60 ;

  // register mb_last_counter_61
  assign mb_last_counter_61$D_IN = MUX_mb_counter_61$write_1__VAL_2 ;
  assign mb_last_counter_61$EN = WILL_FIRE_RL_mb_metronome_counter_61 ;

  // register mb_last_counter_62
  assign mb_last_counter_62$D_IN = MUX_mb_counter_62$write_1__VAL_2 ;
  assign mb_last_counter_62$EN = WILL_FIRE_RL_mb_metronome_counter_62 ;

  // register mb_last_counter_63
  assign mb_last_counter_63$D_IN = MUX_mb_counter_63$write_1__VAL_2 ;
  assign mb_last_counter_63$EN = WILL_FIRE_RL_mb_metronome_counter_63 ;

  // register mb_last_counter_64
  assign mb_last_counter_64$D_IN = MUX_mb_counter_64$write_1__VAL_2 ;
  assign mb_last_counter_64$EN = WILL_FIRE_RL_mb_metronome_counter_64 ;

  // register mb_last_counter_7
  assign mb_last_counter_7$D_IN = MUX_mb_counter_7$write_1__VAL_2 ;
  assign mb_last_counter_7$EN = WILL_FIRE_RL_mb_metronome_counter_7 ;

  // register mb_last_counter_8
  assign mb_last_counter_8$D_IN = MUX_mb_counter_8$write_1__VAL_2 ;
  assign mb_last_counter_8$EN = WILL_FIRE_RL_mb_metronome_counter_8 ;

  // register mb_last_counter_9
  assign mb_last_counter_9$D_IN = MUX_mb_counter_9$write_1__VAL_2 ;
  assign mb_last_counter_9$EN = WILL_FIRE_RL_mb_metronome_counter_9 ;

  // register mb_out_count
  assign mb_out_count$D_IN =
	     WILL_FIRE_RL_beat_injector_cont ?
	       MUX_mb_out_count$write_1__VAL_1 :
	       7'd1 ;
  assign mb_out_count$EN =
	     WILL_FIRE_RL_beat_injector_cont ||
	     WILL_FIRE_RL_beat_injector_start ;

  // register mb_tick_pulse
  assign mb_tick_pulse$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse ;

  // register mb_tick_pulse_1
  assign mb_tick_pulse_1$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_1$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_1 ;

  // register mb_tick_pulse_10
  assign mb_tick_pulse_10$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_10$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_10 ;

  // register mb_tick_pulse_11
  assign mb_tick_pulse_11$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_11$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_11 ;

  // register mb_tick_pulse_12
  assign mb_tick_pulse_12$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_12$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_12 ;

  // register mb_tick_pulse_13
  assign mb_tick_pulse_13$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_13$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_13 ;

  // register mb_tick_pulse_14
  assign mb_tick_pulse_14$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_14$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_14 ;

  // register mb_tick_pulse_15
  assign mb_tick_pulse_15$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_15$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_15 ;

  // register mb_tick_pulse_16
  assign mb_tick_pulse_16$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_16$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_16 ;

  // register mb_tick_pulse_17
  assign mb_tick_pulse_17$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_17$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_17 ;

  // register mb_tick_pulse_18
  assign mb_tick_pulse_18$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_18$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_18 ;

  // register mb_tick_pulse_19
  assign mb_tick_pulse_19$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_19$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_19 ;

  // register mb_tick_pulse_2
  assign mb_tick_pulse_2$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_2$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_2 ;

  // register mb_tick_pulse_20
  assign mb_tick_pulse_20$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_20$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_20 ;

  // register mb_tick_pulse_21
  assign mb_tick_pulse_21$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_21$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_21 ;

  // register mb_tick_pulse_22
  assign mb_tick_pulse_22$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_22$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_22 ;

  // register mb_tick_pulse_23
  assign mb_tick_pulse_23$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_23$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_23 ;

  // register mb_tick_pulse_24
  assign mb_tick_pulse_24$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_24$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_24 ;

  // register mb_tick_pulse_25
  assign mb_tick_pulse_25$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_25$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_25 ;

  // register mb_tick_pulse_26
  assign mb_tick_pulse_26$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_26$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_26 ;

  // register mb_tick_pulse_27
  assign mb_tick_pulse_27$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_27$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_27 ;

  // register mb_tick_pulse_28
  assign mb_tick_pulse_28$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_28$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_28 ;

  // register mb_tick_pulse_29
  assign mb_tick_pulse_29$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_29$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_29 ;

  // register mb_tick_pulse_3
  assign mb_tick_pulse_3$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_3$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_3 ;

  // register mb_tick_pulse_30
  assign mb_tick_pulse_30$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_30$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_30 ;

  // register mb_tick_pulse_31
  assign mb_tick_pulse_31$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_31$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_31 ;

  // register mb_tick_pulse_32
  assign mb_tick_pulse_32$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_32$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_32 ;

  // register mb_tick_pulse_33
  assign mb_tick_pulse_33$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_33$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_33 ;

  // register mb_tick_pulse_34
  assign mb_tick_pulse_34$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_34$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_34 ;

  // register mb_tick_pulse_35
  assign mb_tick_pulse_35$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_35$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_35 ;

  // register mb_tick_pulse_36
  assign mb_tick_pulse_36$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_36$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_36 ;

  // register mb_tick_pulse_37
  assign mb_tick_pulse_37$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_37$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_37 ;

  // register mb_tick_pulse_38
  assign mb_tick_pulse_38$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_38$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_38 ;

  // register mb_tick_pulse_39
  assign mb_tick_pulse_39$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_39$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_39 ;

  // register mb_tick_pulse_4
  assign mb_tick_pulse_4$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_4$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_4 ;

  // register mb_tick_pulse_40
  assign mb_tick_pulse_40$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_40$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_40 ;

  // register mb_tick_pulse_41
  assign mb_tick_pulse_41$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_41$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_41 ;

  // register mb_tick_pulse_42
  assign mb_tick_pulse_42$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_42$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_42 ;

  // register mb_tick_pulse_43
  assign mb_tick_pulse_43$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_43$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_43 ;

  // register mb_tick_pulse_44
  assign mb_tick_pulse_44$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_44$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_44 ;

  // register mb_tick_pulse_45
  assign mb_tick_pulse_45$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_45$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_45 ;

  // register mb_tick_pulse_46
  assign mb_tick_pulse_46$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_46$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_46 ;

  // register mb_tick_pulse_47
  assign mb_tick_pulse_47$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_47$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_47 ;

  // register mb_tick_pulse_48
  assign mb_tick_pulse_48$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_48$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_48 ;

  // register mb_tick_pulse_49
  assign mb_tick_pulse_49$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_49$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_49 ;

  // register mb_tick_pulse_5
  assign mb_tick_pulse_5$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_5$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_5 ;

  // register mb_tick_pulse_50
  assign mb_tick_pulse_50$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_50$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_50 ;

  // register mb_tick_pulse_51
  assign mb_tick_pulse_51$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_51$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_51 ;

  // register mb_tick_pulse_52
  assign mb_tick_pulse_52$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_52$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_52 ;

  // register mb_tick_pulse_53
  assign mb_tick_pulse_53$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_53$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_53 ;

  // register mb_tick_pulse_54
  assign mb_tick_pulse_54$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_54$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_54 ;

  // register mb_tick_pulse_55
  assign mb_tick_pulse_55$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_55$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_55 ;

  // register mb_tick_pulse_56
  assign mb_tick_pulse_56$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_56$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_56 ;

  // register mb_tick_pulse_57
  assign mb_tick_pulse_57$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_57$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_57 ;

  // register mb_tick_pulse_58
  assign mb_tick_pulse_58$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_58$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_58 ;

  // register mb_tick_pulse_59
  assign mb_tick_pulse_59$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_59$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_59 ;

  // register mb_tick_pulse_6
  assign mb_tick_pulse_6$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_6$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_6 ;

  // register mb_tick_pulse_60
  assign mb_tick_pulse_60$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_60$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_60 ;

  // register mb_tick_pulse_61
  assign mb_tick_pulse_61$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_61$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_61 ;

  // register mb_tick_pulse_62
  assign mb_tick_pulse_62$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_62$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_62 ;

  // register mb_tick_pulse_63
  assign mb_tick_pulse_63$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_63$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_63 ;

  // register mb_tick_pulse_64
  assign mb_tick_pulse_64$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_64$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_64 ;

  // register mb_tick_pulse_7
  assign mb_tick_pulse_7$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_7$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_7 ;

  // register mb_tick_pulse_8
  assign mb_tick_pulse_8$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_8$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_8 ;

  // register mb_tick_pulse_9
  assign mb_tick_pulse_9$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_9$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 || mb_tick_pulse_9 ;

  // register mpc
  assign mpc$D_IN = (mpc == 9'd511) ? 9'd0 : mpc + 9'd1 ;
  assign mpc$EN = CAN_FIRE_RL_pulser ;

  // register sync_next
  assign sync_next$D_IN = !WILL_FIRE_RL_beat_injector_start ;
  assign sync_next$EN = WILL_FIRE_RL_beat_injector_start || EN_q_sync ;

  // register sync_this
  assign sync_this$D_IN = sync_next ;
  assign sync_this$EN = WILL_FIRE_RL_beat_injector_start ;

  // submodule bc_bc_infifo
  assign bc_bc_infifo$D_IN = putSampleInput_in ;
  assign bc_bc_infifo$ENQ = EN_putSampleInput ;
  assign bc_bc_infifo$DEQ = CAN_FIRE_RL_bc_bc_inject_sample ;
  assign bc_bc_infifo$CLR = 1'b0 ;

  // submodule bc_bc_outfifo
  assign bc_bc_outfifo$D_IN = 28'd0 ;
  assign bc_bc_outfifo$ENQ =
	     WILL_FIRE_RL_bc_bc_energy_calc_4 &&
	     NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255 ;
  assign bc_bc_outfifo$DEQ = WILL_FIRE_RL_beat_injector_start ;
  assign bc_bc_outfifo$CLR = 1'b0 ;

  // submodule bt_info
  assign bt_info$D_IN =
	     MUX_bt_info$enq_1__SEL_1 ?
	       mb_last_counter[21:14] :
	       CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3[21:14] ;
  assign bt_info$ENQ =
	     WILL_FIRE_RL_beat_injector_start && sync_next ||
	     WILL_FIRE_RL_beat_injector_cont && sync_this ;
  assign bt_info$DEQ = EN_getBeatInfo ;
  assign bt_info$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CO_ETC___d1196 =
	     (!_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131[189] &&
	      _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0__ETC___d994[173]) ?
	       174'h1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0__ETC___d994 ;
  assign IF_bc_bc_infifoD_OUT_BIT_13_THEN_NEG_bc_bc_in_ETC__q1 =
	     bc_bc_infifo$D_OUT[13] ?
	       -bc_bc_infifo$D_OUT[13:0] :
	       bc_bc_infifo$D_OUT[13:0] ;
  assign IF_bc_bc_infifoD_OUT_BIT_27_THEN_NEG_bc_bc_in_ETC__q2 =
	     bc_bc_infifo$D_OUT[27] ?
	       -bc_bc_infifo$D_OUT[27:14] :
	       bc_bc_infifo$D_OUT[27:14] ;
  assign IF_bc_bc_infifo_first_BIT_13_5_THEN_NEG_bc_bc__ETC___d20 =
	     IF_bc_bc_infifoD_OUT_BIT_13_THEN_NEG_bc_bc_in_ETC__q1[12:0] *
	     IF_bc_bc_infifoD_OUT_BIT_13_THEN_NEG_bc_bc_in_ETC__q1[12:0] ;
  assign IF_bc_bc_infifo_first_BIT_27_THEN_NEG_bc_bc_in_ETC___d13 =
	     IF_bc_bc_infifoD_OUT_BIT_27_THEN_NEG_bc_bc_in_ETC__q2[12:0] *
	     IF_bc_bc_infifoD_OUT_BIT_27_THEN_NEG_bc_bc_in_ETC__q2[12:0] ;
  assign NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255 =
	     ({ temp__h43325, 16'd0 } ^ 95'h400000000000000000000000) >
	     (bc_bc_fp_lin_a - bc_bc_fp_lin_b ^
	      95'h400000000000000000000000) ;
  assign NOT_mb_tick_pulse_10_88_63_AND_NOT_mb_tick_pul_ETC___d571 =
	     !mb_tick_pulse_10 && !mb_tick_pulse_11 && !mb_tick_pulse_12 &&
	     !mb_tick_pulse_13 &&
	     !mb_tick_pulse_14 &&
	     !mb_tick_pulse_15 &&
	     NOT_mb_tick_pulse_16_06_69_AND_NOT_mb_tick_pul_ETC___d565 ;
  assign NOT_mb_tick_pulse_16_06_69_AND_NOT_mb_tick_pul_ETC___d565 =
	     !mb_tick_pulse_16 && !mb_tick_pulse_17 && !mb_tick_pulse_18 &&
	     !mb_tick_pulse_19 &&
	     !mb_tick_pulse_20 &&
	     !mb_tick_pulse_21 &&
	     NOT_mb_tick_pulse_22_24_75_AND_NOT_mb_tick_pul_ETC___d559 ;
  assign NOT_mb_tick_pulse_22_24_75_AND_NOT_mb_tick_pul_ETC___d559 =
	     !mb_tick_pulse_22 && !mb_tick_pulse_23 && !mb_tick_pulse_24 &&
	     !mb_tick_pulse_25 &&
	     !mb_tick_pulse_26 &&
	     !mb_tick_pulse_27 &&
	     NOT_mb_tick_pulse_28_42_81_AND_NOT_mb_tick_pul_ETC___d553 ;
  assign NOT_mb_tick_pulse_28_42_81_AND_NOT_mb_tick_pul_ETC___d553 =
	     !mb_tick_pulse_28 && !mb_tick_pulse_29 && !mb_tick_pulse_30 &&
	     !mb_tick_pulse_31 &&
	     !mb_tick_pulse_32 &&
	     !mb_tick_pulse_33 &&
	     NOT_mb_tick_pulse_34_60_87_AND_NOT_mb_tick_pul_ETC___d547 ;
  assign NOT_mb_tick_pulse_34_60_87_AND_NOT_mb_tick_pul_ETC___d547 =
	     !mb_tick_pulse_34 && !mb_tick_pulse_35 && !mb_tick_pulse_36 &&
	     !mb_tick_pulse_37 &&
	     !mb_tick_pulse_38 &&
	     !mb_tick_pulse_39 &&
	     NOT_mb_tick_pulse_40_78_93_AND_NOT_mb_tick_pul_ETC___d541 ;
  assign NOT_mb_tick_pulse_40_78_93_AND_NOT_mb_tick_pul_ETC___d541 =
	     !mb_tick_pulse_40 && !mb_tick_pulse_41 && !mb_tick_pulse_42 &&
	     !mb_tick_pulse_43 &&
	     !mb_tick_pulse_44 &&
	     !mb_tick_pulse_45 &&
	     NOT_mb_tick_pulse_46_96_99_AND_NOT_mb_tick_pul_ETC___d535 ;
  assign NOT_mb_tick_pulse_46_96_99_AND_NOT_mb_tick_pul_ETC___d535 =
	     !mb_tick_pulse_46 && !mb_tick_pulse_47 && !mb_tick_pulse_48 &&
	     !mb_tick_pulse_49 &&
	     !mb_tick_pulse_50 &&
	     !mb_tick_pulse_51 &&
	     NOT_mb_tick_pulse_52_14_05_AND_NOT_mb_tick_pul_ETC___d529 ;
  assign NOT_mb_tick_pulse_4_70_57_AND_NOT_mb_tick_puls_ETC___d577 =
	     !mb_tick_pulse_4 && !mb_tick_pulse_5 && !mb_tick_pulse_6 &&
	     !mb_tick_pulse_7 &&
	     !mb_tick_pulse_8 &&
	     !mb_tick_pulse_9 &&
	     NOT_mb_tick_pulse_10_88_63_AND_NOT_mb_tick_pul_ETC___d571 ;
  assign NOT_mb_tick_pulse_52_14_05_AND_NOT_mb_tick_pul_ETC___d529 =
	     !mb_tick_pulse_52 && !mb_tick_pulse_53 && !mb_tick_pulse_54 &&
	     !mb_tick_pulse_55 &&
	     !mb_tick_pulse_56 &&
	     !mb_tick_pulse_57 &&
	     NOT_mb_tick_pulse_58_32_11_AND_NOT_mb_tick_pul_ETC___d523 ;
  assign NOT_mb_tick_pulse_58_32_11_AND_NOT_mb_tick_pul_ETC___d523 =
	     !mb_tick_pulse_58 && !mb_tick_pulse_59 && !mb_tick_pulse_60 &&
	     !mb_tick_pulse_61 &&
	     !mb_tick_pulse_62 &&
	     !mb_tick_pulse_63 &&
	     !mb_tick_pulse_64 ;
  assign _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131 =
	     95'd168 * x__h35837 ;
  assign _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0__ETC___d994 =
	     _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131[189:16] +
	     { 158'd0, y_f__h38673 } ;
  assign _99240_MUL_0_CONCAT_bc_bc_avg_energy_9_75_CONCA_ETC___d993 =
	     x__h25526[189:16] + { 158'd0, y_f__h28491 } ;
  assign bc_bc_avg_energy_9_MUL_bc_bc_avg_energy_9___d169 =
	     bc_bc_avg_energy * bc_bc_avg_energy ;
  assign bc_bc_cur_energy_MUL_bc_bc_cur_energy___d1060 =
	     bc_bc_cur_energy * bc_bc_cur_energy ;
  assign temp__h25620 = { 53'd0, bc_bc_avg_energy } ;
  assign temp__h35804 = { 1'b0, bc_bc_lin_b } ;
  assign temp__h43325 = { 53'd0, bc_bc_energy_buf_63 } ;
  assign x__h24206 =
	     (!x__h25526[189] &&
	      _99240_MUL_0_CONCAT_bc_bc_avg_energy_9_75_CONCA_ETC___d993[173]) ?
	       174'h1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       _99240_MUL_0_CONCAT_bc_bc_avg_energy_9_75_CONCA_ETC___d993 ;
  assign x__h25526 = 95'd99240 * x__h25652 ;
  assign x__h25652 = { temp__h25620, 16'd0 } ;
  assign x__h35837 = { temp__h35804, 16'd0 } ;
  assign y_f__h28491 =
	     (x__h25526[15] && (x__h25526[189] || x__h25526[14:0] != 15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h38673 =
	     (_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131[15] &&
	      (_168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131[189] ||
	       _168_MUL_0b0_CONCAT_bc_bc_lin_b_10_11_CONCAT_0_12___d1131[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  always@(mb_out_count or
	  mb_last_counter_64 or
	  mb_last_counter or
	  mb_last_counter_1 or
	  mb_last_counter_2 or
	  mb_last_counter_3 or
	  mb_last_counter_4 or
	  mb_last_counter_5 or
	  mb_last_counter_6 or
	  mb_last_counter_7 or
	  mb_last_counter_8 or
	  mb_last_counter_9 or
	  mb_last_counter_10 or
	  mb_last_counter_11 or
	  mb_last_counter_12 or
	  mb_last_counter_13 or
	  mb_last_counter_14 or
	  mb_last_counter_15 or
	  mb_last_counter_16 or
	  mb_last_counter_17 or
	  mb_last_counter_18 or
	  mb_last_counter_19 or
	  mb_last_counter_20 or
	  mb_last_counter_21 or
	  mb_last_counter_22 or
	  mb_last_counter_23 or
	  mb_last_counter_24 or
	  mb_last_counter_25 or
	  mb_last_counter_26 or
	  mb_last_counter_27 or
	  mb_last_counter_28 or
	  mb_last_counter_29 or
	  mb_last_counter_30 or
	  mb_last_counter_31 or
	  mb_last_counter_32 or
	  mb_last_counter_33 or
	  mb_last_counter_34 or
	  mb_last_counter_35 or
	  mb_last_counter_36 or
	  mb_last_counter_37 or
	  mb_last_counter_38 or
	  mb_last_counter_39 or
	  mb_last_counter_40 or
	  mb_last_counter_41 or
	  mb_last_counter_42 or
	  mb_last_counter_43 or
	  mb_last_counter_44 or
	  mb_last_counter_45 or
	  mb_last_counter_46 or
	  mb_last_counter_47 or
	  mb_last_counter_48 or
	  mb_last_counter_49 or
	  mb_last_counter_50 or
	  mb_last_counter_51 or
	  mb_last_counter_52 or
	  mb_last_counter_53 or
	  mb_last_counter_54 or
	  mb_last_counter_55 or
	  mb_last_counter_56 or
	  mb_last_counter_57 or
	  mb_last_counter_58 or
	  mb_last_counter_59 or
	  mb_last_counter_60 or
	  mb_last_counter_61 or mb_last_counter_62 or mb_last_counter_63)
  begin
    case (mb_out_count)
      7'd0:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter;
      7'd1:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_1;
      7'd2:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_2;
      7'd3:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_3;
      7'd4:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_4;
      7'd5:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_5;
      7'd6:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_6;
      7'd7:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_7;
      7'd8:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_8;
      7'd9:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_9;
      7'd10:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_10;
      7'd11:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_11;
      7'd12:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_12;
      7'd13:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_13;
      7'd14:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_14;
      7'd15:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_15;
      7'd16:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_16;
      7'd17:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_17;
      7'd18:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_18;
      7'd19:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_19;
      7'd20:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_20;
      7'd21:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_21;
      7'd22:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_22;
      7'd23:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_23;
      7'd24:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_24;
      7'd25:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_25;
      7'd26:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_26;
      7'd27:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_27;
      7'd28:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_28;
      7'd29:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_29;
      7'd30:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_30;
      7'd31:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_31;
      7'd32:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_32;
      7'd33:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_33;
      7'd34:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_34;
      7'd35:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_35;
      7'd36:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_36;
      7'd37:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_37;
      7'd38:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_38;
      7'd39:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_39;
      7'd40:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_40;
      7'd41:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_41;
      7'd42:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_42;
      7'd43:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_43;
      7'd44:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_44;
      7'd45:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_45;
      7'd46:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_46;
      7'd47:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_47;
      7'd48:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_48;
      7'd49:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_49;
      7'd50:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_50;
      7'd51:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_51;
      7'd52:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_52;
      7'd53:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_53;
      7'd54:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_54;
      7'd55:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_55;
      7'd56:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_56;
      7'd57:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_57;
      7'd58:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_58;
      7'd59:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_59;
      7'd60:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_60;
      7'd61:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_61;
      7'd62:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_62;
      7'd63:
	  CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
	      mb_last_counter_63;
      default: CASE_mb_out_count_mb_last_counter_64_0_mb_last_ETC__q3 =
		   mb_last_counter_64;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bc_bc_avg_energy <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_cur_energy <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_1 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_10 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_11 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_12 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_13 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_14 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_15 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_16 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_17 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_18 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_19 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_2 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_20 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_21 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_22 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_23 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_24 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_25 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_26 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_27 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_28 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_29 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_3 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_30 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_31 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_32 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_33 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_34 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_35 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_36 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_37 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_38 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_39 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_4 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_40 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_41 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_42 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_43 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_44 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_45 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_46 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_47 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_48 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_49 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_5 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_50 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_51 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_52 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_53 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_54 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_55 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_56 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_57 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_58 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_59 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_6 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_60 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_61 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_62 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_63 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_7 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_8 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_buf_9 <= `BSV_ASSIGNMENT_DELAY 26'd0;
	bc_bc_energy_stage <= `BSV_ASSIGNMENT_DELAY 4'd0;
	bc_bc_fp_lin_a <= `BSV_ASSIGNMENT_DELAY 95'd0;
	bc_bc_fp_lin_b <= `BSV_ASSIGNMENT_DELAY 95'd0;
	bc_bc_lin_b <= `BSV_ASSIGNMENT_DELAY 78'd0;
	bc_bc_sample_count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	bc_bc_sqr_energy <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_1 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_10 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_11 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_12 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_13 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_14 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_15 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_16 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_17 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_18 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_19 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_2 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_20 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_21 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_22 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_23 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_24 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_25 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_26 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_27 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_28 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_29 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_3 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_30 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_31 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_32 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_33 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_34 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_35 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_36 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_37 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_38 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_39 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_4 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_40 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_41 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_42 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_43 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_44 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_45 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_46 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_47 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_48 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_49 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_5 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_50 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_51 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_52 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_53 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_54 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_55 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_56 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_57 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_58 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_59 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_6 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_60 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_61 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_62 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_63 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_7 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_8 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_square_buf_9 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	bc_bc_variance <= `BSV_ASSIGNMENT_DELAY 52'd0;
	beat_guess <= `BSV_ASSIGNMENT_DELAY 28'd0;
	mb_counter <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_16 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_17 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_18 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_19 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_20 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_21 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_22 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_23 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_24 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_25 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_26 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_27 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_28 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_29 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_30 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_31 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_32 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_33 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_34 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_35 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_36 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_37 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_38 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_39 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_40 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_41 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_42 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_43 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_44 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_45 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_46 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_47 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_48 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_49 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_50 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_51 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_52 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_53 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_54 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_55 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_56 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_57 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_58 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_59 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_60 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_61 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_62 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_63 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_64 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_16 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_17 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_18 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_19 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_20 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_21 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_22 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_23 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_24 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_25 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_26 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_27 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_28 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_29 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_30 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_31 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_32 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_33 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_34 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_35 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_36 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_37 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_38 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_39 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_40 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_41 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_42 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_43 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_44 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_45 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_46 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_47 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_48 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_49 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_50 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_51 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_52 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_53 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_54 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_55 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_56 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_57 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_58 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_59 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_60 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_61 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_62 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_63 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_64 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_out_count <= `BSV_ASSIGNMENT_DELAY 7'd0;
	mb_tick_pulse <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_16 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_17 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_18 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_19 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_20 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_21 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_22 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_23 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_24 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_25 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_26 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_27 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_28 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_29 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_30 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_31 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_32 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_33 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_34 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_35 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_36 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_37 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_38 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_39 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_40 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_41 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_42 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_43 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_44 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_45 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_46 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_47 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_48 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_49 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_50 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_51 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_52 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_53 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_54 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_55 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_56 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_57 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_58 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_59 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_60 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_61 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_62 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_63 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_64 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mpc <= `BSV_ASSIGNMENT_DELAY 9'd0;
	sync_next <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sync_this <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (bc_bc_avg_energy$EN)
	  bc_bc_avg_energy <= `BSV_ASSIGNMENT_DELAY bc_bc_avg_energy$D_IN;
	if (bc_bc_cur_energy$EN)
	  bc_bc_cur_energy <= `BSV_ASSIGNMENT_DELAY bc_bc_cur_energy$D_IN;
	if (bc_bc_energy_buf$EN)
	  bc_bc_energy_buf <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf$D_IN;
	if (bc_bc_energy_buf_1$EN)
	  bc_bc_energy_buf_1 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_1$D_IN;
	if (bc_bc_energy_buf_10$EN)
	  bc_bc_energy_buf_10 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_10$D_IN;
	if (bc_bc_energy_buf_11$EN)
	  bc_bc_energy_buf_11 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_11$D_IN;
	if (bc_bc_energy_buf_12$EN)
	  bc_bc_energy_buf_12 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_12$D_IN;
	if (bc_bc_energy_buf_13$EN)
	  bc_bc_energy_buf_13 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_13$D_IN;
	if (bc_bc_energy_buf_14$EN)
	  bc_bc_energy_buf_14 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_14$D_IN;
	if (bc_bc_energy_buf_15$EN)
	  bc_bc_energy_buf_15 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_15$D_IN;
	if (bc_bc_energy_buf_16$EN)
	  bc_bc_energy_buf_16 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_16$D_IN;
	if (bc_bc_energy_buf_17$EN)
	  bc_bc_energy_buf_17 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_17$D_IN;
	if (bc_bc_energy_buf_18$EN)
	  bc_bc_energy_buf_18 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_18$D_IN;
	if (bc_bc_energy_buf_19$EN)
	  bc_bc_energy_buf_19 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_19$D_IN;
	if (bc_bc_energy_buf_2$EN)
	  bc_bc_energy_buf_2 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_2$D_IN;
	if (bc_bc_energy_buf_20$EN)
	  bc_bc_energy_buf_20 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_20$D_IN;
	if (bc_bc_energy_buf_21$EN)
	  bc_bc_energy_buf_21 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_21$D_IN;
	if (bc_bc_energy_buf_22$EN)
	  bc_bc_energy_buf_22 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_22$D_IN;
	if (bc_bc_energy_buf_23$EN)
	  bc_bc_energy_buf_23 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_23$D_IN;
	if (bc_bc_energy_buf_24$EN)
	  bc_bc_energy_buf_24 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_24$D_IN;
	if (bc_bc_energy_buf_25$EN)
	  bc_bc_energy_buf_25 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_25$D_IN;
	if (bc_bc_energy_buf_26$EN)
	  bc_bc_energy_buf_26 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_26$D_IN;
	if (bc_bc_energy_buf_27$EN)
	  bc_bc_energy_buf_27 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_27$D_IN;
	if (bc_bc_energy_buf_28$EN)
	  bc_bc_energy_buf_28 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_28$D_IN;
	if (bc_bc_energy_buf_29$EN)
	  bc_bc_energy_buf_29 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_29$D_IN;
	if (bc_bc_energy_buf_3$EN)
	  bc_bc_energy_buf_3 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_3$D_IN;
	if (bc_bc_energy_buf_30$EN)
	  bc_bc_energy_buf_30 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_30$D_IN;
	if (bc_bc_energy_buf_31$EN)
	  bc_bc_energy_buf_31 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_31$D_IN;
	if (bc_bc_energy_buf_32$EN)
	  bc_bc_energy_buf_32 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_32$D_IN;
	if (bc_bc_energy_buf_33$EN)
	  bc_bc_energy_buf_33 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_33$D_IN;
	if (bc_bc_energy_buf_34$EN)
	  bc_bc_energy_buf_34 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_34$D_IN;
	if (bc_bc_energy_buf_35$EN)
	  bc_bc_energy_buf_35 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_35$D_IN;
	if (bc_bc_energy_buf_36$EN)
	  bc_bc_energy_buf_36 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_36$D_IN;
	if (bc_bc_energy_buf_37$EN)
	  bc_bc_energy_buf_37 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_37$D_IN;
	if (bc_bc_energy_buf_38$EN)
	  bc_bc_energy_buf_38 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_38$D_IN;
	if (bc_bc_energy_buf_39$EN)
	  bc_bc_energy_buf_39 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_39$D_IN;
	if (bc_bc_energy_buf_4$EN)
	  bc_bc_energy_buf_4 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_4$D_IN;
	if (bc_bc_energy_buf_40$EN)
	  bc_bc_energy_buf_40 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_40$D_IN;
	if (bc_bc_energy_buf_41$EN)
	  bc_bc_energy_buf_41 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_41$D_IN;
	if (bc_bc_energy_buf_42$EN)
	  bc_bc_energy_buf_42 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_42$D_IN;
	if (bc_bc_energy_buf_43$EN)
	  bc_bc_energy_buf_43 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_43$D_IN;
	if (bc_bc_energy_buf_44$EN)
	  bc_bc_energy_buf_44 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_44$D_IN;
	if (bc_bc_energy_buf_45$EN)
	  bc_bc_energy_buf_45 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_45$D_IN;
	if (bc_bc_energy_buf_46$EN)
	  bc_bc_energy_buf_46 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_46$D_IN;
	if (bc_bc_energy_buf_47$EN)
	  bc_bc_energy_buf_47 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_47$D_IN;
	if (bc_bc_energy_buf_48$EN)
	  bc_bc_energy_buf_48 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_48$D_IN;
	if (bc_bc_energy_buf_49$EN)
	  bc_bc_energy_buf_49 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_49$D_IN;
	if (bc_bc_energy_buf_5$EN)
	  bc_bc_energy_buf_5 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_5$D_IN;
	if (bc_bc_energy_buf_50$EN)
	  bc_bc_energy_buf_50 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_50$D_IN;
	if (bc_bc_energy_buf_51$EN)
	  bc_bc_energy_buf_51 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_51$D_IN;
	if (bc_bc_energy_buf_52$EN)
	  bc_bc_energy_buf_52 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_52$D_IN;
	if (bc_bc_energy_buf_53$EN)
	  bc_bc_energy_buf_53 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_53$D_IN;
	if (bc_bc_energy_buf_54$EN)
	  bc_bc_energy_buf_54 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_54$D_IN;
	if (bc_bc_energy_buf_55$EN)
	  bc_bc_energy_buf_55 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_55$D_IN;
	if (bc_bc_energy_buf_56$EN)
	  bc_bc_energy_buf_56 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_56$D_IN;
	if (bc_bc_energy_buf_57$EN)
	  bc_bc_energy_buf_57 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_57$D_IN;
	if (bc_bc_energy_buf_58$EN)
	  bc_bc_energy_buf_58 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_58$D_IN;
	if (bc_bc_energy_buf_59$EN)
	  bc_bc_energy_buf_59 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_59$D_IN;
	if (bc_bc_energy_buf_6$EN)
	  bc_bc_energy_buf_6 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_6$D_IN;
	if (bc_bc_energy_buf_60$EN)
	  bc_bc_energy_buf_60 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_60$D_IN;
	if (bc_bc_energy_buf_61$EN)
	  bc_bc_energy_buf_61 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_61$D_IN;
	if (bc_bc_energy_buf_62$EN)
	  bc_bc_energy_buf_62 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_62$D_IN;
	if (bc_bc_energy_buf_63$EN)
	  bc_bc_energy_buf_63 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_energy_buf_63$D_IN;
	if (bc_bc_energy_buf_7$EN)
	  bc_bc_energy_buf_7 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_7$D_IN;
	if (bc_bc_energy_buf_8$EN)
	  bc_bc_energy_buf_8 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_8$D_IN;
	if (bc_bc_energy_buf_9$EN)
	  bc_bc_energy_buf_9 <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_buf_9$D_IN;
	if (bc_bc_energy_stage$EN)
	  bc_bc_energy_stage <= `BSV_ASSIGNMENT_DELAY bc_bc_energy_stage$D_IN;
	if (bc_bc_fp_lin_a$EN)
	  bc_bc_fp_lin_a <= `BSV_ASSIGNMENT_DELAY bc_bc_fp_lin_a$D_IN;
	if (bc_bc_fp_lin_b$EN)
	  bc_bc_fp_lin_b <= `BSV_ASSIGNMENT_DELAY bc_bc_fp_lin_b$D_IN;
	if (bc_bc_lin_b$EN)
	  bc_bc_lin_b <= `BSV_ASSIGNMENT_DELAY bc_bc_lin_b$D_IN;
	if (bc_bc_sample_count$EN)
	  bc_bc_sample_count <= `BSV_ASSIGNMENT_DELAY bc_bc_sample_count$D_IN;
	if (bc_bc_sqr_energy$EN)
	  bc_bc_sqr_energy <= `BSV_ASSIGNMENT_DELAY bc_bc_sqr_energy$D_IN;
	if (bc_bc_square_buf$EN)
	  bc_bc_square_buf <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf$D_IN;
	if (bc_bc_square_buf_1$EN)
	  bc_bc_square_buf_1 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_1$D_IN;
	if (bc_bc_square_buf_10$EN)
	  bc_bc_square_buf_10 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_10$D_IN;
	if (bc_bc_square_buf_11$EN)
	  bc_bc_square_buf_11 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_11$D_IN;
	if (bc_bc_square_buf_12$EN)
	  bc_bc_square_buf_12 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_12$D_IN;
	if (bc_bc_square_buf_13$EN)
	  bc_bc_square_buf_13 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_13$D_IN;
	if (bc_bc_square_buf_14$EN)
	  bc_bc_square_buf_14 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_14$D_IN;
	if (bc_bc_square_buf_15$EN)
	  bc_bc_square_buf_15 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_15$D_IN;
	if (bc_bc_square_buf_16$EN)
	  bc_bc_square_buf_16 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_16$D_IN;
	if (bc_bc_square_buf_17$EN)
	  bc_bc_square_buf_17 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_17$D_IN;
	if (bc_bc_square_buf_18$EN)
	  bc_bc_square_buf_18 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_18$D_IN;
	if (bc_bc_square_buf_19$EN)
	  bc_bc_square_buf_19 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_19$D_IN;
	if (bc_bc_square_buf_2$EN)
	  bc_bc_square_buf_2 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_2$D_IN;
	if (bc_bc_square_buf_20$EN)
	  bc_bc_square_buf_20 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_20$D_IN;
	if (bc_bc_square_buf_21$EN)
	  bc_bc_square_buf_21 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_21$D_IN;
	if (bc_bc_square_buf_22$EN)
	  bc_bc_square_buf_22 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_22$D_IN;
	if (bc_bc_square_buf_23$EN)
	  bc_bc_square_buf_23 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_23$D_IN;
	if (bc_bc_square_buf_24$EN)
	  bc_bc_square_buf_24 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_24$D_IN;
	if (bc_bc_square_buf_25$EN)
	  bc_bc_square_buf_25 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_25$D_IN;
	if (bc_bc_square_buf_26$EN)
	  bc_bc_square_buf_26 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_26$D_IN;
	if (bc_bc_square_buf_27$EN)
	  bc_bc_square_buf_27 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_27$D_IN;
	if (bc_bc_square_buf_28$EN)
	  bc_bc_square_buf_28 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_28$D_IN;
	if (bc_bc_square_buf_29$EN)
	  bc_bc_square_buf_29 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_29$D_IN;
	if (bc_bc_square_buf_3$EN)
	  bc_bc_square_buf_3 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_3$D_IN;
	if (bc_bc_square_buf_30$EN)
	  bc_bc_square_buf_30 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_30$D_IN;
	if (bc_bc_square_buf_31$EN)
	  bc_bc_square_buf_31 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_31$D_IN;
	if (bc_bc_square_buf_32$EN)
	  bc_bc_square_buf_32 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_32$D_IN;
	if (bc_bc_square_buf_33$EN)
	  bc_bc_square_buf_33 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_33$D_IN;
	if (bc_bc_square_buf_34$EN)
	  bc_bc_square_buf_34 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_34$D_IN;
	if (bc_bc_square_buf_35$EN)
	  bc_bc_square_buf_35 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_35$D_IN;
	if (bc_bc_square_buf_36$EN)
	  bc_bc_square_buf_36 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_36$D_IN;
	if (bc_bc_square_buf_37$EN)
	  bc_bc_square_buf_37 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_37$D_IN;
	if (bc_bc_square_buf_38$EN)
	  bc_bc_square_buf_38 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_38$D_IN;
	if (bc_bc_square_buf_39$EN)
	  bc_bc_square_buf_39 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_39$D_IN;
	if (bc_bc_square_buf_4$EN)
	  bc_bc_square_buf_4 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_4$D_IN;
	if (bc_bc_square_buf_40$EN)
	  bc_bc_square_buf_40 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_40$D_IN;
	if (bc_bc_square_buf_41$EN)
	  bc_bc_square_buf_41 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_41$D_IN;
	if (bc_bc_square_buf_42$EN)
	  bc_bc_square_buf_42 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_42$D_IN;
	if (bc_bc_square_buf_43$EN)
	  bc_bc_square_buf_43 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_43$D_IN;
	if (bc_bc_square_buf_44$EN)
	  bc_bc_square_buf_44 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_44$D_IN;
	if (bc_bc_square_buf_45$EN)
	  bc_bc_square_buf_45 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_45$D_IN;
	if (bc_bc_square_buf_46$EN)
	  bc_bc_square_buf_46 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_46$D_IN;
	if (bc_bc_square_buf_47$EN)
	  bc_bc_square_buf_47 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_47$D_IN;
	if (bc_bc_square_buf_48$EN)
	  bc_bc_square_buf_48 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_48$D_IN;
	if (bc_bc_square_buf_49$EN)
	  bc_bc_square_buf_49 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_49$D_IN;
	if (bc_bc_square_buf_5$EN)
	  bc_bc_square_buf_5 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_5$D_IN;
	if (bc_bc_square_buf_50$EN)
	  bc_bc_square_buf_50 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_50$D_IN;
	if (bc_bc_square_buf_51$EN)
	  bc_bc_square_buf_51 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_51$D_IN;
	if (bc_bc_square_buf_52$EN)
	  bc_bc_square_buf_52 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_52$D_IN;
	if (bc_bc_square_buf_53$EN)
	  bc_bc_square_buf_53 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_53$D_IN;
	if (bc_bc_square_buf_54$EN)
	  bc_bc_square_buf_54 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_54$D_IN;
	if (bc_bc_square_buf_55$EN)
	  bc_bc_square_buf_55 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_55$D_IN;
	if (bc_bc_square_buf_56$EN)
	  bc_bc_square_buf_56 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_56$D_IN;
	if (bc_bc_square_buf_57$EN)
	  bc_bc_square_buf_57 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_57$D_IN;
	if (bc_bc_square_buf_58$EN)
	  bc_bc_square_buf_58 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_58$D_IN;
	if (bc_bc_square_buf_59$EN)
	  bc_bc_square_buf_59 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_59$D_IN;
	if (bc_bc_square_buf_6$EN)
	  bc_bc_square_buf_6 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_6$D_IN;
	if (bc_bc_square_buf_60$EN)
	  bc_bc_square_buf_60 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_60$D_IN;
	if (bc_bc_square_buf_61$EN)
	  bc_bc_square_buf_61 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_61$D_IN;
	if (bc_bc_square_buf_62$EN)
	  bc_bc_square_buf_62 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_62$D_IN;
	if (bc_bc_square_buf_63$EN)
	  bc_bc_square_buf_63 <= `BSV_ASSIGNMENT_DELAY
	      bc_bc_square_buf_63$D_IN;
	if (bc_bc_square_buf_7$EN)
	  bc_bc_square_buf_7 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_7$D_IN;
	if (bc_bc_square_buf_8$EN)
	  bc_bc_square_buf_8 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_8$D_IN;
	if (bc_bc_square_buf_9$EN)
	  bc_bc_square_buf_9 <= `BSV_ASSIGNMENT_DELAY bc_bc_square_buf_9$D_IN;
	if (bc_bc_variance$EN)
	  bc_bc_variance <= `BSV_ASSIGNMENT_DELAY bc_bc_variance$D_IN;
	if (beat_guess$EN)
	  beat_guess <= `BSV_ASSIGNMENT_DELAY beat_guess$D_IN;
	if (mb_counter$EN)
	  mb_counter <= `BSV_ASSIGNMENT_DELAY mb_counter$D_IN;
	if (mb_counter_1$EN)
	  mb_counter_1 <= `BSV_ASSIGNMENT_DELAY mb_counter_1$D_IN;
	if (mb_counter_10$EN)
	  mb_counter_10 <= `BSV_ASSIGNMENT_DELAY mb_counter_10$D_IN;
	if (mb_counter_11$EN)
	  mb_counter_11 <= `BSV_ASSIGNMENT_DELAY mb_counter_11$D_IN;
	if (mb_counter_12$EN)
	  mb_counter_12 <= `BSV_ASSIGNMENT_DELAY mb_counter_12$D_IN;
	if (mb_counter_13$EN)
	  mb_counter_13 <= `BSV_ASSIGNMENT_DELAY mb_counter_13$D_IN;
	if (mb_counter_14$EN)
	  mb_counter_14 <= `BSV_ASSIGNMENT_DELAY mb_counter_14$D_IN;
	if (mb_counter_15$EN)
	  mb_counter_15 <= `BSV_ASSIGNMENT_DELAY mb_counter_15$D_IN;
	if (mb_counter_16$EN)
	  mb_counter_16 <= `BSV_ASSIGNMENT_DELAY mb_counter_16$D_IN;
	if (mb_counter_17$EN)
	  mb_counter_17 <= `BSV_ASSIGNMENT_DELAY mb_counter_17$D_IN;
	if (mb_counter_18$EN)
	  mb_counter_18 <= `BSV_ASSIGNMENT_DELAY mb_counter_18$D_IN;
	if (mb_counter_19$EN)
	  mb_counter_19 <= `BSV_ASSIGNMENT_DELAY mb_counter_19$D_IN;
	if (mb_counter_2$EN)
	  mb_counter_2 <= `BSV_ASSIGNMENT_DELAY mb_counter_2$D_IN;
	if (mb_counter_20$EN)
	  mb_counter_20 <= `BSV_ASSIGNMENT_DELAY mb_counter_20$D_IN;
	if (mb_counter_21$EN)
	  mb_counter_21 <= `BSV_ASSIGNMENT_DELAY mb_counter_21$D_IN;
	if (mb_counter_22$EN)
	  mb_counter_22 <= `BSV_ASSIGNMENT_DELAY mb_counter_22$D_IN;
	if (mb_counter_23$EN)
	  mb_counter_23 <= `BSV_ASSIGNMENT_DELAY mb_counter_23$D_IN;
	if (mb_counter_24$EN)
	  mb_counter_24 <= `BSV_ASSIGNMENT_DELAY mb_counter_24$D_IN;
	if (mb_counter_25$EN)
	  mb_counter_25 <= `BSV_ASSIGNMENT_DELAY mb_counter_25$D_IN;
	if (mb_counter_26$EN)
	  mb_counter_26 <= `BSV_ASSIGNMENT_DELAY mb_counter_26$D_IN;
	if (mb_counter_27$EN)
	  mb_counter_27 <= `BSV_ASSIGNMENT_DELAY mb_counter_27$D_IN;
	if (mb_counter_28$EN)
	  mb_counter_28 <= `BSV_ASSIGNMENT_DELAY mb_counter_28$D_IN;
	if (mb_counter_29$EN)
	  mb_counter_29 <= `BSV_ASSIGNMENT_DELAY mb_counter_29$D_IN;
	if (mb_counter_3$EN)
	  mb_counter_3 <= `BSV_ASSIGNMENT_DELAY mb_counter_3$D_IN;
	if (mb_counter_30$EN)
	  mb_counter_30 <= `BSV_ASSIGNMENT_DELAY mb_counter_30$D_IN;
	if (mb_counter_31$EN)
	  mb_counter_31 <= `BSV_ASSIGNMENT_DELAY mb_counter_31$D_IN;
	if (mb_counter_32$EN)
	  mb_counter_32 <= `BSV_ASSIGNMENT_DELAY mb_counter_32$D_IN;
	if (mb_counter_33$EN)
	  mb_counter_33 <= `BSV_ASSIGNMENT_DELAY mb_counter_33$D_IN;
	if (mb_counter_34$EN)
	  mb_counter_34 <= `BSV_ASSIGNMENT_DELAY mb_counter_34$D_IN;
	if (mb_counter_35$EN)
	  mb_counter_35 <= `BSV_ASSIGNMENT_DELAY mb_counter_35$D_IN;
	if (mb_counter_36$EN)
	  mb_counter_36 <= `BSV_ASSIGNMENT_DELAY mb_counter_36$D_IN;
	if (mb_counter_37$EN)
	  mb_counter_37 <= `BSV_ASSIGNMENT_DELAY mb_counter_37$D_IN;
	if (mb_counter_38$EN)
	  mb_counter_38 <= `BSV_ASSIGNMENT_DELAY mb_counter_38$D_IN;
	if (mb_counter_39$EN)
	  mb_counter_39 <= `BSV_ASSIGNMENT_DELAY mb_counter_39$D_IN;
	if (mb_counter_4$EN)
	  mb_counter_4 <= `BSV_ASSIGNMENT_DELAY mb_counter_4$D_IN;
	if (mb_counter_40$EN)
	  mb_counter_40 <= `BSV_ASSIGNMENT_DELAY mb_counter_40$D_IN;
	if (mb_counter_41$EN)
	  mb_counter_41 <= `BSV_ASSIGNMENT_DELAY mb_counter_41$D_IN;
	if (mb_counter_42$EN)
	  mb_counter_42 <= `BSV_ASSIGNMENT_DELAY mb_counter_42$D_IN;
	if (mb_counter_43$EN)
	  mb_counter_43 <= `BSV_ASSIGNMENT_DELAY mb_counter_43$D_IN;
	if (mb_counter_44$EN)
	  mb_counter_44 <= `BSV_ASSIGNMENT_DELAY mb_counter_44$D_IN;
	if (mb_counter_45$EN)
	  mb_counter_45 <= `BSV_ASSIGNMENT_DELAY mb_counter_45$D_IN;
	if (mb_counter_46$EN)
	  mb_counter_46 <= `BSV_ASSIGNMENT_DELAY mb_counter_46$D_IN;
	if (mb_counter_47$EN)
	  mb_counter_47 <= `BSV_ASSIGNMENT_DELAY mb_counter_47$D_IN;
	if (mb_counter_48$EN)
	  mb_counter_48 <= `BSV_ASSIGNMENT_DELAY mb_counter_48$D_IN;
	if (mb_counter_49$EN)
	  mb_counter_49 <= `BSV_ASSIGNMENT_DELAY mb_counter_49$D_IN;
	if (mb_counter_5$EN)
	  mb_counter_5 <= `BSV_ASSIGNMENT_DELAY mb_counter_5$D_IN;
	if (mb_counter_50$EN)
	  mb_counter_50 <= `BSV_ASSIGNMENT_DELAY mb_counter_50$D_IN;
	if (mb_counter_51$EN)
	  mb_counter_51 <= `BSV_ASSIGNMENT_DELAY mb_counter_51$D_IN;
	if (mb_counter_52$EN)
	  mb_counter_52 <= `BSV_ASSIGNMENT_DELAY mb_counter_52$D_IN;
	if (mb_counter_53$EN)
	  mb_counter_53 <= `BSV_ASSIGNMENT_DELAY mb_counter_53$D_IN;
	if (mb_counter_54$EN)
	  mb_counter_54 <= `BSV_ASSIGNMENT_DELAY mb_counter_54$D_IN;
	if (mb_counter_55$EN)
	  mb_counter_55 <= `BSV_ASSIGNMENT_DELAY mb_counter_55$D_IN;
	if (mb_counter_56$EN)
	  mb_counter_56 <= `BSV_ASSIGNMENT_DELAY mb_counter_56$D_IN;
	if (mb_counter_57$EN)
	  mb_counter_57 <= `BSV_ASSIGNMENT_DELAY mb_counter_57$D_IN;
	if (mb_counter_58$EN)
	  mb_counter_58 <= `BSV_ASSIGNMENT_DELAY mb_counter_58$D_IN;
	if (mb_counter_59$EN)
	  mb_counter_59 <= `BSV_ASSIGNMENT_DELAY mb_counter_59$D_IN;
	if (mb_counter_6$EN)
	  mb_counter_6 <= `BSV_ASSIGNMENT_DELAY mb_counter_6$D_IN;
	if (mb_counter_60$EN)
	  mb_counter_60 <= `BSV_ASSIGNMENT_DELAY mb_counter_60$D_IN;
	if (mb_counter_61$EN)
	  mb_counter_61 <= `BSV_ASSIGNMENT_DELAY mb_counter_61$D_IN;
	if (mb_counter_62$EN)
	  mb_counter_62 <= `BSV_ASSIGNMENT_DELAY mb_counter_62$D_IN;
	if (mb_counter_63$EN)
	  mb_counter_63 <= `BSV_ASSIGNMENT_DELAY mb_counter_63$D_IN;
	if (mb_counter_64$EN)
	  mb_counter_64 <= `BSV_ASSIGNMENT_DELAY mb_counter_64$D_IN;
	if (mb_counter_7$EN)
	  mb_counter_7 <= `BSV_ASSIGNMENT_DELAY mb_counter_7$D_IN;
	if (mb_counter_8$EN)
	  mb_counter_8 <= `BSV_ASSIGNMENT_DELAY mb_counter_8$D_IN;
	if (mb_counter_9$EN)
	  mb_counter_9 <= `BSV_ASSIGNMENT_DELAY mb_counter_9$D_IN;
	if (mb_last_counter$EN)
	  mb_last_counter <= `BSV_ASSIGNMENT_DELAY mb_last_counter$D_IN;
	if (mb_last_counter_1$EN)
	  mb_last_counter_1 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_1$D_IN;
	if (mb_last_counter_10$EN)
	  mb_last_counter_10 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_10$D_IN;
	if (mb_last_counter_11$EN)
	  mb_last_counter_11 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_11$D_IN;
	if (mb_last_counter_12$EN)
	  mb_last_counter_12 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_12$D_IN;
	if (mb_last_counter_13$EN)
	  mb_last_counter_13 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_13$D_IN;
	if (mb_last_counter_14$EN)
	  mb_last_counter_14 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_14$D_IN;
	if (mb_last_counter_15$EN)
	  mb_last_counter_15 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_15$D_IN;
	if (mb_last_counter_16$EN)
	  mb_last_counter_16 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_16$D_IN;
	if (mb_last_counter_17$EN)
	  mb_last_counter_17 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_17$D_IN;
	if (mb_last_counter_18$EN)
	  mb_last_counter_18 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_18$D_IN;
	if (mb_last_counter_19$EN)
	  mb_last_counter_19 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_19$D_IN;
	if (mb_last_counter_2$EN)
	  mb_last_counter_2 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_2$D_IN;
	if (mb_last_counter_20$EN)
	  mb_last_counter_20 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_20$D_IN;
	if (mb_last_counter_21$EN)
	  mb_last_counter_21 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_21$D_IN;
	if (mb_last_counter_22$EN)
	  mb_last_counter_22 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_22$D_IN;
	if (mb_last_counter_23$EN)
	  mb_last_counter_23 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_23$D_IN;
	if (mb_last_counter_24$EN)
	  mb_last_counter_24 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_24$D_IN;
	if (mb_last_counter_25$EN)
	  mb_last_counter_25 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_25$D_IN;
	if (mb_last_counter_26$EN)
	  mb_last_counter_26 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_26$D_IN;
	if (mb_last_counter_27$EN)
	  mb_last_counter_27 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_27$D_IN;
	if (mb_last_counter_28$EN)
	  mb_last_counter_28 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_28$D_IN;
	if (mb_last_counter_29$EN)
	  mb_last_counter_29 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_29$D_IN;
	if (mb_last_counter_3$EN)
	  mb_last_counter_3 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_3$D_IN;
	if (mb_last_counter_30$EN)
	  mb_last_counter_30 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_30$D_IN;
	if (mb_last_counter_31$EN)
	  mb_last_counter_31 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_31$D_IN;
	if (mb_last_counter_32$EN)
	  mb_last_counter_32 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_32$D_IN;
	if (mb_last_counter_33$EN)
	  mb_last_counter_33 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_33$D_IN;
	if (mb_last_counter_34$EN)
	  mb_last_counter_34 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_34$D_IN;
	if (mb_last_counter_35$EN)
	  mb_last_counter_35 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_35$D_IN;
	if (mb_last_counter_36$EN)
	  mb_last_counter_36 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_36$D_IN;
	if (mb_last_counter_37$EN)
	  mb_last_counter_37 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_37$D_IN;
	if (mb_last_counter_38$EN)
	  mb_last_counter_38 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_38$D_IN;
	if (mb_last_counter_39$EN)
	  mb_last_counter_39 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_39$D_IN;
	if (mb_last_counter_4$EN)
	  mb_last_counter_4 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_4$D_IN;
	if (mb_last_counter_40$EN)
	  mb_last_counter_40 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_40$D_IN;
	if (mb_last_counter_41$EN)
	  mb_last_counter_41 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_41$D_IN;
	if (mb_last_counter_42$EN)
	  mb_last_counter_42 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_42$D_IN;
	if (mb_last_counter_43$EN)
	  mb_last_counter_43 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_43$D_IN;
	if (mb_last_counter_44$EN)
	  mb_last_counter_44 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_44$D_IN;
	if (mb_last_counter_45$EN)
	  mb_last_counter_45 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_45$D_IN;
	if (mb_last_counter_46$EN)
	  mb_last_counter_46 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_46$D_IN;
	if (mb_last_counter_47$EN)
	  mb_last_counter_47 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_47$D_IN;
	if (mb_last_counter_48$EN)
	  mb_last_counter_48 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_48$D_IN;
	if (mb_last_counter_49$EN)
	  mb_last_counter_49 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_49$D_IN;
	if (mb_last_counter_5$EN)
	  mb_last_counter_5 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_5$D_IN;
	if (mb_last_counter_50$EN)
	  mb_last_counter_50 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_50$D_IN;
	if (mb_last_counter_51$EN)
	  mb_last_counter_51 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_51$D_IN;
	if (mb_last_counter_52$EN)
	  mb_last_counter_52 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_52$D_IN;
	if (mb_last_counter_53$EN)
	  mb_last_counter_53 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_53$D_IN;
	if (mb_last_counter_54$EN)
	  mb_last_counter_54 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_54$D_IN;
	if (mb_last_counter_55$EN)
	  mb_last_counter_55 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_55$D_IN;
	if (mb_last_counter_56$EN)
	  mb_last_counter_56 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_56$D_IN;
	if (mb_last_counter_57$EN)
	  mb_last_counter_57 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_57$D_IN;
	if (mb_last_counter_58$EN)
	  mb_last_counter_58 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_58$D_IN;
	if (mb_last_counter_59$EN)
	  mb_last_counter_59 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_59$D_IN;
	if (mb_last_counter_6$EN)
	  mb_last_counter_6 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_6$D_IN;
	if (mb_last_counter_60$EN)
	  mb_last_counter_60 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_60$D_IN;
	if (mb_last_counter_61$EN)
	  mb_last_counter_61 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_61$D_IN;
	if (mb_last_counter_62$EN)
	  mb_last_counter_62 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_62$D_IN;
	if (mb_last_counter_63$EN)
	  mb_last_counter_63 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_63$D_IN;
	if (mb_last_counter_64$EN)
	  mb_last_counter_64 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_64$D_IN;
	if (mb_last_counter_7$EN)
	  mb_last_counter_7 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_7$D_IN;
	if (mb_last_counter_8$EN)
	  mb_last_counter_8 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_8$D_IN;
	if (mb_last_counter_9$EN)
	  mb_last_counter_9 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_9$D_IN;
	if (mb_out_count$EN)
	  mb_out_count <= `BSV_ASSIGNMENT_DELAY mb_out_count$D_IN;
	if (mb_tick_pulse$EN)
	  mb_tick_pulse <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse$D_IN;
	if (mb_tick_pulse_1$EN)
	  mb_tick_pulse_1 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_1$D_IN;
	if (mb_tick_pulse_10$EN)
	  mb_tick_pulse_10 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_10$D_IN;
	if (mb_tick_pulse_11$EN)
	  mb_tick_pulse_11 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_11$D_IN;
	if (mb_tick_pulse_12$EN)
	  mb_tick_pulse_12 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_12$D_IN;
	if (mb_tick_pulse_13$EN)
	  mb_tick_pulse_13 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_13$D_IN;
	if (mb_tick_pulse_14$EN)
	  mb_tick_pulse_14 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_14$D_IN;
	if (mb_tick_pulse_15$EN)
	  mb_tick_pulse_15 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_15$D_IN;
	if (mb_tick_pulse_16$EN)
	  mb_tick_pulse_16 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_16$D_IN;
	if (mb_tick_pulse_17$EN)
	  mb_tick_pulse_17 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_17$D_IN;
	if (mb_tick_pulse_18$EN)
	  mb_tick_pulse_18 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_18$D_IN;
	if (mb_tick_pulse_19$EN)
	  mb_tick_pulse_19 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_19$D_IN;
	if (mb_tick_pulse_2$EN)
	  mb_tick_pulse_2 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_2$D_IN;
	if (mb_tick_pulse_20$EN)
	  mb_tick_pulse_20 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_20$D_IN;
	if (mb_tick_pulse_21$EN)
	  mb_tick_pulse_21 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_21$D_IN;
	if (mb_tick_pulse_22$EN)
	  mb_tick_pulse_22 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_22$D_IN;
	if (mb_tick_pulse_23$EN)
	  mb_tick_pulse_23 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_23$D_IN;
	if (mb_tick_pulse_24$EN)
	  mb_tick_pulse_24 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_24$D_IN;
	if (mb_tick_pulse_25$EN)
	  mb_tick_pulse_25 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_25$D_IN;
	if (mb_tick_pulse_26$EN)
	  mb_tick_pulse_26 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_26$D_IN;
	if (mb_tick_pulse_27$EN)
	  mb_tick_pulse_27 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_27$D_IN;
	if (mb_tick_pulse_28$EN)
	  mb_tick_pulse_28 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_28$D_IN;
	if (mb_tick_pulse_29$EN)
	  mb_tick_pulse_29 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_29$D_IN;
	if (mb_tick_pulse_3$EN)
	  mb_tick_pulse_3 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_3$D_IN;
	if (mb_tick_pulse_30$EN)
	  mb_tick_pulse_30 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_30$D_IN;
	if (mb_tick_pulse_31$EN)
	  mb_tick_pulse_31 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_31$D_IN;
	if (mb_tick_pulse_32$EN)
	  mb_tick_pulse_32 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_32$D_IN;
	if (mb_tick_pulse_33$EN)
	  mb_tick_pulse_33 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_33$D_IN;
	if (mb_tick_pulse_34$EN)
	  mb_tick_pulse_34 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_34$D_IN;
	if (mb_tick_pulse_35$EN)
	  mb_tick_pulse_35 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_35$D_IN;
	if (mb_tick_pulse_36$EN)
	  mb_tick_pulse_36 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_36$D_IN;
	if (mb_tick_pulse_37$EN)
	  mb_tick_pulse_37 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_37$D_IN;
	if (mb_tick_pulse_38$EN)
	  mb_tick_pulse_38 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_38$D_IN;
	if (mb_tick_pulse_39$EN)
	  mb_tick_pulse_39 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_39$D_IN;
	if (mb_tick_pulse_4$EN)
	  mb_tick_pulse_4 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_4$D_IN;
	if (mb_tick_pulse_40$EN)
	  mb_tick_pulse_40 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_40$D_IN;
	if (mb_tick_pulse_41$EN)
	  mb_tick_pulse_41 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_41$D_IN;
	if (mb_tick_pulse_42$EN)
	  mb_tick_pulse_42 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_42$D_IN;
	if (mb_tick_pulse_43$EN)
	  mb_tick_pulse_43 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_43$D_IN;
	if (mb_tick_pulse_44$EN)
	  mb_tick_pulse_44 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_44$D_IN;
	if (mb_tick_pulse_45$EN)
	  mb_tick_pulse_45 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_45$D_IN;
	if (mb_tick_pulse_46$EN)
	  mb_tick_pulse_46 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_46$D_IN;
	if (mb_tick_pulse_47$EN)
	  mb_tick_pulse_47 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_47$D_IN;
	if (mb_tick_pulse_48$EN)
	  mb_tick_pulse_48 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_48$D_IN;
	if (mb_tick_pulse_49$EN)
	  mb_tick_pulse_49 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_49$D_IN;
	if (mb_tick_pulse_5$EN)
	  mb_tick_pulse_5 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_5$D_IN;
	if (mb_tick_pulse_50$EN)
	  mb_tick_pulse_50 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_50$D_IN;
	if (mb_tick_pulse_51$EN)
	  mb_tick_pulse_51 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_51$D_IN;
	if (mb_tick_pulse_52$EN)
	  mb_tick_pulse_52 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_52$D_IN;
	if (mb_tick_pulse_53$EN)
	  mb_tick_pulse_53 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_53$D_IN;
	if (mb_tick_pulse_54$EN)
	  mb_tick_pulse_54 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_54$D_IN;
	if (mb_tick_pulse_55$EN)
	  mb_tick_pulse_55 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_55$D_IN;
	if (mb_tick_pulse_56$EN)
	  mb_tick_pulse_56 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_56$D_IN;
	if (mb_tick_pulse_57$EN)
	  mb_tick_pulse_57 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_57$D_IN;
	if (mb_tick_pulse_58$EN)
	  mb_tick_pulse_58 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_58$D_IN;
	if (mb_tick_pulse_59$EN)
	  mb_tick_pulse_59 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_59$D_IN;
	if (mb_tick_pulse_6$EN)
	  mb_tick_pulse_6 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_6$D_IN;
	if (mb_tick_pulse_60$EN)
	  mb_tick_pulse_60 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_60$D_IN;
	if (mb_tick_pulse_61$EN)
	  mb_tick_pulse_61 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_61$D_IN;
	if (mb_tick_pulse_62$EN)
	  mb_tick_pulse_62 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_62$D_IN;
	if (mb_tick_pulse_63$EN)
	  mb_tick_pulse_63 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_63$D_IN;
	if (mb_tick_pulse_64$EN)
	  mb_tick_pulse_64 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_64$D_IN;
	if (mb_tick_pulse_7$EN)
	  mb_tick_pulse_7 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_7$D_IN;
	if (mb_tick_pulse_8$EN)
	  mb_tick_pulse_8 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_8$D_IN;
	if (mb_tick_pulse_9$EN)
	  mb_tick_pulse_9 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_9$D_IN;
	if (mpc$EN) mpc <= `BSV_ASSIGNMENT_DELAY mpc$D_IN;
	if (sync_next$EN) sync_next <= `BSV_ASSIGNMENT_DELAY sync_next$D_IN;
	if (sync_this$EN) sync_this <= `BSV_ASSIGNMENT_DELAY sync_this$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bc_bc_avg_energy = 26'h2AAAAAA;
    bc_bc_cur_energy = 26'h2AAAAAA;
    bc_bc_energy_buf = 26'h2AAAAAA;
    bc_bc_energy_buf_1 = 26'h2AAAAAA;
    bc_bc_energy_buf_10 = 26'h2AAAAAA;
    bc_bc_energy_buf_11 = 26'h2AAAAAA;
    bc_bc_energy_buf_12 = 26'h2AAAAAA;
    bc_bc_energy_buf_13 = 26'h2AAAAAA;
    bc_bc_energy_buf_14 = 26'h2AAAAAA;
    bc_bc_energy_buf_15 = 26'h2AAAAAA;
    bc_bc_energy_buf_16 = 26'h2AAAAAA;
    bc_bc_energy_buf_17 = 26'h2AAAAAA;
    bc_bc_energy_buf_18 = 26'h2AAAAAA;
    bc_bc_energy_buf_19 = 26'h2AAAAAA;
    bc_bc_energy_buf_2 = 26'h2AAAAAA;
    bc_bc_energy_buf_20 = 26'h2AAAAAA;
    bc_bc_energy_buf_21 = 26'h2AAAAAA;
    bc_bc_energy_buf_22 = 26'h2AAAAAA;
    bc_bc_energy_buf_23 = 26'h2AAAAAA;
    bc_bc_energy_buf_24 = 26'h2AAAAAA;
    bc_bc_energy_buf_25 = 26'h2AAAAAA;
    bc_bc_energy_buf_26 = 26'h2AAAAAA;
    bc_bc_energy_buf_27 = 26'h2AAAAAA;
    bc_bc_energy_buf_28 = 26'h2AAAAAA;
    bc_bc_energy_buf_29 = 26'h2AAAAAA;
    bc_bc_energy_buf_3 = 26'h2AAAAAA;
    bc_bc_energy_buf_30 = 26'h2AAAAAA;
    bc_bc_energy_buf_31 = 26'h2AAAAAA;
    bc_bc_energy_buf_32 = 26'h2AAAAAA;
    bc_bc_energy_buf_33 = 26'h2AAAAAA;
    bc_bc_energy_buf_34 = 26'h2AAAAAA;
    bc_bc_energy_buf_35 = 26'h2AAAAAA;
    bc_bc_energy_buf_36 = 26'h2AAAAAA;
    bc_bc_energy_buf_37 = 26'h2AAAAAA;
    bc_bc_energy_buf_38 = 26'h2AAAAAA;
    bc_bc_energy_buf_39 = 26'h2AAAAAA;
    bc_bc_energy_buf_4 = 26'h2AAAAAA;
    bc_bc_energy_buf_40 = 26'h2AAAAAA;
    bc_bc_energy_buf_41 = 26'h2AAAAAA;
    bc_bc_energy_buf_42 = 26'h2AAAAAA;
    bc_bc_energy_buf_43 = 26'h2AAAAAA;
    bc_bc_energy_buf_44 = 26'h2AAAAAA;
    bc_bc_energy_buf_45 = 26'h2AAAAAA;
    bc_bc_energy_buf_46 = 26'h2AAAAAA;
    bc_bc_energy_buf_47 = 26'h2AAAAAA;
    bc_bc_energy_buf_48 = 26'h2AAAAAA;
    bc_bc_energy_buf_49 = 26'h2AAAAAA;
    bc_bc_energy_buf_5 = 26'h2AAAAAA;
    bc_bc_energy_buf_50 = 26'h2AAAAAA;
    bc_bc_energy_buf_51 = 26'h2AAAAAA;
    bc_bc_energy_buf_52 = 26'h2AAAAAA;
    bc_bc_energy_buf_53 = 26'h2AAAAAA;
    bc_bc_energy_buf_54 = 26'h2AAAAAA;
    bc_bc_energy_buf_55 = 26'h2AAAAAA;
    bc_bc_energy_buf_56 = 26'h2AAAAAA;
    bc_bc_energy_buf_57 = 26'h2AAAAAA;
    bc_bc_energy_buf_58 = 26'h2AAAAAA;
    bc_bc_energy_buf_59 = 26'h2AAAAAA;
    bc_bc_energy_buf_6 = 26'h2AAAAAA;
    bc_bc_energy_buf_60 = 26'h2AAAAAA;
    bc_bc_energy_buf_61 = 26'h2AAAAAA;
    bc_bc_energy_buf_62 = 26'h2AAAAAA;
    bc_bc_energy_buf_63 = 26'h2AAAAAA;
    bc_bc_energy_buf_7 = 26'h2AAAAAA;
    bc_bc_energy_buf_8 = 26'h2AAAAAA;
    bc_bc_energy_buf_9 = 26'h2AAAAAA;
    bc_bc_energy_stage = 4'hA;
    bc_bc_fp_lin_a = 95'h2AAAAAAAAAAAAAAAAAAAAAAA;
    bc_bc_fp_lin_b = 95'h2AAAAAAAAAAAAAAAAAAAAAAA;
    bc_bc_lin_b = 78'h2AAAAAAAAAAAAAAAAAAA;
    bc_bc_sample_count = 10'h2AA;
    bc_bc_sqr_energy = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_1 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_10 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_11 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_12 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_13 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_14 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_15 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_16 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_17 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_18 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_19 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_2 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_20 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_21 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_22 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_23 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_24 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_25 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_26 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_27 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_28 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_29 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_3 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_30 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_31 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_32 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_33 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_34 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_35 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_36 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_37 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_38 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_39 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_4 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_40 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_41 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_42 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_43 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_44 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_45 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_46 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_47 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_48 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_49 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_5 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_50 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_51 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_52 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_53 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_54 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_55 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_56 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_57 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_58 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_59 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_6 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_60 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_61 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_62 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_63 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_7 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_8 = 52'hAAAAAAAAAAAAA;
    bc_bc_square_buf_9 = 52'hAAAAAAAAAAAAA;
    bc_bc_variance = 52'hAAAAAAAAAAAAA;
    beat_guess = 28'hAAAAAAA;
    mb_counter = 22'h2AAAAA;
    mb_counter_1 = 22'h2AAAAA;
    mb_counter_10 = 22'h2AAAAA;
    mb_counter_11 = 22'h2AAAAA;
    mb_counter_12 = 22'h2AAAAA;
    mb_counter_13 = 22'h2AAAAA;
    mb_counter_14 = 22'h2AAAAA;
    mb_counter_15 = 22'h2AAAAA;
    mb_counter_16 = 22'h2AAAAA;
    mb_counter_17 = 22'h2AAAAA;
    mb_counter_18 = 22'h2AAAAA;
    mb_counter_19 = 22'h2AAAAA;
    mb_counter_2 = 22'h2AAAAA;
    mb_counter_20 = 22'h2AAAAA;
    mb_counter_21 = 22'h2AAAAA;
    mb_counter_22 = 22'h2AAAAA;
    mb_counter_23 = 22'h2AAAAA;
    mb_counter_24 = 22'h2AAAAA;
    mb_counter_25 = 22'h2AAAAA;
    mb_counter_26 = 22'h2AAAAA;
    mb_counter_27 = 22'h2AAAAA;
    mb_counter_28 = 22'h2AAAAA;
    mb_counter_29 = 22'h2AAAAA;
    mb_counter_3 = 22'h2AAAAA;
    mb_counter_30 = 22'h2AAAAA;
    mb_counter_31 = 22'h2AAAAA;
    mb_counter_32 = 22'h2AAAAA;
    mb_counter_33 = 22'h2AAAAA;
    mb_counter_34 = 22'h2AAAAA;
    mb_counter_35 = 22'h2AAAAA;
    mb_counter_36 = 22'h2AAAAA;
    mb_counter_37 = 22'h2AAAAA;
    mb_counter_38 = 22'h2AAAAA;
    mb_counter_39 = 22'h2AAAAA;
    mb_counter_4 = 22'h2AAAAA;
    mb_counter_40 = 22'h2AAAAA;
    mb_counter_41 = 22'h2AAAAA;
    mb_counter_42 = 22'h2AAAAA;
    mb_counter_43 = 22'h2AAAAA;
    mb_counter_44 = 22'h2AAAAA;
    mb_counter_45 = 22'h2AAAAA;
    mb_counter_46 = 22'h2AAAAA;
    mb_counter_47 = 22'h2AAAAA;
    mb_counter_48 = 22'h2AAAAA;
    mb_counter_49 = 22'h2AAAAA;
    mb_counter_5 = 22'h2AAAAA;
    mb_counter_50 = 22'h2AAAAA;
    mb_counter_51 = 22'h2AAAAA;
    mb_counter_52 = 22'h2AAAAA;
    mb_counter_53 = 22'h2AAAAA;
    mb_counter_54 = 22'h2AAAAA;
    mb_counter_55 = 22'h2AAAAA;
    mb_counter_56 = 22'h2AAAAA;
    mb_counter_57 = 22'h2AAAAA;
    mb_counter_58 = 22'h2AAAAA;
    mb_counter_59 = 22'h2AAAAA;
    mb_counter_6 = 22'h2AAAAA;
    mb_counter_60 = 22'h2AAAAA;
    mb_counter_61 = 22'h2AAAAA;
    mb_counter_62 = 22'h2AAAAA;
    mb_counter_63 = 22'h2AAAAA;
    mb_counter_64 = 22'h2AAAAA;
    mb_counter_7 = 22'h2AAAAA;
    mb_counter_8 = 22'h2AAAAA;
    mb_counter_9 = 22'h2AAAAA;
    mb_last_counter = 22'h2AAAAA;
    mb_last_counter_1 = 22'h2AAAAA;
    mb_last_counter_10 = 22'h2AAAAA;
    mb_last_counter_11 = 22'h2AAAAA;
    mb_last_counter_12 = 22'h2AAAAA;
    mb_last_counter_13 = 22'h2AAAAA;
    mb_last_counter_14 = 22'h2AAAAA;
    mb_last_counter_15 = 22'h2AAAAA;
    mb_last_counter_16 = 22'h2AAAAA;
    mb_last_counter_17 = 22'h2AAAAA;
    mb_last_counter_18 = 22'h2AAAAA;
    mb_last_counter_19 = 22'h2AAAAA;
    mb_last_counter_2 = 22'h2AAAAA;
    mb_last_counter_20 = 22'h2AAAAA;
    mb_last_counter_21 = 22'h2AAAAA;
    mb_last_counter_22 = 22'h2AAAAA;
    mb_last_counter_23 = 22'h2AAAAA;
    mb_last_counter_24 = 22'h2AAAAA;
    mb_last_counter_25 = 22'h2AAAAA;
    mb_last_counter_26 = 22'h2AAAAA;
    mb_last_counter_27 = 22'h2AAAAA;
    mb_last_counter_28 = 22'h2AAAAA;
    mb_last_counter_29 = 22'h2AAAAA;
    mb_last_counter_3 = 22'h2AAAAA;
    mb_last_counter_30 = 22'h2AAAAA;
    mb_last_counter_31 = 22'h2AAAAA;
    mb_last_counter_32 = 22'h2AAAAA;
    mb_last_counter_33 = 22'h2AAAAA;
    mb_last_counter_34 = 22'h2AAAAA;
    mb_last_counter_35 = 22'h2AAAAA;
    mb_last_counter_36 = 22'h2AAAAA;
    mb_last_counter_37 = 22'h2AAAAA;
    mb_last_counter_38 = 22'h2AAAAA;
    mb_last_counter_39 = 22'h2AAAAA;
    mb_last_counter_4 = 22'h2AAAAA;
    mb_last_counter_40 = 22'h2AAAAA;
    mb_last_counter_41 = 22'h2AAAAA;
    mb_last_counter_42 = 22'h2AAAAA;
    mb_last_counter_43 = 22'h2AAAAA;
    mb_last_counter_44 = 22'h2AAAAA;
    mb_last_counter_45 = 22'h2AAAAA;
    mb_last_counter_46 = 22'h2AAAAA;
    mb_last_counter_47 = 22'h2AAAAA;
    mb_last_counter_48 = 22'h2AAAAA;
    mb_last_counter_49 = 22'h2AAAAA;
    mb_last_counter_5 = 22'h2AAAAA;
    mb_last_counter_50 = 22'h2AAAAA;
    mb_last_counter_51 = 22'h2AAAAA;
    mb_last_counter_52 = 22'h2AAAAA;
    mb_last_counter_53 = 22'h2AAAAA;
    mb_last_counter_54 = 22'h2AAAAA;
    mb_last_counter_55 = 22'h2AAAAA;
    mb_last_counter_56 = 22'h2AAAAA;
    mb_last_counter_57 = 22'h2AAAAA;
    mb_last_counter_58 = 22'h2AAAAA;
    mb_last_counter_59 = 22'h2AAAAA;
    mb_last_counter_6 = 22'h2AAAAA;
    mb_last_counter_60 = 22'h2AAAAA;
    mb_last_counter_61 = 22'h2AAAAA;
    mb_last_counter_62 = 22'h2AAAAA;
    mb_last_counter_63 = 22'h2AAAAA;
    mb_last_counter_64 = 22'h2AAAAA;
    mb_last_counter_7 = 22'h2AAAAA;
    mb_last_counter_8 = 22'h2AAAAA;
    mb_last_counter_9 = 22'h2AAAAA;
    mb_out_count = 7'h2A;
    mb_tick_pulse = 1'h0;
    mb_tick_pulse_1 = 1'h0;
    mb_tick_pulse_10 = 1'h0;
    mb_tick_pulse_11 = 1'h0;
    mb_tick_pulse_12 = 1'h0;
    mb_tick_pulse_13 = 1'h0;
    mb_tick_pulse_14 = 1'h0;
    mb_tick_pulse_15 = 1'h0;
    mb_tick_pulse_16 = 1'h0;
    mb_tick_pulse_17 = 1'h0;
    mb_tick_pulse_18 = 1'h0;
    mb_tick_pulse_19 = 1'h0;
    mb_tick_pulse_2 = 1'h0;
    mb_tick_pulse_20 = 1'h0;
    mb_tick_pulse_21 = 1'h0;
    mb_tick_pulse_22 = 1'h0;
    mb_tick_pulse_23 = 1'h0;
    mb_tick_pulse_24 = 1'h0;
    mb_tick_pulse_25 = 1'h0;
    mb_tick_pulse_26 = 1'h0;
    mb_tick_pulse_27 = 1'h0;
    mb_tick_pulse_28 = 1'h0;
    mb_tick_pulse_29 = 1'h0;
    mb_tick_pulse_3 = 1'h0;
    mb_tick_pulse_30 = 1'h0;
    mb_tick_pulse_31 = 1'h0;
    mb_tick_pulse_32 = 1'h0;
    mb_tick_pulse_33 = 1'h0;
    mb_tick_pulse_34 = 1'h0;
    mb_tick_pulse_35 = 1'h0;
    mb_tick_pulse_36 = 1'h0;
    mb_tick_pulse_37 = 1'h0;
    mb_tick_pulse_38 = 1'h0;
    mb_tick_pulse_39 = 1'h0;
    mb_tick_pulse_4 = 1'h0;
    mb_tick_pulse_40 = 1'h0;
    mb_tick_pulse_41 = 1'h0;
    mb_tick_pulse_42 = 1'h0;
    mb_tick_pulse_43 = 1'h0;
    mb_tick_pulse_44 = 1'h0;
    mb_tick_pulse_45 = 1'h0;
    mb_tick_pulse_46 = 1'h0;
    mb_tick_pulse_47 = 1'h0;
    mb_tick_pulse_48 = 1'h0;
    mb_tick_pulse_49 = 1'h0;
    mb_tick_pulse_5 = 1'h0;
    mb_tick_pulse_50 = 1'h0;
    mb_tick_pulse_51 = 1'h0;
    mb_tick_pulse_52 = 1'h0;
    mb_tick_pulse_53 = 1'h0;
    mb_tick_pulse_54 = 1'h0;
    mb_tick_pulse_55 = 1'h0;
    mb_tick_pulse_56 = 1'h0;
    mb_tick_pulse_57 = 1'h0;
    mb_tick_pulse_58 = 1'h0;
    mb_tick_pulse_59 = 1'h0;
    mb_tick_pulse_6 = 1'h0;
    mb_tick_pulse_60 = 1'h0;
    mb_tick_pulse_61 = 1'h0;
    mb_tick_pulse_62 = 1'h0;
    mb_tick_pulse_63 = 1'h0;
    mb_tick_pulse_64 = 1'h0;
    mb_tick_pulse_7 = 1'h0;
    mb_tick_pulse_8 = 1'h0;
    mb_tick_pulse_9 = 1'h0;
    mpc = 9'h0AA;
    sync_next = 1'h0;
    sync_this = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_bc_energy_calc_4 &&
	  NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255)
	$write("UNS ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_bc_energy_calc_4 &&
	  NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255)
	$write("%d", $unsigned(bc_bc_cur_energy));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_bc_energy_calc_4 &&
	  NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255)
	$write("/");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_bc_energy_calc_4 &&
	  NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255)
	$write("%d", $unsigned(bc_bc_avg_energy));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_bc_energy_calc_4 &&
	  NOT_0_CONCAT_bc_bc_energy_buf_63_66_49_CONCAT__ETC___d255)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkBeatTracker

