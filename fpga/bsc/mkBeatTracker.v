//
// Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
//
// On Fri Apr 26 02:04:09 EDT 2013
//
// Method conflict info:
// Method: q_sync
// Conflict-free: putSampleInput, getBeatInfo
// Conflicts: q_sync
//
// Method: putSampleInput
// Conflict-free: q_sync, getBeatInfo
// Conflicts: putSampleInput
//
// Method: getBeatInfo
// Conflict-free: q_sync, putSampleInput
// Conflicts: getBeatInfo
//
//
// Ports:
// Name                         I/O  size props
// RDY_q_sync                     O     1
// RDY_putSampleInput             O     1 reg
// getBeatInfo                    O     8 reg
// RDY_getBeatInfo                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putSampleInput_in              I    14 reg
// EN_q_sync                      I     1
// EN_putSampleInput              I     1
// EN_getBeatInfo                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBeatTracker(CLK,
		     RST_N,

		     EN_q_sync,
		     RDY_q_sync,

		     putSampleInput_in,
		     EN_putSampleInput,
		     RDY_putSampleInput,

		     EN_getBeatInfo,
		     getBeatInfo,
		     RDY_getBeatInfo);
  input  CLK;
  input  RST_N;

  // action method q_sync
  input  EN_q_sync;
  output RDY_q_sync;

  // action method putSampleInput
  input  [13 : 0] putSampleInput_in;
  input  EN_putSampleInput;
  output RDY_putSampleInput;

  // actionvalue method getBeatInfo
  input  EN_getBeatInfo;
  output [7 : 0] getBeatInfo;
  output RDY_getBeatInfo;

  // signals for module outputs
  wire [7 : 0] getBeatInfo;
  wire RDY_getBeatInfo, RDY_putSampleInput, RDY_q_sync;

  // register bc_avg_energy
  reg [27 : 0] bc_avg_energy;
  wire [27 : 0] bc_avg_energy$D_IN;
  wire bc_avg_energy$EN;

  // register bc_cur_energy
  reg [27 : 0] bc_cur_energy;
  wire [27 : 0] bc_cur_energy$D_IN;
  wire bc_cur_energy$EN;

  // register bc_sample_count
  reg [11 : 0] bc_sample_count;
  wire [11 : 0] bc_sample_count$D_IN;
  wire bc_sample_count$EN;

  // register beat_guess
  reg [27 : 0] beat_guess;
  wire [27 : 0] beat_guess$D_IN;
  wire beat_guess$EN;

  // register init_done
  reg init_done;
  wire init_done$D_IN, init_done$EN;

  // register mb_counter
  reg [21 : 0] mb_counter;
  wire [21 : 0] mb_counter$D_IN;
  wire mb_counter$EN;

  // register mb_counter_1
  reg [21 : 0] mb_counter_1;
  wire [21 : 0] mb_counter_1$D_IN;
  wire mb_counter_1$EN;

  // register mb_counter_10
  reg [21 : 0] mb_counter_10;
  wire [21 : 0] mb_counter_10$D_IN;
  wire mb_counter_10$EN;

  // register mb_counter_11
  reg [21 : 0] mb_counter_11;
  wire [21 : 0] mb_counter_11$D_IN;
  wire mb_counter_11$EN;

  // register mb_counter_12
  reg [21 : 0] mb_counter_12;
  wire [21 : 0] mb_counter_12$D_IN;
  wire mb_counter_12$EN;

  // register mb_counter_13
  reg [21 : 0] mb_counter_13;
  wire [21 : 0] mb_counter_13$D_IN;
  wire mb_counter_13$EN;

  // register mb_counter_14
  reg [21 : 0] mb_counter_14;
  wire [21 : 0] mb_counter_14$D_IN;
  wire mb_counter_14$EN;

  // register mb_counter_15
  reg [21 : 0] mb_counter_15;
  wire [21 : 0] mb_counter_15$D_IN;
  wire mb_counter_15$EN;

  // register mb_counter_16
  reg [21 : 0] mb_counter_16;
  wire [21 : 0] mb_counter_16$D_IN;
  wire mb_counter_16$EN;

  // register mb_counter_17
  reg [21 : 0] mb_counter_17;
  wire [21 : 0] mb_counter_17$D_IN;
  wire mb_counter_17$EN;

  // register mb_counter_18
  reg [21 : 0] mb_counter_18;
  wire [21 : 0] mb_counter_18$D_IN;
  wire mb_counter_18$EN;

  // register mb_counter_19
  reg [21 : 0] mb_counter_19;
  wire [21 : 0] mb_counter_19$D_IN;
  wire mb_counter_19$EN;

  // register mb_counter_2
  reg [21 : 0] mb_counter_2;
  wire [21 : 0] mb_counter_2$D_IN;
  wire mb_counter_2$EN;

  // register mb_counter_20
  reg [21 : 0] mb_counter_20;
  wire [21 : 0] mb_counter_20$D_IN;
  wire mb_counter_20$EN;

  // register mb_counter_21
  reg [21 : 0] mb_counter_21;
  wire [21 : 0] mb_counter_21$D_IN;
  wire mb_counter_21$EN;

  // register mb_counter_22
  reg [21 : 0] mb_counter_22;
  wire [21 : 0] mb_counter_22$D_IN;
  wire mb_counter_22$EN;

  // register mb_counter_23
  reg [21 : 0] mb_counter_23;
  wire [21 : 0] mb_counter_23$D_IN;
  wire mb_counter_23$EN;

  // register mb_counter_24
  reg [21 : 0] mb_counter_24;
  wire [21 : 0] mb_counter_24$D_IN;
  wire mb_counter_24$EN;

  // register mb_counter_25
  reg [21 : 0] mb_counter_25;
  wire [21 : 0] mb_counter_25$D_IN;
  wire mb_counter_25$EN;

  // register mb_counter_26
  reg [21 : 0] mb_counter_26;
  wire [21 : 0] mb_counter_26$D_IN;
  wire mb_counter_26$EN;

  // register mb_counter_27
  reg [21 : 0] mb_counter_27;
  wire [21 : 0] mb_counter_27$D_IN;
  wire mb_counter_27$EN;

  // register mb_counter_28
  reg [21 : 0] mb_counter_28;
  wire [21 : 0] mb_counter_28$D_IN;
  wire mb_counter_28$EN;

  // register mb_counter_29
  reg [21 : 0] mb_counter_29;
  wire [21 : 0] mb_counter_29$D_IN;
  wire mb_counter_29$EN;

  // register mb_counter_3
  reg [21 : 0] mb_counter_3;
  wire [21 : 0] mb_counter_3$D_IN;
  wire mb_counter_3$EN;

  // register mb_counter_30
  reg [21 : 0] mb_counter_30;
  wire [21 : 0] mb_counter_30$D_IN;
  wire mb_counter_30$EN;

  // register mb_counter_31
  reg [21 : 0] mb_counter_31;
  wire [21 : 0] mb_counter_31$D_IN;
  wire mb_counter_31$EN;

  // register mb_counter_32
  reg [21 : 0] mb_counter_32;
  wire [21 : 0] mb_counter_32$D_IN;
  wire mb_counter_32$EN;

  // register mb_counter_33
  reg [21 : 0] mb_counter_33;
  wire [21 : 0] mb_counter_33$D_IN;
  wire mb_counter_33$EN;

  // register mb_counter_34
  reg [21 : 0] mb_counter_34;
  wire [21 : 0] mb_counter_34$D_IN;
  wire mb_counter_34$EN;

  // register mb_counter_35
  reg [21 : 0] mb_counter_35;
  wire [21 : 0] mb_counter_35$D_IN;
  wire mb_counter_35$EN;

  // register mb_counter_36
  reg [21 : 0] mb_counter_36;
  wire [21 : 0] mb_counter_36$D_IN;
  wire mb_counter_36$EN;

  // register mb_counter_37
  reg [21 : 0] mb_counter_37;
  wire [21 : 0] mb_counter_37$D_IN;
  wire mb_counter_37$EN;

  // register mb_counter_38
  reg [21 : 0] mb_counter_38;
  wire [21 : 0] mb_counter_38$D_IN;
  wire mb_counter_38$EN;

  // register mb_counter_39
  reg [21 : 0] mb_counter_39;
  wire [21 : 0] mb_counter_39$D_IN;
  wire mb_counter_39$EN;

  // register mb_counter_4
  reg [21 : 0] mb_counter_4;
  wire [21 : 0] mb_counter_4$D_IN;
  wire mb_counter_4$EN;

  // register mb_counter_40
  reg [21 : 0] mb_counter_40;
  wire [21 : 0] mb_counter_40$D_IN;
  wire mb_counter_40$EN;

  // register mb_counter_41
  reg [21 : 0] mb_counter_41;
  wire [21 : 0] mb_counter_41$D_IN;
  wire mb_counter_41$EN;

  // register mb_counter_42
  reg [21 : 0] mb_counter_42;
  wire [21 : 0] mb_counter_42$D_IN;
  wire mb_counter_42$EN;

  // register mb_counter_43
  reg [21 : 0] mb_counter_43;
  wire [21 : 0] mb_counter_43$D_IN;
  wire mb_counter_43$EN;

  // register mb_counter_44
  reg [21 : 0] mb_counter_44;
  wire [21 : 0] mb_counter_44$D_IN;
  wire mb_counter_44$EN;

  // register mb_counter_45
  reg [21 : 0] mb_counter_45;
  wire [21 : 0] mb_counter_45$D_IN;
  wire mb_counter_45$EN;

  // register mb_counter_46
  reg [21 : 0] mb_counter_46;
  wire [21 : 0] mb_counter_46$D_IN;
  wire mb_counter_46$EN;

  // register mb_counter_47
  reg [21 : 0] mb_counter_47;
  wire [21 : 0] mb_counter_47$D_IN;
  wire mb_counter_47$EN;

  // register mb_counter_48
  reg [21 : 0] mb_counter_48;
  wire [21 : 0] mb_counter_48$D_IN;
  wire mb_counter_48$EN;

  // register mb_counter_49
  reg [21 : 0] mb_counter_49;
  wire [21 : 0] mb_counter_49$D_IN;
  wire mb_counter_49$EN;

  // register mb_counter_5
  reg [21 : 0] mb_counter_5;
  wire [21 : 0] mb_counter_5$D_IN;
  wire mb_counter_5$EN;

  // register mb_counter_50
  reg [21 : 0] mb_counter_50;
  wire [21 : 0] mb_counter_50$D_IN;
  wire mb_counter_50$EN;

  // register mb_counter_51
  reg [21 : 0] mb_counter_51;
  wire [21 : 0] mb_counter_51$D_IN;
  wire mb_counter_51$EN;

  // register mb_counter_52
  reg [21 : 0] mb_counter_52;
  wire [21 : 0] mb_counter_52$D_IN;
  wire mb_counter_52$EN;

  // register mb_counter_53
  reg [21 : 0] mb_counter_53;
  wire [21 : 0] mb_counter_53$D_IN;
  wire mb_counter_53$EN;

  // register mb_counter_54
  reg [21 : 0] mb_counter_54;
  wire [21 : 0] mb_counter_54$D_IN;
  wire mb_counter_54$EN;

  // register mb_counter_55
  reg [21 : 0] mb_counter_55;
  wire [21 : 0] mb_counter_55$D_IN;
  wire mb_counter_55$EN;

  // register mb_counter_56
  reg [21 : 0] mb_counter_56;
  wire [21 : 0] mb_counter_56$D_IN;
  wire mb_counter_56$EN;

  // register mb_counter_57
  reg [21 : 0] mb_counter_57;
  wire [21 : 0] mb_counter_57$D_IN;
  wire mb_counter_57$EN;

  // register mb_counter_58
  reg [21 : 0] mb_counter_58;
  wire [21 : 0] mb_counter_58$D_IN;
  wire mb_counter_58$EN;

  // register mb_counter_59
  reg [21 : 0] mb_counter_59;
  wire [21 : 0] mb_counter_59$D_IN;
  wire mb_counter_59$EN;

  // register mb_counter_6
  reg [21 : 0] mb_counter_6;
  wire [21 : 0] mb_counter_6$D_IN;
  wire mb_counter_6$EN;

  // register mb_counter_7
  reg [21 : 0] mb_counter_7;
  wire [21 : 0] mb_counter_7$D_IN;
  wire mb_counter_7$EN;

  // register mb_counter_8
  reg [21 : 0] mb_counter_8;
  wire [21 : 0] mb_counter_8$D_IN;
  wire mb_counter_8$EN;

  // register mb_counter_9
  reg [21 : 0] mb_counter_9;
  wire [21 : 0] mb_counter_9$D_IN;
  wire mb_counter_9$EN;

  // register mb_increment
  reg [21 : 0] mb_increment;
  wire [21 : 0] mb_increment$D_IN;
  wire mb_increment$EN;

  // register mb_increment_1
  reg [21 : 0] mb_increment_1;
  wire [21 : 0] mb_increment_1$D_IN;
  wire mb_increment_1$EN;

  // register mb_increment_10
  reg [21 : 0] mb_increment_10;
  wire [21 : 0] mb_increment_10$D_IN;
  wire mb_increment_10$EN;

  // register mb_increment_11
  reg [21 : 0] mb_increment_11;
  wire [21 : 0] mb_increment_11$D_IN;
  wire mb_increment_11$EN;

  // register mb_increment_12
  reg [21 : 0] mb_increment_12;
  wire [21 : 0] mb_increment_12$D_IN;
  wire mb_increment_12$EN;

  // register mb_increment_13
  reg [21 : 0] mb_increment_13;
  wire [21 : 0] mb_increment_13$D_IN;
  wire mb_increment_13$EN;

  // register mb_increment_14
  reg [21 : 0] mb_increment_14;
  wire [21 : 0] mb_increment_14$D_IN;
  wire mb_increment_14$EN;

  // register mb_increment_15
  reg [21 : 0] mb_increment_15;
  wire [21 : 0] mb_increment_15$D_IN;
  wire mb_increment_15$EN;

  // register mb_increment_16
  reg [21 : 0] mb_increment_16;
  wire [21 : 0] mb_increment_16$D_IN;
  wire mb_increment_16$EN;

  // register mb_increment_17
  reg [21 : 0] mb_increment_17;
  wire [21 : 0] mb_increment_17$D_IN;
  wire mb_increment_17$EN;

  // register mb_increment_18
  reg [21 : 0] mb_increment_18;
  wire [21 : 0] mb_increment_18$D_IN;
  wire mb_increment_18$EN;

  // register mb_increment_19
  reg [21 : 0] mb_increment_19;
  wire [21 : 0] mb_increment_19$D_IN;
  wire mb_increment_19$EN;

  // register mb_increment_2
  reg [21 : 0] mb_increment_2;
  wire [21 : 0] mb_increment_2$D_IN;
  wire mb_increment_2$EN;

  // register mb_increment_20
  reg [21 : 0] mb_increment_20;
  wire [21 : 0] mb_increment_20$D_IN;
  wire mb_increment_20$EN;

  // register mb_increment_21
  reg [21 : 0] mb_increment_21;
  wire [21 : 0] mb_increment_21$D_IN;
  wire mb_increment_21$EN;

  // register mb_increment_22
  reg [21 : 0] mb_increment_22;
  wire [21 : 0] mb_increment_22$D_IN;
  wire mb_increment_22$EN;

  // register mb_increment_23
  reg [21 : 0] mb_increment_23;
  wire [21 : 0] mb_increment_23$D_IN;
  wire mb_increment_23$EN;

  // register mb_increment_24
  reg [21 : 0] mb_increment_24;
  wire [21 : 0] mb_increment_24$D_IN;
  wire mb_increment_24$EN;

  // register mb_increment_25
  reg [21 : 0] mb_increment_25;
  wire [21 : 0] mb_increment_25$D_IN;
  wire mb_increment_25$EN;

  // register mb_increment_26
  reg [21 : 0] mb_increment_26;
  wire [21 : 0] mb_increment_26$D_IN;
  wire mb_increment_26$EN;

  // register mb_increment_27
  reg [21 : 0] mb_increment_27;
  wire [21 : 0] mb_increment_27$D_IN;
  wire mb_increment_27$EN;

  // register mb_increment_28
  reg [21 : 0] mb_increment_28;
  wire [21 : 0] mb_increment_28$D_IN;
  wire mb_increment_28$EN;

  // register mb_increment_29
  reg [21 : 0] mb_increment_29;
  wire [21 : 0] mb_increment_29$D_IN;
  wire mb_increment_29$EN;

  // register mb_increment_3
  reg [21 : 0] mb_increment_3;
  wire [21 : 0] mb_increment_3$D_IN;
  wire mb_increment_3$EN;

  // register mb_increment_30
  reg [21 : 0] mb_increment_30;
  wire [21 : 0] mb_increment_30$D_IN;
  wire mb_increment_30$EN;

  // register mb_increment_31
  reg [21 : 0] mb_increment_31;
  wire [21 : 0] mb_increment_31$D_IN;
  wire mb_increment_31$EN;

  // register mb_increment_32
  reg [21 : 0] mb_increment_32;
  wire [21 : 0] mb_increment_32$D_IN;
  wire mb_increment_32$EN;

  // register mb_increment_33
  reg [21 : 0] mb_increment_33;
  wire [21 : 0] mb_increment_33$D_IN;
  wire mb_increment_33$EN;

  // register mb_increment_34
  reg [21 : 0] mb_increment_34;
  wire [21 : 0] mb_increment_34$D_IN;
  wire mb_increment_34$EN;

  // register mb_increment_35
  reg [21 : 0] mb_increment_35;
  wire [21 : 0] mb_increment_35$D_IN;
  wire mb_increment_35$EN;

  // register mb_increment_36
  reg [21 : 0] mb_increment_36;
  wire [21 : 0] mb_increment_36$D_IN;
  wire mb_increment_36$EN;

  // register mb_increment_37
  reg [21 : 0] mb_increment_37;
  wire [21 : 0] mb_increment_37$D_IN;
  wire mb_increment_37$EN;

  // register mb_increment_38
  reg [21 : 0] mb_increment_38;
  wire [21 : 0] mb_increment_38$D_IN;
  wire mb_increment_38$EN;

  // register mb_increment_39
  reg [21 : 0] mb_increment_39;
  wire [21 : 0] mb_increment_39$D_IN;
  wire mb_increment_39$EN;

  // register mb_increment_4
  reg [21 : 0] mb_increment_4;
  wire [21 : 0] mb_increment_4$D_IN;
  wire mb_increment_4$EN;

  // register mb_increment_40
  reg [21 : 0] mb_increment_40;
  wire [21 : 0] mb_increment_40$D_IN;
  wire mb_increment_40$EN;

  // register mb_increment_41
  reg [21 : 0] mb_increment_41;
  wire [21 : 0] mb_increment_41$D_IN;
  wire mb_increment_41$EN;

  // register mb_increment_42
  reg [21 : 0] mb_increment_42;
  wire [21 : 0] mb_increment_42$D_IN;
  wire mb_increment_42$EN;

  // register mb_increment_43
  reg [21 : 0] mb_increment_43;
  wire [21 : 0] mb_increment_43$D_IN;
  wire mb_increment_43$EN;

  // register mb_increment_44
  reg [21 : 0] mb_increment_44;
  wire [21 : 0] mb_increment_44$D_IN;
  wire mb_increment_44$EN;

  // register mb_increment_45
  reg [21 : 0] mb_increment_45;
  wire [21 : 0] mb_increment_45$D_IN;
  wire mb_increment_45$EN;

  // register mb_increment_46
  reg [21 : 0] mb_increment_46;
  wire [21 : 0] mb_increment_46$D_IN;
  wire mb_increment_46$EN;

  // register mb_increment_47
  reg [21 : 0] mb_increment_47;
  wire [21 : 0] mb_increment_47$D_IN;
  wire mb_increment_47$EN;

  // register mb_increment_48
  reg [21 : 0] mb_increment_48;
  wire [21 : 0] mb_increment_48$D_IN;
  wire mb_increment_48$EN;

  // register mb_increment_49
  reg [21 : 0] mb_increment_49;
  wire [21 : 0] mb_increment_49$D_IN;
  wire mb_increment_49$EN;

  // register mb_increment_5
  reg [21 : 0] mb_increment_5;
  wire [21 : 0] mb_increment_5$D_IN;
  wire mb_increment_5$EN;

  // register mb_increment_50
  reg [21 : 0] mb_increment_50;
  wire [21 : 0] mb_increment_50$D_IN;
  wire mb_increment_50$EN;

  // register mb_increment_51
  reg [21 : 0] mb_increment_51;
  wire [21 : 0] mb_increment_51$D_IN;
  wire mb_increment_51$EN;

  // register mb_increment_52
  reg [21 : 0] mb_increment_52;
  wire [21 : 0] mb_increment_52$D_IN;
  wire mb_increment_52$EN;

  // register mb_increment_53
  reg [21 : 0] mb_increment_53;
  wire [21 : 0] mb_increment_53$D_IN;
  wire mb_increment_53$EN;

  // register mb_increment_54
  reg [21 : 0] mb_increment_54;
  wire [21 : 0] mb_increment_54$D_IN;
  wire mb_increment_54$EN;

  // register mb_increment_55
  reg [21 : 0] mb_increment_55;
  wire [21 : 0] mb_increment_55$D_IN;
  wire mb_increment_55$EN;

  // register mb_increment_56
  reg [21 : 0] mb_increment_56;
  wire [21 : 0] mb_increment_56$D_IN;
  wire mb_increment_56$EN;

  // register mb_increment_57
  reg [21 : 0] mb_increment_57;
  wire [21 : 0] mb_increment_57$D_IN;
  wire mb_increment_57$EN;

  // register mb_increment_58
  reg [21 : 0] mb_increment_58;
  wire [21 : 0] mb_increment_58$D_IN;
  wire mb_increment_58$EN;

  // register mb_increment_59
  reg [21 : 0] mb_increment_59;
  wire [21 : 0] mb_increment_59$D_IN;
  wire mb_increment_59$EN;

  // register mb_increment_6
  reg [21 : 0] mb_increment_6;
  wire [21 : 0] mb_increment_6$D_IN;
  wire mb_increment_6$EN;

  // register mb_increment_7
  reg [21 : 0] mb_increment_7;
  wire [21 : 0] mb_increment_7$D_IN;
  wire mb_increment_7$EN;

  // register mb_increment_8
  reg [21 : 0] mb_increment_8;
  wire [21 : 0] mb_increment_8$D_IN;
  wire mb_increment_8$EN;

  // register mb_increment_9
  reg [21 : 0] mb_increment_9;
  wire [21 : 0] mb_increment_9$D_IN;
  wire mb_increment_9$EN;

  // register mb_last_counter
  reg [21 : 0] mb_last_counter;
  wire [21 : 0] mb_last_counter$D_IN;
  wire mb_last_counter$EN;

  // register mb_last_counter_1
  reg [21 : 0] mb_last_counter_1;
  wire [21 : 0] mb_last_counter_1$D_IN;
  wire mb_last_counter_1$EN;

  // register mb_last_counter_10
  reg [21 : 0] mb_last_counter_10;
  wire [21 : 0] mb_last_counter_10$D_IN;
  wire mb_last_counter_10$EN;

  // register mb_last_counter_11
  reg [21 : 0] mb_last_counter_11;
  wire [21 : 0] mb_last_counter_11$D_IN;
  wire mb_last_counter_11$EN;

  // register mb_last_counter_12
  reg [21 : 0] mb_last_counter_12;
  wire [21 : 0] mb_last_counter_12$D_IN;
  wire mb_last_counter_12$EN;

  // register mb_last_counter_13
  reg [21 : 0] mb_last_counter_13;
  wire [21 : 0] mb_last_counter_13$D_IN;
  wire mb_last_counter_13$EN;

  // register mb_last_counter_14
  reg [21 : 0] mb_last_counter_14;
  wire [21 : 0] mb_last_counter_14$D_IN;
  wire mb_last_counter_14$EN;

  // register mb_last_counter_15
  reg [21 : 0] mb_last_counter_15;
  wire [21 : 0] mb_last_counter_15$D_IN;
  wire mb_last_counter_15$EN;

  // register mb_last_counter_16
  reg [21 : 0] mb_last_counter_16;
  wire [21 : 0] mb_last_counter_16$D_IN;
  wire mb_last_counter_16$EN;

  // register mb_last_counter_17
  reg [21 : 0] mb_last_counter_17;
  wire [21 : 0] mb_last_counter_17$D_IN;
  wire mb_last_counter_17$EN;

  // register mb_last_counter_18
  reg [21 : 0] mb_last_counter_18;
  wire [21 : 0] mb_last_counter_18$D_IN;
  wire mb_last_counter_18$EN;

  // register mb_last_counter_19
  reg [21 : 0] mb_last_counter_19;
  wire [21 : 0] mb_last_counter_19$D_IN;
  wire mb_last_counter_19$EN;

  // register mb_last_counter_2
  reg [21 : 0] mb_last_counter_2;
  wire [21 : 0] mb_last_counter_2$D_IN;
  wire mb_last_counter_2$EN;

  // register mb_last_counter_20
  reg [21 : 0] mb_last_counter_20;
  wire [21 : 0] mb_last_counter_20$D_IN;
  wire mb_last_counter_20$EN;

  // register mb_last_counter_21
  reg [21 : 0] mb_last_counter_21;
  wire [21 : 0] mb_last_counter_21$D_IN;
  wire mb_last_counter_21$EN;

  // register mb_last_counter_22
  reg [21 : 0] mb_last_counter_22;
  wire [21 : 0] mb_last_counter_22$D_IN;
  wire mb_last_counter_22$EN;

  // register mb_last_counter_23
  reg [21 : 0] mb_last_counter_23;
  wire [21 : 0] mb_last_counter_23$D_IN;
  wire mb_last_counter_23$EN;

  // register mb_last_counter_24
  reg [21 : 0] mb_last_counter_24;
  wire [21 : 0] mb_last_counter_24$D_IN;
  wire mb_last_counter_24$EN;

  // register mb_last_counter_25
  reg [21 : 0] mb_last_counter_25;
  wire [21 : 0] mb_last_counter_25$D_IN;
  wire mb_last_counter_25$EN;

  // register mb_last_counter_26
  reg [21 : 0] mb_last_counter_26;
  wire [21 : 0] mb_last_counter_26$D_IN;
  wire mb_last_counter_26$EN;

  // register mb_last_counter_27
  reg [21 : 0] mb_last_counter_27;
  wire [21 : 0] mb_last_counter_27$D_IN;
  wire mb_last_counter_27$EN;

  // register mb_last_counter_28
  reg [21 : 0] mb_last_counter_28;
  wire [21 : 0] mb_last_counter_28$D_IN;
  wire mb_last_counter_28$EN;

  // register mb_last_counter_29
  reg [21 : 0] mb_last_counter_29;
  wire [21 : 0] mb_last_counter_29$D_IN;
  wire mb_last_counter_29$EN;

  // register mb_last_counter_3
  reg [21 : 0] mb_last_counter_3;
  wire [21 : 0] mb_last_counter_3$D_IN;
  wire mb_last_counter_3$EN;

  // register mb_last_counter_30
  reg [21 : 0] mb_last_counter_30;
  wire [21 : 0] mb_last_counter_30$D_IN;
  wire mb_last_counter_30$EN;

  // register mb_last_counter_31
  reg [21 : 0] mb_last_counter_31;
  wire [21 : 0] mb_last_counter_31$D_IN;
  wire mb_last_counter_31$EN;

  // register mb_last_counter_32
  reg [21 : 0] mb_last_counter_32;
  wire [21 : 0] mb_last_counter_32$D_IN;
  wire mb_last_counter_32$EN;

  // register mb_last_counter_33
  reg [21 : 0] mb_last_counter_33;
  wire [21 : 0] mb_last_counter_33$D_IN;
  wire mb_last_counter_33$EN;

  // register mb_last_counter_34
  reg [21 : 0] mb_last_counter_34;
  wire [21 : 0] mb_last_counter_34$D_IN;
  wire mb_last_counter_34$EN;

  // register mb_last_counter_35
  reg [21 : 0] mb_last_counter_35;
  wire [21 : 0] mb_last_counter_35$D_IN;
  wire mb_last_counter_35$EN;

  // register mb_last_counter_36
  reg [21 : 0] mb_last_counter_36;
  wire [21 : 0] mb_last_counter_36$D_IN;
  wire mb_last_counter_36$EN;

  // register mb_last_counter_37
  reg [21 : 0] mb_last_counter_37;
  wire [21 : 0] mb_last_counter_37$D_IN;
  wire mb_last_counter_37$EN;

  // register mb_last_counter_38
  reg [21 : 0] mb_last_counter_38;
  wire [21 : 0] mb_last_counter_38$D_IN;
  wire mb_last_counter_38$EN;

  // register mb_last_counter_39
  reg [21 : 0] mb_last_counter_39;
  wire [21 : 0] mb_last_counter_39$D_IN;
  wire mb_last_counter_39$EN;

  // register mb_last_counter_4
  reg [21 : 0] mb_last_counter_4;
  wire [21 : 0] mb_last_counter_4$D_IN;
  wire mb_last_counter_4$EN;

  // register mb_last_counter_40
  reg [21 : 0] mb_last_counter_40;
  wire [21 : 0] mb_last_counter_40$D_IN;
  wire mb_last_counter_40$EN;

  // register mb_last_counter_41
  reg [21 : 0] mb_last_counter_41;
  wire [21 : 0] mb_last_counter_41$D_IN;
  wire mb_last_counter_41$EN;

  // register mb_last_counter_42
  reg [21 : 0] mb_last_counter_42;
  wire [21 : 0] mb_last_counter_42$D_IN;
  wire mb_last_counter_42$EN;

  // register mb_last_counter_43
  reg [21 : 0] mb_last_counter_43;
  wire [21 : 0] mb_last_counter_43$D_IN;
  wire mb_last_counter_43$EN;

  // register mb_last_counter_44
  reg [21 : 0] mb_last_counter_44;
  wire [21 : 0] mb_last_counter_44$D_IN;
  wire mb_last_counter_44$EN;

  // register mb_last_counter_45
  reg [21 : 0] mb_last_counter_45;
  wire [21 : 0] mb_last_counter_45$D_IN;
  wire mb_last_counter_45$EN;

  // register mb_last_counter_46
  reg [21 : 0] mb_last_counter_46;
  wire [21 : 0] mb_last_counter_46$D_IN;
  wire mb_last_counter_46$EN;

  // register mb_last_counter_47
  reg [21 : 0] mb_last_counter_47;
  wire [21 : 0] mb_last_counter_47$D_IN;
  wire mb_last_counter_47$EN;

  // register mb_last_counter_48
  reg [21 : 0] mb_last_counter_48;
  wire [21 : 0] mb_last_counter_48$D_IN;
  wire mb_last_counter_48$EN;

  // register mb_last_counter_49
  reg [21 : 0] mb_last_counter_49;
  wire [21 : 0] mb_last_counter_49$D_IN;
  wire mb_last_counter_49$EN;

  // register mb_last_counter_5
  reg [21 : 0] mb_last_counter_5;
  wire [21 : 0] mb_last_counter_5$D_IN;
  wire mb_last_counter_5$EN;

  // register mb_last_counter_50
  reg [21 : 0] mb_last_counter_50;
  wire [21 : 0] mb_last_counter_50$D_IN;
  wire mb_last_counter_50$EN;

  // register mb_last_counter_51
  reg [21 : 0] mb_last_counter_51;
  wire [21 : 0] mb_last_counter_51$D_IN;
  wire mb_last_counter_51$EN;

  // register mb_last_counter_52
  reg [21 : 0] mb_last_counter_52;
  wire [21 : 0] mb_last_counter_52$D_IN;
  wire mb_last_counter_52$EN;

  // register mb_last_counter_53
  reg [21 : 0] mb_last_counter_53;
  wire [21 : 0] mb_last_counter_53$D_IN;
  wire mb_last_counter_53$EN;

  // register mb_last_counter_54
  reg [21 : 0] mb_last_counter_54;
  wire [21 : 0] mb_last_counter_54$D_IN;
  wire mb_last_counter_54$EN;

  // register mb_last_counter_55
  reg [21 : 0] mb_last_counter_55;
  wire [21 : 0] mb_last_counter_55$D_IN;
  wire mb_last_counter_55$EN;

  // register mb_last_counter_56
  reg [21 : 0] mb_last_counter_56;
  wire [21 : 0] mb_last_counter_56$D_IN;
  wire mb_last_counter_56$EN;

  // register mb_last_counter_57
  reg [21 : 0] mb_last_counter_57;
  wire [21 : 0] mb_last_counter_57$D_IN;
  wire mb_last_counter_57$EN;

  // register mb_last_counter_58
  reg [21 : 0] mb_last_counter_58;
  wire [21 : 0] mb_last_counter_58$D_IN;
  wire mb_last_counter_58$EN;

  // register mb_last_counter_59
  reg [21 : 0] mb_last_counter_59;
  wire [21 : 0] mb_last_counter_59$D_IN;
  wire mb_last_counter_59$EN;

  // register mb_last_counter_6
  reg [21 : 0] mb_last_counter_6;
  wire [21 : 0] mb_last_counter_6$D_IN;
  wire mb_last_counter_6$EN;

  // register mb_last_counter_7
  reg [21 : 0] mb_last_counter_7;
  wire [21 : 0] mb_last_counter_7$D_IN;
  wire mb_last_counter_7$EN;

  // register mb_last_counter_8
  reg [21 : 0] mb_last_counter_8;
  wire [21 : 0] mb_last_counter_8$D_IN;
  wire mb_last_counter_8$EN;

  // register mb_last_counter_9
  reg [21 : 0] mb_last_counter_9;
  wire [21 : 0] mb_last_counter_9$D_IN;
  wire mb_last_counter_9$EN;

  // register mb_out_count
  reg [5 : 0] mb_out_count;
  wire [5 : 0] mb_out_count$D_IN;
  wire mb_out_count$EN;

  // register mb_tick_pulse
  reg mb_tick_pulse;
  wire mb_tick_pulse$D_IN, mb_tick_pulse$EN;

  // register mb_tick_pulse_1
  reg mb_tick_pulse_1;
  wire mb_tick_pulse_1$D_IN, mb_tick_pulse_1$EN;

  // register mb_tick_pulse_10
  reg mb_tick_pulse_10;
  wire mb_tick_pulse_10$D_IN, mb_tick_pulse_10$EN;

  // register mb_tick_pulse_11
  reg mb_tick_pulse_11;
  wire mb_tick_pulse_11$D_IN, mb_tick_pulse_11$EN;

  // register mb_tick_pulse_12
  reg mb_tick_pulse_12;
  wire mb_tick_pulse_12$D_IN, mb_tick_pulse_12$EN;

  // register mb_tick_pulse_13
  reg mb_tick_pulse_13;
  wire mb_tick_pulse_13$D_IN, mb_tick_pulse_13$EN;

  // register mb_tick_pulse_14
  reg mb_tick_pulse_14;
  wire mb_tick_pulse_14$D_IN, mb_tick_pulse_14$EN;

  // register mb_tick_pulse_15
  reg mb_tick_pulse_15;
  wire mb_tick_pulse_15$D_IN, mb_tick_pulse_15$EN;

  // register mb_tick_pulse_16
  reg mb_tick_pulse_16;
  wire mb_tick_pulse_16$D_IN, mb_tick_pulse_16$EN;

  // register mb_tick_pulse_17
  reg mb_tick_pulse_17;
  wire mb_tick_pulse_17$D_IN, mb_tick_pulse_17$EN;

  // register mb_tick_pulse_18
  reg mb_tick_pulse_18;
  wire mb_tick_pulse_18$D_IN, mb_tick_pulse_18$EN;

  // register mb_tick_pulse_19
  reg mb_tick_pulse_19;
  wire mb_tick_pulse_19$D_IN, mb_tick_pulse_19$EN;

  // register mb_tick_pulse_2
  reg mb_tick_pulse_2;
  wire mb_tick_pulse_2$D_IN, mb_tick_pulse_2$EN;

  // register mb_tick_pulse_20
  reg mb_tick_pulse_20;
  wire mb_tick_pulse_20$D_IN, mb_tick_pulse_20$EN;

  // register mb_tick_pulse_21
  reg mb_tick_pulse_21;
  wire mb_tick_pulse_21$D_IN, mb_tick_pulse_21$EN;

  // register mb_tick_pulse_22
  reg mb_tick_pulse_22;
  wire mb_tick_pulse_22$D_IN, mb_tick_pulse_22$EN;

  // register mb_tick_pulse_23
  reg mb_tick_pulse_23;
  wire mb_tick_pulse_23$D_IN, mb_tick_pulse_23$EN;

  // register mb_tick_pulse_24
  reg mb_tick_pulse_24;
  wire mb_tick_pulse_24$D_IN, mb_tick_pulse_24$EN;

  // register mb_tick_pulse_25
  reg mb_tick_pulse_25;
  wire mb_tick_pulse_25$D_IN, mb_tick_pulse_25$EN;

  // register mb_tick_pulse_26
  reg mb_tick_pulse_26;
  wire mb_tick_pulse_26$D_IN, mb_tick_pulse_26$EN;

  // register mb_tick_pulse_27
  reg mb_tick_pulse_27;
  wire mb_tick_pulse_27$D_IN, mb_tick_pulse_27$EN;

  // register mb_tick_pulse_28
  reg mb_tick_pulse_28;
  wire mb_tick_pulse_28$D_IN, mb_tick_pulse_28$EN;

  // register mb_tick_pulse_29
  reg mb_tick_pulse_29;
  wire mb_tick_pulse_29$D_IN, mb_tick_pulse_29$EN;

  // register mb_tick_pulse_3
  reg mb_tick_pulse_3;
  wire mb_tick_pulse_3$D_IN, mb_tick_pulse_3$EN;

  // register mb_tick_pulse_30
  reg mb_tick_pulse_30;
  wire mb_tick_pulse_30$D_IN, mb_tick_pulse_30$EN;

  // register mb_tick_pulse_31
  reg mb_tick_pulse_31;
  wire mb_tick_pulse_31$D_IN, mb_tick_pulse_31$EN;

  // register mb_tick_pulse_32
  reg mb_tick_pulse_32;
  wire mb_tick_pulse_32$D_IN, mb_tick_pulse_32$EN;

  // register mb_tick_pulse_33
  reg mb_tick_pulse_33;
  wire mb_tick_pulse_33$D_IN, mb_tick_pulse_33$EN;

  // register mb_tick_pulse_34
  reg mb_tick_pulse_34;
  wire mb_tick_pulse_34$D_IN, mb_tick_pulse_34$EN;

  // register mb_tick_pulse_35
  reg mb_tick_pulse_35;
  wire mb_tick_pulse_35$D_IN, mb_tick_pulse_35$EN;

  // register mb_tick_pulse_36
  reg mb_tick_pulse_36;
  wire mb_tick_pulse_36$D_IN, mb_tick_pulse_36$EN;

  // register mb_tick_pulse_37
  reg mb_tick_pulse_37;
  wire mb_tick_pulse_37$D_IN, mb_tick_pulse_37$EN;

  // register mb_tick_pulse_38
  reg mb_tick_pulse_38;
  wire mb_tick_pulse_38$D_IN, mb_tick_pulse_38$EN;

  // register mb_tick_pulse_39
  reg mb_tick_pulse_39;
  wire mb_tick_pulse_39$D_IN, mb_tick_pulse_39$EN;

  // register mb_tick_pulse_4
  reg mb_tick_pulse_4;
  wire mb_tick_pulse_4$D_IN, mb_tick_pulse_4$EN;

  // register mb_tick_pulse_40
  reg mb_tick_pulse_40;
  wire mb_tick_pulse_40$D_IN, mb_tick_pulse_40$EN;

  // register mb_tick_pulse_41
  reg mb_tick_pulse_41;
  wire mb_tick_pulse_41$D_IN, mb_tick_pulse_41$EN;

  // register mb_tick_pulse_42
  reg mb_tick_pulse_42;
  wire mb_tick_pulse_42$D_IN, mb_tick_pulse_42$EN;

  // register mb_tick_pulse_43
  reg mb_tick_pulse_43;
  wire mb_tick_pulse_43$D_IN, mb_tick_pulse_43$EN;

  // register mb_tick_pulse_44
  reg mb_tick_pulse_44;
  wire mb_tick_pulse_44$D_IN, mb_tick_pulse_44$EN;

  // register mb_tick_pulse_45
  reg mb_tick_pulse_45;
  wire mb_tick_pulse_45$D_IN, mb_tick_pulse_45$EN;

  // register mb_tick_pulse_46
  reg mb_tick_pulse_46;
  wire mb_tick_pulse_46$D_IN, mb_tick_pulse_46$EN;

  // register mb_tick_pulse_47
  reg mb_tick_pulse_47;
  wire mb_tick_pulse_47$D_IN, mb_tick_pulse_47$EN;

  // register mb_tick_pulse_48
  reg mb_tick_pulse_48;
  wire mb_tick_pulse_48$D_IN, mb_tick_pulse_48$EN;

  // register mb_tick_pulse_49
  reg mb_tick_pulse_49;
  wire mb_tick_pulse_49$D_IN, mb_tick_pulse_49$EN;

  // register mb_tick_pulse_5
  reg mb_tick_pulse_5;
  wire mb_tick_pulse_5$D_IN, mb_tick_pulse_5$EN;

  // register mb_tick_pulse_50
  reg mb_tick_pulse_50;
  wire mb_tick_pulse_50$D_IN, mb_tick_pulse_50$EN;

  // register mb_tick_pulse_51
  reg mb_tick_pulse_51;
  wire mb_tick_pulse_51$D_IN, mb_tick_pulse_51$EN;

  // register mb_tick_pulse_52
  reg mb_tick_pulse_52;
  wire mb_tick_pulse_52$D_IN, mb_tick_pulse_52$EN;

  // register mb_tick_pulse_53
  reg mb_tick_pulse_53;
  wire mb_tick_pulse_53$D_IN, mb_tick_pulse_53$EN;

  // register mb_tick_pulse_54
  reg mb_tick_pulse_54;
  wire mb_tick_pulse_54$D_IN, mb_tick_pulse_54$EN;

  // register mb_tick_pulse_55
  reg mb_tick_pulse_55;
  wire mb_tick_pulse_55$D_IN, mb_tick_pulse_55$EN;

  // register mb_tick_pulse_56
  reg mb_tick_pulse_56;
  wire mb_tick_pulse_56$D_IN, mb_tick_pulse_56$EN;

  // register mb_tick_pulse_57
  reg mb_tick_pulse_57;
  wire mb_tick_pulse_57$D_IN, mb_tick_pulse_57$EN;

  // register mb_tick_pulse_58
  reg mb_tick_pulse_58;
  wire mb_tick_pulse_58$D_IN, mb_tick_pulse_58$EN;

  // register mb_tick_pulse_59
  reg mb_tick_pulse_59;
  wire mb_tick_pulse_59$D_IN, mb_tick_pulse_59$EN;

  // register mb_tick_pulse_6
  reg mb_tick_pulse_6;
  wire mb_tick_pulse_6$D_IN, mb_tick_pulse_6$EN;

  // register mb_tick_pulse_7
  reg mb_tick_pulse_7;
  wire mb_tick_pulse_7$D_IN, mb_tick_pulse_7$EN;

  // register mb_tick_pulse_8
  reg mb_tick_pulse_8;
  wire mb_tick_pulse_8$D_IN, mb_tick_pulse_8$EN;

  // register mb_tick_pulse_9
  reg mb_tick_pulse_9;
  wire mb_tick_pulse_9$D_IN, mb_tick_pulse_9$EN;

  // register mb_valid
  reg mb_valid;
  wire mb_valid$D_IN, mb_valid$EN;

  // register mb_valid_1
  reg mb_valid_1;
  wire mb_valid_1$D_IN, mb_valid_1$EN;

  // register mb_valid_10
  reg mb_valid_10;
  wire mb_valid_10$D_IN, mb_valid_10$EN;

  // register mb_valid_11
  reg mb_valid_11;
  wire mb_valid_11$D_IN, mb_valid_11$EN;

  // register mb_valid_12
  reg mb_valid_12;
  wire mb_valid_12$D_IN, mb_valid_12$EN;

  // register mb_valid_13
  reg mb_valid_13;
  wire mb_valid_13$D_IN, mb_valid_13$EN;

  // register mb_valid_14
  reg mb_valid_14;
  wire mb_valid_14$D_IN, mb_valid_14$EN;

  // register mb_valid_15
  reg mb_valid_15;
  wire mb_valid_15$D_IN, mb_valid_15$EN;

  // register mb_valid_16
  reg mb_valid_16;
  wire mb_valid_16$D_IN, mb_valid_16$EN;

  // register mb_valid_17
  reg mb_valid_17;
  wire mb_valid_17$D_IN, mb_valid_17$EN;

  // register mb_valid_18
  reg mb_valid_18;
  wire mb_valid_18$D_IN, mb_valid_18$EN;

  // register mb_valid_19
  reg mb_valid_19;
  wire mb_valid_19$D_IN, mb_valid_19$EN;

  // register mb_valid_2
  reg mb_valid_2;
  wire mb_valid_2$D_IN, mb_valid_2$EN;

  // register mb_valid_20
  reg mb_valid_20;
  wire mb_valid_20$D_IN, mb_valid_20$EN;

  // register mb_valid_21
  reg mb_valid_21;
  wire mb_valid_21$D_IN, mb_valid_21$EN;

  // register mb_valid_22
  reg mb_valid_22;
  wire mb_valid_22$D_IN, mb_valid_22$EN;

  // register mb_valid_23
  reg mb_valid_23;
  wire mb_valid_23$D_IN, mb_valid_23$EN;

  // register mb_valid_24
  reg mb_valid_24;
  wire mb_valid_24$D_IN, mb_valid_24$EN;

  // register mb_valid_25
  reg mb_valid_25;
  wire mb_valid_25$D_IN, mb_valid_25$EN;

  // register mb_valid_26
  reg mb_valid_26;
  wire mb_valid_26$D_IN, mb_valid_26$EN;

  // register mb_valid_27
  reg mb_valid_27;
  wire mb_valid_27$D_IN, mb_valid_27$EN;

  // register mb_valid_28
  reg mb_valid_28;
  wire mb_valid_28$D_IN, mb_valid_28$EN;

  // register mb_valid_29
  reg mb_valid_29;
  wire mb_valid_29$D_IN, mb_valid_29$EN;

  // register mb_valid_3
  reg mb_valid_3;
  wire mb_valid_3$D_IN, mb_valid_3$EN;

  // register mb_valid_30
  reg mb_valid_30;
  wire mb_valid_30$D_IN, mb_valid_30$EN;

  // register mb_valid_31
  reg mb_valid_31;
  wire mb_valid_31$D_IN, mb_valid_31$EN;

  // register mb_valid_32
  reg mb_valid_32;
  wire mb_valid_32$D_IN, mb_valid_32$EN;

  // register mb_valid_33
  reg mb_valid_33;
  wire mb_valid_33$D_IN, mb_valid_33$EN;

  // register mb_valid_34
  reg mb_valid_34;
  wire mb_valid_34$D_IN, mb_valid_34$EN;

  // register mb_valid_35
  reg mb_valid_35;
  wire mb_valid_35$D_IN, mb_valid_35$EN;

  // register mb_valid_36
  reg mb_valid_36;
  wire mb_valid_36$D_IN, mb_valid_36$EN;

  // register mb_valid_37
  reg mb_valid_37;
  wire mb_valid_37$D_IN, mb_valid_37$EN;

  // register mb_valid_38
  reg mb_valid_38;
  wire mb_valid_38$D_IN, mb_valid_38$EN;

  // register mb_valid_39
  reg mb_valid_39;
  wire mb_valid_39$D_IN, mb_valid_39$EN;

  // register mb_valid_4
  reg mb_valid_4;
  wire mb_valid_4$D_IN, mb_valid_4$EN;

  // register mb_valid_40
  reg mb_valid_40;
  wire mb_valid_40$D_IN, mb_valid_40$EN;

  // register mb_valid_41
  reg mb_valid_41;
  wire mb_valid_41$D_IN, mb_valid_41$EN;

  // register mb_valid_42
  reg mb_valid_42;
  wire mb_valid_42$D_IN, mb_valid_42$EN;

  // register mb_valid_43
  reg mb_valid_43;
  wire mb_valid_43$D_IN, mb_valid_43$EN;

  // register mb_valid_44
  reg mb_valid_44;
  wire mb_valid_44$D_IN, mb_valid_44$EN;

  // register mb_valid_45
  reg mb_valid_45;
  wire mb_valid_45$D_IN, mb_valid_45$EN;

  // register mb_valid_46
  reg mb_valid_46;
  wire mb_valid_46$D_IN, mb_valid_46$EN;

  // register mb_valid_47
  reg mb_valid_47;
  wire mb_valid_47$D_IN, mb_valid_47$EN;

  // register mb_valid_48
  reg mb_valid_48;
  wire mb_valid_48$D_IN, mb_valid_48$EN;

  // register mb_valid_49
  reg mb_valid_49;
  wire mb_valid_49$D_IN, mb_valid_49$EN;

  // register mb_valid_5
  reg mb_valid_5;
  wire mb_valid_5$D_IN, mb_valid_5$EN;

  // register mb_valid_50
  reg mb_valid_50;
  wire mb_valid_50$D_IN, mb_valid_50$EN;

  // register mb_valid_51
  reg mb_valid_51;
  wire mb_valid_51$D_IN, mb_valid_51$EN;

  // register mb_valid_52
  reg mb_valid_52;
  wire mb_valid_52$D_IN, mb_valid_52$EN;

  // register mb_valid_53
  reg mb_valid_53;
  wire mb_valid_53$D_IN, mb_valid_53$EN;

  // register mb_valid_54
  reg mb_valid_54;
  wire mb_valid_54$D_IN, mb_valid_54$EN;

  // register mb_valid_55
  reg mb_valid_55;
  wire mb_valid_55$D_IN, mb_valid_55$EN;

  // register mb_valid_56
  reg mb_valid_56;
  wire mb_valid_56$D_IN, mb_valid_56$EN;

  // register mb_valid_57
  reg mb_valid_57;
  wire mb_valid_57$D_IN, mb_valid_57$EN;

  // register mb_valid_58
  reg mb_valid_58;
  wire mb_valid_58$D_IN, mb_valid_58$EN;

  // register mb_valid_59
  reg mb_valid_59;
  wire mb_valid_59$D_IN, mb_valid_59$EN;

  // register mb_valid_6
  reg mb_valid_6;
  wire mb_valid_6$D_IN, mb_valid_6$EN;

  // register mb_valid_7
  reg mb_valid_7;
  wire mb_valid_7$D_IN, mb_valid_7$EN;

  // register mb_valid_8
  reg mb_valid_8;
  wire mb_valid_8$D_IN, mb_valid_8$EN;

  // register mb_valid_9
  reg mb_valid_9;
  wire mb_valid_9$D_IN, mb_valid_9$EN;

  // register mpc
  reg [8 : 0] mpc;
  wire [8 : 0] mpc$D_IN;
  wire mpc$EN;

  // register sync_next
  reg sync_next;
  wire sync_next$D_IN, sync_next$EN;

  // register sync_this
  reg sync_this;
  wire sync_this$D_IN, sync_this$EN;

  // ports of submodule bc_infifo
  wire [13 : 0] bc_infifo$D_IN, bc_infifo$D_OUT;
  wire bc_infifo$CLR,
       bc_infifo$DEQ,
       bc_infifo$EMPTY_N,
       bc_infifo$ENQ,
       bc_infifo$FULL_N;

  // ports of submodule bc_outfifo
  wire [27 : 0] bc_outfifo$D_IN, bc_outfifo$D_OUT;
  wire bc_outfifo$CLR,
       bc_outfifo$DEQ,
       bc_outfifo$EMPTY_N,
       bc_outfifo$ENQ,
       bc_outfifo$FULL_N;

  // ports of submodule bt_info
  wire [7 : 0] bt_info$D_IN, bt_info$D_OUT;
  wire bt_info$CLR, bt_info$DEQ, bt_info$EMPTY_N, bt_info$ENQ, bt_info$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_bc_compare_energies,
       CAN_FIRE_RL_bc_inject_sample,
       CAN_FIRE_RL_beat_injector_cont,
       CAN_FIRE_RL_beat_injector_start,
       CAN_FIRE_RL_init,
       CAN_FIRE_RL_mb_metronome_counter,
       CAN_FIRE_RL_mb_metronome_counter_1,
       CAN_FIRE_RL_mb_metronome_counter_10,
       CAN_FIRE_RL_mb_metronome_counter_11,
       CAN_FIRE_RL_mb_metronome_counter_12,
       CAN_FIRE_RL_mb_metronome_counter_13,
       CAN_FIRE_RL_mb_metronome_counter_14,
       CAN_FIRE_RL_mb_metronome_counter_15,
       CAN_FIRE_RL_mb_metronome_counter_16,
       CAN_FIRE_RL_mb_metronome_counter_17,
       CAN_FIRE_RL_mb_metronome_counter_18,
       CAN_FIRE_RL_mb_metronome_counter_19,
       CAN_FIRE_RL_mb_metronome_counter_2,
       CAN_FIRE_RL_mb_metronome_counter_20,
       CAN_FIRE_RL_mb_metronome_counter_21,
       CAN_FIRE_RL_mb_metronome_counter_22,
       CAN_FIRE_RL_mb_metronome_counter_23,
       CAN_FIRE_RL_mb_metronome_counter_24,
       CAN_FIRE_RL_mb_metronome_counter_25,
       CAN_FIRE_RL_mb_metronome_counter_26,
       CAN_FIRE_RL_mb_metronome_counter_27,
       CAN_FIRE_RL_mb_metronome_counter_28,
       CAN_FIRE_RL_mb_metronome_counter_29,
       CAN_FIRE_RL_mb_metronome_counter_3,
       CAN_FIRE_RL_mb_metronome_counter_30,
       CAN_FIRE_RL_mb_metronome_counter_31,
       CAN_FIRE_RL_mb_metronome_counter_32,
       CAN_FIRE_RL_mb_metronome_counter_33,
       CAN_FIRE_RL_mb_metronome_counter_34,
       CAN_FIRE_RL_mb_metronome_counter_35,
       CAN_FIRE_RL_mb_metronome_counter_36,
       CAN_FIRE_RL_mb_metronome_counter_37,
       CAN_FIRE_RL_mb_metronome_counter_38,
       CAN_FIRE_RL_mb_metronome_counter_39,
       CAN_FIRE_RL_mb_metronome_counter_4,
       CAN_FIRE_RL_mb_metronome_counter_40,
       CAN_FIRE_RL_mb_metronome_counter_41,
       CAN_FIRE_RL_mb_metronome_counter_42,
       CAN_FIRE_RL_mb_metronome_counter_43,
       CAN_FIRE_RL_mb_metronome_counter_44,
       CAN_FIRE_RL_mb_metronome_counter_45,
       CAN_FIRE_RL_mb_metronome_counter_46,
       CAN_FIRE_RL_mb_metronome_counter_47,
       CAN_FIRE_RL_mb_metronome_counter_48,
       CAN_FIRE_RL_mb_metronome_counter_49,
       CAN_FIRE_RL_mb_metronome_counter_5,
       CAN_FIRE_RL_mb_metronome_counter_50,
       CAN_FIRE_RL_mb_metronome_counter_51,
       CAN_FIRE_RL_mb_metronome_counter_52,
       CAN_FIRE_RL_mb_metronome_counter_53,
       CAN_FIRE_RL_mb_metronome_counter_54,
       CAN_FIRE_RL_mb_metronome_counter_55,
       CAN_FIRE_RL_mb_metronome_counter_56,
       CAN_FIRE_RL_mb_metronome_counter_57,
       CAN_FIRE_RL_mb_metronome_counter_58,
       CAN_FIRE_RL_mb_metronome_counter_59,
       CAN_FIRE_RL_mb_metronome_counter_6,
       CAN_FIRE_RL_mb_metronome_counter_7,
       CAN_FIRE_RL_mb_metronome_counter_8,
       CAN_FIRE_RL_mb_metronome_counter_9,
       CAN_FIRE_RL_mb_tick_pulse_off,
       CAN_FIRE_RL_mb_tick_pulse_off_1,
       CAN_FIRE_RL_mb_tick_pulse_off_10,
       CAN_FIRE_RL_mb_tick_pulse_off_11,
       CAN_FIRE_RL_mb_tick_pulse_off_12,
       CAN_FIRE_RL_mb_tick_pulse_off_13,
       CAN_FIRE_RL_mb_tick_pulse_off_14,
       CAN_FIRE_RL_mb_tick_pulse_off_15,
       CAN_FIRE_RL_mb_tick_pulse_off_16,
       CAN_FIRE_RL_mb_tick_pulse_off_17,
       CAN_FIRE_RL_mb_tick_pulse_off_18,
       CAN_FIRE_RL_mb_tick_pulse_off_19,
       CAN_FIRE_RL_mb_tick_pulse_off_2,
       CAN_FIRE_RL_mb_tick_pulse_off_20,
       CAN_FIRE_RL_mb_tick_pulse_off_21,
       CAN_FIRE_RL_mb_tick_pulse_off_22,
       CAN_FIRE_RL_mb_tick_pulse_off_23,
       CAN_FIRE_RL_mb_tick_pulse_off_24,
       CAN_FIRE_RL_mb_tick_pulse_off_25,
       CAN_FIRE_RL_mb_tick_pulse_off_26,
       CAN_FIRE_RL_mb_tick_pulse_off_27,
       CAN_FIRE_RL_mb_tick_pulse_off_28,
       CAN_FIRE_RL_mb_tick_pulse_off_29,
       CAN_FIRE_RL_mb_tick_pulse_off_3,
       CAN_FIRE_RL_mb_tick_pulse_off_30,
       CAN_FIRE_RL_mb_tick_pulse_off_31,
       CAN_FIRE_RL_mb_tick_pulse_off_32,
       CAN_FIRE_RL_mb_tick_pulse_off_33,
       CAN_FIRE_RL_mb_tick_pulse_off_34,
       CAN_FIRE_RL_mb_tick_pulse_off_35,
       CAN_FIRE_RL_mb_tick_pulse_off_36,
       CAN_FIRE_RL_mb_tick_pulse_off_37,
       CAN_FIRE_RL_mb_tick_pulse_off_38,
       CAN_FIRE_RL_mb_tick_pulse_off_39,
       CAN_FIRE_RL_mb_tick_pulse_off_4,
       CAN_FIRE_RL_mb_tick_pulse_off_40,
       CAN_FIRE_RL_mb_tick_pulse_off_41,
       CAN_FIRE_RL_mb_tick_pulse_off_42,
       CAN_FIRE_RL_mb_tick_pulse_off_43,
       CAN_FIRE_RL_mb_tick_pulse_off_44,
       CAN_FIRE_RL_mb_tick_pulse_off_45,
       CAN_FIRE_RL_mb_tick_pulse_off_46,
       CAN_FIRE_RL_mb_tick_pulse_off_47,
       CAN_FIRE_RL_mb_tick_pulse_off_48,
       CAN_FIRE_RL_mb_tick_pulse_off_49,
       CAN_FIRE_RL_mb_tick_pulse_off_5,
       CAN_FIRE_RL_mb_tick_pulse_off_50,
       CAN_FIRE_RL_mb_tick_pulse_off_51,
       CAN_FIRE_RL_mb_tick_pulse_off_52,
       CAN_FIRE_RL_mb_tick_pulse_off_53,
       CAN_FIRE_RL_mb_tick_pulse_off_54,
       CAN_FIRE_RL_mb_tick_pulse_off_55,
       CAN_FIRE_RL_mb_tick_pulse_off_56,
       CAN_FIRE_RL_mb_tick_pulse_off_57,
       CAN_FIRE_RL_mb_tick_pulse_off_58,
       CAN_FIRE_RL_mb_tick_pulse_off_59,
       CAN_FIRE_RL_mb_tick_pulse_off_6,
       CAN_FIRE_RL_mb_tick_pulse_off_7,
       CAN_FIRE_RL_mb_tick_pulse_off_8,
       CAN_FIRE_RL_mb_tick_pulse_off_9,
       CAN_FIRE_RL_pulser,
       CAN_FIRE_getBeatInfo,
       CAN_FIRE_putSampleInput,
       CAN_FIRE_q_sync,
       WILL_FIRE_RL_bc_compare_energies,
       WILL_FIRE_RL_bc_inject_sample,
       WILL_FIRE_RL_beat_injector_cont,
       WILL_FIRE_RL_beat_injector_start,
       WILL_FIRE_RL_init,
       WILL_FIRE_RL_mb_metronome_counter,
       WILL_FIRE_RL_mb_metronome_counter_1,
       WILL_FIRE_RL_mb_metronome_counter_10,
       WILL_FIRE_RL_mb_metronome_counter_11,
       WILL_FIRE_RL_mb_metronome_counter_12,
       WILL_FIRE_RL_mb_metronome_counter_13,
       WILL_FIRE_RL_mb_metronome_counter_14,
       WILL_FIRE_RL_mb_metronome_counter_15,
       WILL_FIRE_RL_mb_metronome_counter_16,
       WILL_FIRE_RL_mb_metronome_counter_17,
       WILL_FIRE_RL_mb_metronome_counter_18,
       WILL_FIRE_RL_mb_metronome_counter_19,
       WILL_FIRE_RL_mb_metronome_counter_2,
       WILL_FIRE_RL_mb_metronome_counter_20,
       WILL_FIRE_RL_mb_metronome_counter_21,
       WILL_FIRE_RL_mb_metronome_counter_22,
       WILL_FIRE_RL_mb_metronome_counter_23,
       WILL_FIRE_RL_mb_metronome_counter_24,
       WILL_FIRE_RL_mb_metronome_counter_25,
       WILL_FIRE_RL_mb_metronome_counter_26,
       WILL_FIRE_RL_mb_metronome_counter_27,
       WILL_FIRE_RL_mb_metronome_counter_28,
       WILL_FIRE_RL_mb_metronome_counter_29,
       WILL_FIRE_RL_mb_metronome_counter_3,
       WILL_FIRE_RL_mb_metronome_counter_30,
       WILL_FIRE_RL_mb_metronome_counter_31,
       WILL_FIRE_RL_mb_metronome_counter_32,
       WILL_FIRE_RL_mb_metronome_counter_33,
       WILL_FIRE_RL_mb_metronome_counter_34,
       WILL_FIRE_RL_mb_metronome_counter_35,
       WILL_FIRE_RL_mb_metronome_counter_36,
       WILL_FIRE_RL_mb_metronome_counter_37,
       WILL_FIRE_RL_mb_metronome_counter_38,
       WILL_FIRE_RL_mb_metronome_counter_39,
       WILL_FIRE_RL_mb_metronome_counter_4,
       WILL_FIRE_RL_mb_metronome_counter_40,
       WILL_FIRE_RL_mb_metronome_counter_41,
       WILL_FIRE_RL_mb_metronome_counter_42,
       WILL_FIRE_RL_mb_metronome_counter_43,
       WILL_FIRE_RL_mb_metronome_counter_44,
       WILL_FIRE_RL_mb_metronome_counter_45,
       WILL_FIRE_RL_mb_metronome_counter_46,
       WILL_FIRE_RL_mb_metronome_counter_47,
       WILL_FIRE_RL_mb_metronome_counter_48,
       WILL_FIRE_RL_mb_metronome_counter_49,
       WILL_FIRE_RL_mb_metronome_counter_5,
       WILL_FIRE_RL_mb_metronome_counter_50,
       WILL_FIRE_RL_mb_metronome_counter_51,
       WILL_FIRE_RL_mb_metronome_counter_52,
       WILL_FIRE_RL_mb_metronome_counter_53,
       WILL_FIRE_RL_mb_metronome_counter_54,
       WILL_FIRE_RL_mb_metronome_counter_55,
       WILL_FIRE_RL_mb_metronome_counter_56,
       WILL_FIRE_RL_mb_metronome_counter_57,
       WILL_FIRE_RL_mb_metronome_counter_58,
       WILL_FIRE_RL_mb_metronome_counter_59,
       WILL_FIRE_RL_mb_metronome_counter_6,
       WILL_FIRE_RL_mb_metronome_counter_7,
       WILL_FIRE_RL_mb_metronome_counter_8,
       WILL_FIRE_RL_mb_metronome_counter_9,
       WILL_FIRE_RL_mb_tick_pulse_off,
       WILL_FIRE_RL_mb_tick_pulse_off_1,
       WILL_FIRE_RL_mb_tick_pulse_off_10,
       WILL_FIRE_RL_mb_tick_pulse_off_11,
       WILL_FIRE_RL_mb_tick_pulse_off_12,
       WILL_FIRE_RL_mb_tick_pulse_off_13,
       WILL_FIRE_RL_mb_tick_pulse_off_14,
       WILL_FIRE_RL_mb_tick_pulse_off_15,
       WILL_FIRE_RL_mb_tick_pulse_off_16,
       WILL_FIRE_RL_mb_tick_pulse_off_17,
       WILL_FIRE_RL_mb_tick_pulse_off_18,
       WILL_FIRE_RL_mb_tick_pulse_off_19,
       WILL_FIRE_RL_mb_tick_pulse_off_2,
       WILL_FIRE_RL_mb_tick_pulse_off_20,
       WILL_FIRE_RL_mb_tick_pulse_off_21,
       WILL_FIRE_RL_mb_tick_pulse_off_22,
       WILL_FIRE_RL_mb_tick_pulse_off_23,
       WILL_FIRE_RL_mb_tick_pulse_off_24,
       WILL_FIRE_RL_mb_tick_pulse_off_25,
       WILL_FIRE_RL_mb_tick_pulse_off_26,
       WILL_FIRE_RL_mb_tick_pulse_off_27,
       WILL_FIRE_RL_mb_tick_pulse_off_28,
       WILL_FIRE_RL_mb_tick_pulse_off_29,
       WILL_FIRE_RL_mb_tick_pulse_off_3,
       WILL_FIRE_RL_mb_tick_pulse_off_30,
       WILL_FIRE_RL_mb_tick_pulse_off_31,
       WILL_FIRE_RL_mb_tick_pulse_off_32,
       WILL_FIRE_RL_mb_tick_pulse_off_33,
       WILL_FIRE_RL_mb_tick_pulse_off_34,
       WILL_FIRE_RL_mb_tick_pulse_off_35,
       WILL_FIRE_RL_mb_tick_pulse_off_36,
       WILL_FIRE_RL_mb_tick_pulse_off_37,
       WILL_FIRE_RL_mb_tick_pulse_off_38,
       WILL_FIRE_RL_mb_tick_pulse_off_39,
       WILL_FIRE_RL_mb_tick_pulse_off_4,
       WILL_FIRE_RL_mb_tick_pulse_off_40,
       WILL_FIRE_RL_mb_tick_pulse_off_41,
       WILL_FIRE_RL_mb_tick_pulse_off_42,
       WILL_FIRE_RL_mb_tick_pulse_off_43,
       WILL_FIRE_RL_mb_tick_pulse_off_44,
       WILL_FIRE_RL_mb_tick_pulse_off_45,
       WILL_FIRE_RL_mb_tick_pulse_off_46,
       WILL_FIRE_RL_mb_tick_pulse_off_47,
       WILL_FIRE_RL_mb_tick_pulse_off_48,
       WILL_FIRE_RL_mb_tick_pulse_off_49,
       WILL_FIRE_RL_mb_tick_pulse_off_5,
       WILL_FIRE_RL_mb_tick_pulse_off_50,
       WILL_FIRE_RL_mb_tick_pulse_off_51,
       WILL_FIRE_RL_mb_tick_pulse_off_52,
       WILL_FIRE_RL_mb_tick_pulse_off_53,
       WILL_FIRE_RL_mb_tick_pulse_off_54,
       WILL_FIRE_RL_mb_tick_pulse_off_55,
       WILL_FIRE_RL_mb_tick_pulse_off_56,
       WILL_FIRE_RL_mb_tick_pulse_off_57,
       WILL_FIRE_RL_mb_tick_pulse_off_58,
       WILL_FIRE_RL_mb_tick_pulse_off_59,
       WILL_FIRE_RL_mb_tick_pulse_off_6,
       WILL_FIRE_RL_mb_tick_pulse_off_7,
       WILL_FIRE_RL_mb_tick_pulse_off_8,
       WILL_FIRE_RL_mb_tick_pulse_off_9,
       WILL_FIRE_RL_pulser,
       WILL_FIRE_getBeatInfo,
       WILL_FIRE_putSampleInput,
       WILL_FIRE_q_sync;

  // inputs to muxes for submodule ports
  wire [27 : 0] MUX_bc_cur_energy$write_1__VAL_1;
  wire [21 : 0] MUX_mb_counter$write_1__VAL_1,
		MUX_mb_counter_1$write_1__VAL_2,
		MUX_mb_counter_10$write_1__VAL_2,
		MUX_mb_counter_11$write_1__VAL_2,
		MUX_mb_counter_12$write_1__VAL_2,
		MUX_mb_counter_13$write_1__VAL_2,
		MUX_mb_counter_14$write_1__VAL_2,
		MUX_mb_counter_15$write_1__VAL_2,
		MUX_mb_counter_16$write_1__VAL_2,
		MUX_mb_counter_17$write_1__VAL_2,
		MUX_mb_counter_18$write_1__VAL_2,
		MUX_mb_counter_19$write_1__VAL_2,
		MUX_mb_counter_2$write_1__VAL_2,
		MUX_mb_counter_20$write_1__VAL_2,
		MUX_mb_counter_21$write_1__VAL_2,
		MUX_mb_counter_22$write_1__VAL_2,
		MUX_mb_counter_23$write_1__VAL_2,
		MUX_mb_counter_24$write_1__VAL_2,
		MUX_mb_counter_25$write_1__VAL_2,
		MUX_mb_counter_26$write_1__VAL_2,
		MUX_mb_counter_27$write_1__VAL_2,
		MUX_mb_counter_28$write_1__VAL_2,
		MUX_mb_counter_29$write_1__VAL_2,
		MUX_mb_counter_3$write_1__VAL_2,
		MUX_mb_counter_30$write_1__VAL_2,
		MUX_mb_counter_31$write_1__VAL_2,
		MUX_mb_counter_32$write_1__VAL_2,
		MUX_mb_counter_33$write_1__VAL_2,
		MUX_mb_counter_34$write_1__VAL_2,
		MUX_mb_counter_35$write_1__VAL_2,
		MUX_mb_counter_36$write_1__VAL_2,
		MUX_mb_counter_37$write_1__VAL_2,
		MUX_mb_counter_38$write_1__VAL_2,
		MUX_mb_counter_39$write_1__VAL_2,
		MUX_mb_counter_4$write_1__VAL_2,
		MUX_mb_counter_40$write_1__VAL_2,
		MUX_mb_counter_41$write_1__VAL_2,
		MUX_mb_counter_42$write_1__VAL_2,
		MUX_mb_counter_43$write_1__VAL_2,
		MUX_mb_counter_44$write_1__VAL_2,
		MUX_mb_counter_45$write_1__VAL_2,
		MUX_mb_counter_46$write_1__VAL_2,
		MUX_mb_counter_47$write_1__VAL_2,
		MUX_mb_counter_48$write_1__VAL_2,
		MUX_mb_counter_49$write_1__VAL_2,
		MUX_mb_counter_5$write_1__VAL_2,
		MUX_mb_counter_50$write_1__VAL_2,
		MUX_mb_counter_51$write_1__VAL_2,
		MUX_mb_counter_52$write_1__VAL_2,
		MUX_mb_counter_53$write_1__VAL_2,
		MUX_mb_counter_54$write_1__VAL_2,
		MUX_mb_counter_55$write_1__VAL_2,
		MUX_mb_counter_56$write_1__VAL_2,
		MUX_mb_counter_57$write_1__VAL_2,
		MUX_mb_counter_58$write_1__VAL_2,
		MUX_mb_counter_59$write_1__VAL_2,
		MUX_mb_counter_6$write_1__VAL_2,
		MUX_mb_counter_7$write_1__VAL_2,
		MUX_mb_counter_8$write_1__VAL_2,
		MUX_mb_counter_9$write_1__VAL_2;
  wire [11 : 0] MUX_bc_sample_count$write_1__VAL_1;
  wire [5 : 0] MUX_mb_out_count$write_1__VAL_1;
  wire MUX_bt_info$enq_1__SEL_1,
       MUX_mb_counter_1$write_1__SEL_1,
       MUX_mb_counter_10$write_1__SEL_1,
       MUX_mb_counter_11$write_1__SEL_1,
       MUX_mb_counter_12$write_1__SEL_1,
       MUX_mb_counter_13$write_1__SEL_1,
       MUX_mb_counter_14$write_1__SEL_1,
       MUX_mb_counter_15$write_1__SEL_1,
       MUX_mb_counter_16$write_1__SEL_1,
       MUX_mb_counter_17$write_1__SEL_1,
       MUX_mb_counter_18$write_1__SEL_1,
       MUX_mb_counter_19$write_1__SEL_1,
       MUX_mb_counter_2$write_1__SEL_1,
       MUX_mb_counter_20$write_1__SEL_1,
       MUX_mb_counter_21$write_1__SEL_1,
       MUX_mb_counter_22$write_1__SEL_1,
       MUX_mb_counter_23$write_1__SEL_1,
       MUX_mb_counter_24$write_1__SEL_1,
       MUX_mb_counter_25$write_1__SEL_1,
       MUX_mb_counter_26$write_1__SEL_1,
       MUX_mb_counter_27$write_1__SEL_1,
       MUX_mb_counter_28$write_1__SEL_1,
       MUX_mb_counter_29$write_1__SEL_1,
       MUX_mb_counter_3$write_1__SEL_1,
       MUX_mb_counter_30$write_1__SEL_1,
       MUX_mb_counter_31$write_1__SEL_1,
       MUX_mb_counter_32$write_1__SEL_1,
       MUX_mb_counter_33$write_1__SEL_1,
       MUX_mb_counter_34$write_1__SEL_1,
       MUX_mb_counter_35$write_1__SEL_1,
       MUX_mb_counter_36$write_1__SEL_1,
       MUX_mb_counter_37$write_1__SEL_1,
       MUX_mb_counter_38$write_1__SEL_1,
       MUX_mb_counter_39$write_1__SEL_1,
       MUX_mb_counter_4$write_1__SEL_1,
       MUX_mb_counter_40$write_1__SEL_1,
       MUX_mb_counter_41$write_1__SEL_1,
       MUX_mb_counter_42$write_1__SEL_1,
       MUX_mb_counter_43$write_1__SEL_1,
       MUX_mb_counter_44$write_1__SEL_1,
       MUX_mb_counter_45$write_1__SEL_1,
       MUX_mb_counter_46$write_1__SEL_1,
       MUX_mb_counter_47$write_1__SEL_1,
       MUX_mb_counter_48$write_1__SEL_1,
       MUX_mb_counter_49$write_1__SEL_1,
       MUX_mb_counter_5$write_1__SEL_1,
       MUX_mb_counter_50$write_1__SEL_1,
       MUX_mb_counter_51$write_1__SEL_1,
       MUX_mb_counter_52$write_1__SEL_1,
       MUX_mb_counter_53$write_1__SEL_1,
       MUX_mb_counter_54$write_1__SEL_1,
       MUX_mb_counter_55$write_1__SEL_1,
       MUX_mb_counter_56$write_1__SEL_1,
       MUX_mb_counter_57$write_1__SEL_1,
       MUX_mb_counter_58$write_1__SEL_1,
       MUX_mb_counter_59$write_1__SEL_1,
       MUX_mb_counter_6$write_1__SEL_1,
       MUX_mb_counter_7$write_1__SEL_1,
       MUX_mb_counter_8$write_1__SEL_1,
       MUX_mb_counter_9$write_1__SEL_1,
       MUX_mb_tick_pulse$write_1__SEL_1;

  // remaining internal signals
  reg [21 : 0] IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781;
  wire [27 : 0] IF_IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infif_ETC___d846,
		IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_IF_bc_avg_ETC___d785,
		IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_bc_avg_en_ETC___d847,
		IF_bc_cur_energy_BIT_27_4_THEN_NEG_bc_cur_ener_ETC___d848,
		IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infifo_f_ETC___d849;
  wire [13 : 0] x__h508;
  wire NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31,
       mb_valid_11_07_AND_NOT_mb_tick_pulse_11_08_25__ETC___d570,
       mb_valid_13_19_AND_NOT_mb_tick_pulse_13_20_29__ETC___d568,
       mb_valid_15_31_AND_NOT_mb_tick_pulse_15_32_33__ETC___d566,
       mb_valid_17_43_AND_NOT_mb_tick_pulse_17_44_37__ETC___d564,
       mb_valid_19_55_AND_NOT_mb_tick_pulse_19_56_41__ETC___d562,
       mb_valid_1_7_AND_NOT_mb_tick_pulse_1_8_05_06_A_ETC___d580,
       mb_valid_21_67_AND_NOT_mb_tick_pulse_21_68_45__ETC___d560,
       mb_valid_23_79_AND_NOT_mb_tick_pulse_23_80_49__ETC___d558,
       mb_valid_25_91_AND_NOT_mb_tick_pulse_25_92_53__ETC___d556,
       mb_valid_27_03_AND_NOT_mb_tick_pulse_27_04_57__ETC___d554,
       mb_valid_29_15_AND_NOT_mb_tick_pulse_29_16_61__ETC___d552,
       mb_valid_31_27_AND_NOT_mb_tick_pulse_31_28_65__ETC___d550,
       mb_valid_33_39_AND_NOT_mb_tick_pulse_33_40_69__ETC___d548,
       mb_valid_35_51_AND_NOT_mb_tick_pulse_35_52_73__ETC___d546,
       mb_valid_37_63_AND_NOT_mb_tick_pulse_37_64_77__ETC___d544,
       mb_valid_39_75_AND_NOT_mb_tick_pulse_39_76_81__ETC___d542,
       mb_valid_3_9_AND_NOT_mb_tick_pulse_3_0_09_10_A_ETC___d578,
       mb_valid_41_87_AND_NOT_mb_tick_pulse_41_88_85__ETC___d540,
       mb_valid_43_99_AND_NOT_mb_tick_pulse_43_00_89__ETC___d538,
       mb_valid_45_11_AND_NOT_mb_tick_pulse_45_12_93__ETC___d536,
       mb_valid_47_23_AND_NOT_mb_tick_pulse_47_24_97__ETC___d534,
       mb_valid_49_35_AND_NOT_mb_tick_pulse_49_36_01__ETC___d532,
       mb_valid_51_47_AND_NOT_mb_tick_pulse_51_48_05__ETC___d530,
       mb_valid_53_59_AND_NOT_mb_tick_pulse_53_60_09__ETC___d528,
       mb_valid_55_71_AND_NOT_mb_tick_pulse_55_72_13__ETC___d526,
       mb_valid_57_83_AND_NOT_mb_tick_pulse_57_84_17__ETC___d524,
       mb_valid_5_1_AND_NOT_mb_tick_pulse_5_2_13_14_A_ETC___d576,
       mb_valid_7_3_AND_NOT_mb_tick_pulse_7_4_17_18_A_ETC___d574,
       mb_valid_9_5_AND_NOT_mb_tick_pulse_9_6_21_22_A_ETC___d572;

  // action method q_sync
  assign RDY_q_sync = !sync_next ;
  assign CAN_FIRE_q_sync = !sync_next ;
  assign WILL_FIRE_q_sync = EN_q_sync ;

  // action method putSampleInput
  assign RDY_putSampleInput = bc_infifo$FULL_N ;
  assign CAN_FIRE_putSampleInput = bc_infifo$FULL_N ;
  assign WILL_FIRE_putSampleInput = EN_putSampleInput ;

  // actionvalue method getBeatInfo
  assign getBeatInfo = bt_info$D_OUT ;
  assign RDY_getBeatInfo = bt_info$EMPTY_N ;
  assign CAN_FIRE_getBeatInfo = bt_info$EMPTY_N ;
  assign WILL_FIRE_getBeatInfo = EN_getBeatInfo ;

  // submodule bc_infifo
  FIFO1 #(.width(32'd14), .guarded(32'd1)) bc_infifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(bc_infifo$D_IN),
						     .ENQ(bc_infifo$ENQ),
						     .DEQ(bc_infifo$DEQ),
						     .CLR(bc_infifo$CLR),
						     .D_OUT(bc_infifo$D_OUT),
						     .FULL_N(bc_infifo$FULL_N),
						     .EMPTY_N(bc_infifo$EMPTY_N));

  // submodule bc_outfifo
  FIFO1 #(.width(32'd28), .guarded(32'd1)) bc_outfifo(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(bc_outfifo$D_IN),
						      .ENQ(bc_outfifo$ENQ),
						      .DEQ(bc_outfifo$DEQ),
						      .CLR(bc_outfifo$CLR),
						      .D_OUT(bc_outfifo$D_OUT),
						      .FULL_N(bc_outfifo$FULL_N),
						      .EMPTY_N(bc_outfifo$EMPTY_N));

  // submodule bt_info
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd60),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) bt_info(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(bt_info$D_IN),
				       .ENQ(bt_info$ENQ),
				       .DEQ(bt_info$DEQ),
				       .CLR(bt_info$CLR),
				       .D_OUT(bt_info$D_OUT),
				       .FULL_N(bt_info$FULL_N),
				       .EMPTY_N(bt_info$EMPTY_N));

  // rule RL_pulser
  assign CAN_FIRE_RL_pulser =
	     mb_valid && !mb_tick_pulse &&
	     mb_valid_1_7_AND_NOT_mb_tick_pulse_1_8_05_06_A_ETC___d580 &&
	     init_done ;
  assign WILL_FIRE_RL_pulser = CAN_FIRE_RL_pulser ;

  // rule RL_beat_injector_start
  assign CAN_FIRE_RL_beat_injector_start =
	     bc_outfifo$EMPTY_N && bt_info$FULL_N && init_done &&
	     mb_out_count == 6'd0 ;
  assign WILL_FIRE_RL_beat_injector_start =
	     CAN_FIRE_RL_beat_injector_start && !EN_q_sync ;

  // rule RL_beat_injector_cont
  assign CAN_FIRE_RL_beat_injector_cont =
	     bt_info$FULL_N && init_done && mb_out_count != 6'd0 &&
	     mb_out_count < 6'd60 ;
  assign WILL_FIRE_RL_beat_injector_cont = CAN_FIRE_RL_beat_injector_cont ;

  // rule RL_bc_inject_sample
  assign CAN_FIRE_RL_bc_inject_sample =
	     bc_infifo$EMPTY_N && bc_sample_count != 12'd4095 ;
  assign WILL_FIRE_RL_bc_inject_sample = CAN_FIRE_RL_bc_inject_sample ;

  // rule RL_bc_compare_energies
  assign CAN_FIRE_RL_bc_compare_energies =
	     bc_outfifo$FULL_N && bc_sample_count == 12'd4095 ;
  assign WILL_FIRE_RL_bc_compare_energies = CAN_FIRE_RL_bc_compare_energies ;

  // rule RL_mb_metronome_counter
  assign CAN_FIRE_RL_mb_metronome_counter = mb_valid && mb_tick_pulse ;
  assign WILL_FIRE_RL_mb_metronome_counter =
	     CAN_FIRE_RL_mb_metronome_counter &&
	     !WILL_FIRE_RL_beat_injector_start ;

  // rule RL_mb_tick_pulse_off
  assign CAN_FIRE_RL_mb_tick_pulse_off = CAN_FIRE_RL_mb_metronome_counter ;
  assign WILL_FIRE_RL_mb_tick_pulse_off = CAN_FIRE_RL_mb_metronome_counter ;

  // rule RL_mb_metronome_counter_1
  assign CAN_FIRE_RL_mb_metronome_counter_1 =
	     CAN_FIRE_RL_mb_tick_pulse_off_1 ;
  assign WILL_FIRE_RL_mb_metronome_counter_1 =
	     CAN_FIRE_RL_mb_metronome_counter_1 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_1
  assign CAN_FIRE_RL_mb_tick_pulse_off_1 = mb_valid_1 && mb_tick_pulse_1 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_1 = CAN_FIRE_RL_mb_tick_pulse_off_1 ;

  // rule RL_mb_metronome_counter_2
  assign CAN_FIRE_RL_mb_metronome_counter_2 = mb_valid_2 && mb_tick_pulse_2 ;
  assign WILL_FIRE_RL_mb_metronome_counter_2 =
	     CAN_FIRE_RL_mb_metronome_counter_2 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_2
  assign CAN_FIRE_RL_mb_tick_pulse_off_2 =
	     CAN_FIRE_RL_mb_metronome_counter_2 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_2 =
	     CAN_FIRE_RL_mb_metronome_counter_2 ;

  // rule RL_mb_metronome_counter_3
  assign CAN_FIRE_RL_mb_metronome_counter_3 = mb_valid_3 && mb_tick_pulse_3 ;
  assign WILL_FIRE_RL_mb_metronome_counter_3 =
	     CAN_FIRE_RL_mb_metronome_counter_3 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_3
  assign CAN_FIRE_RL_mb_tick_pulse_off_3 =
	     CAN_FIRE_RL_mb_metronome_counter_3 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_3 =
	     CAN_FIRE_RL_mb_metronome_counter_3 ;

  // rule RL_mb_metronome_counter_4
  assign CAN_FIRE_RL_mb_metronome_counter_4 =
	     CAN_FIRE_RL_mb_tick_pulse_off_4 ;
  assign WILL_FIRE_RL_mb_metronome_counter_4 =
	     CAN_FIRE_RL_mb_metronome_counter_4 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_4
  assign CAN_FIRE_RL_mb_tick_pulse_off_4 = mb_valid_4 && mb_tick_pulse_4 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_4 = CAN_FIRE_RL_mb_tick_pulse_off_4 ;

  // rule RL_mb_metronome_counter_5
  assign CAN_FIRE_RL_mb_metronome_counter_5 = mb_valid_5 && mb_tick_pulse_5 ;
  assign WILL_FIRE_RL_mb_metronome_counter_5 =
	     CAN_FIRE_RL_mb_metronome_counter_5 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_5
  assign CAN_FIRE_RL_mb_tick_pulse_off_5 =
	     CAN_FIRE_RL_mb_metronome_counter_5 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_5 =
	     CAN_FIRE_RL_mb_metronome_counter_5 ;

  // rule RL_mb_metronome_counter_6
  assign CAN_FIRE_RL_mb_metronome_counter_6 = mb_valid_6 && mb_tick_pulse_6 ;
  assign WILL_FIRE_RL_mb_metronome_counter_6 =
	     CAN_FIRE_RL_mb_metronome_counter_6 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_6
  assign CAN_FIRE_RL_mb_tick_pulse_off_6 =
	     CAN_FIRE_RL_mb_metronome_counter_6 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_6 =
	     CAN_FIRE_RL_mb_metronome_counter_6 ;

  // rule RL_mb_metronome_counter_7
  assign CAN_FIRE_RL_mb_metronome_counter_7 = mb_valid_7 && mb_tick_pulse_7 ;
  assign WILL_FIRE_RL_mb_metronome_counter_7 =
	     CAN_FIRE_RL_mb_metronome_counter_7 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_7
  assign CAN_FIRE_RL_mb_tick_pulse_off_7 =
	     CAN_FIRE_RL_mb_metronome_counter_7 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_7 =
	     CAN_FIRE_RL_mb_metronome_counter_7 ;

  // rule RL_mb_metronome_counter_8
  assign CAN_FIRE_RL_mb_metronome_counter_8 = mb_valid_8 && mb_tick_pulse_8 ;
  assign WILL_FIRE_RL_mb_metronome_counter_8 =
	     CAN_FIRE_RL_mb_metronome_counter_8 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_8
  assign CAN_FIRE_RL_mb_tick_pulse_off_8 =
	     CAN_FIRE_RL_mb_metronome_counter_8 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_8 =
	     CAN_FIRE_RL_mb_metronome_counter_8 ;

  // rule RL_mb_metronome_counter_9
  assign CAN_FIRE_RL_mb_metronome_counter_9 = mb_valid_9 && mb_tick_pulse_9 ;
  assign WILL_FIRE_RL_mb_metronome_counter_9 =
	     CAN_FIRE_RL_mb_metronome_counter_9 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_9
  assign CAN_FIRE_RL_mb_tick_pulse_off_9 =
	     CAN_FIRE_RL_mb_metronome_counter_9 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_9 =
	     CAN_FIRE_RL_mb_metronome_counter_9 ;

  // rule RL_mb_metronome_counter_10
  assign CAN_FIRE_RL_mb_metronome_counter_10 =
	     mb_valid_10 && mb_tick_pulse_10 ;
  assign WILL_FIRE_RL_mb_metronome_counter_10 =
	     CAN_FIRE_RL_mb_metronome_counter_10 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_10
  assign CAN_FIRE_RL_mb_tick_pulse_off_10 =
	     CAN_FIRE_RL_mb_metronome_counter_10 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_10 =
	     CAN_FIRE_RL_mb_metronome_counter_10 ;

  // rule RL_mb_metronome_counter_11
  assign CAN_FIRE_RL_mb_metronome_counter_11 =
	     mb_valid_11 && mb_tick_pulse_11 ;
  assign WILL_FIRE_RL_mb_metronome_counter_11 =
	     CAN_FIRE_RL_mb_metronome_counter_11 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_11
  assign CAN_FIRE_RL_mb_tick_pulse_off_11 =
	     CAN_FIRE_RL_mb_metronome_counter_11 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_11 =
	     CAN_FIRE_RL_mb_metronome_counter_11 ;

  // rule RL_mb_metronome_counter_12
  assign CAN_FIRE_RL_mb_metronome_counter_12 =
	     mb_valid_12 && mb_tick_pulse_12 ;
  assign WILL_FIRE_RL_mb_metronome_counter_12 =
	     CAN_FIRE_RL_mb_metronome_counter_12 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_12
  assign CAN_FIRE_RL_mb_tick_pulse_off_12 =
	     CAN_FIRE_RL_mb_metronome_counter_12 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_12 =
	     CAN_FIRE_RL_mb_metronome_counter_12 ;

  // rule RL_mb_metronome_counter_13
  assign CAN_FIRE_RL_mb_metronome_counter_13 =
	     mb_valid_13 && mb_tick_pulse_13 ;
  assign WILL_FIRE_RL_mb_metronome_counter_13 =
	     CAN_FIRE_RL_mb_metronome_counter_13 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_13
  assign CAN_FIRE_RL_mb_tick_pulse_off_13 =
	     CAN_FIRE_RL_mb_metronome_counter_13 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_13 =
	     CAN_FIRE_RL_mb_metronome_counter_13 ;

  // rule RL_mb_metronome_counter_14
  assign CAN_FIRE_RL_mb_metronome_counter_14 =
	     CAN_FIRE_RL_mb_tick_pulse_off_14 ;
  assign WILL_FIRE_RL_mb_metronome_counter_14 =
	     CAN_FIRE_RL_mb_metronome_counter_14 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_14
  assign CAN_FIRE_RL_mb_tick_pulse_off_14 = mb_valid_14 && mb_tick_pulse_14 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_14 =
	     CAN_FIRE_RL_mb_tick_pulse_off_14 ;

  // rule RL_mb_metronome_counter_15
  assign CAN_FIRE_RL_mb_metronome_counter_15 =
	     mb_valid_15 && mb_tick_pulse_15 ;
  assign WILL_FIRE_RL_mb_metronome_counter_15 =
	     CAN_FIRE_RL_mb_metronome_counter_15 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_15
  assign CAN_FIRE_RL_mb_tick_pulse_off_15 =
	     CAN_FIRE_RL_mb_metronome_counter_15 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_15 =
	     CAN_FIRE_RL_mb_metronome_counter_15 ;

  // rule RL_mb_metronome_counter_16
  assign CAN_FIRE_RL_mb_metronome_counter_16 =
	     mb_valid_16 && mb_tick_pulse_16 ;
  assign WILL_FIRE_RL_mb_metronome_counter_16 =
	     CAN_FIRE_RL_mb_metronome_counter_16 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_16
  assign CAN_FIRE_RL_mb_tick_pulse_off_16 =
	     CAN_FIRE_RL_mb_metronome_counter_16 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_16 =
	     CAN_FIRE_RL_mb_metronome_counter_16 ;

  // rule RL_mb_metronome_counter_17
  assign CAN_FIRE_RL_mb_metronome_counter_17 =
	     CAN_FIRE_RL_mb_tick_pulse_off_17 ;
  assign WILL_FIRE_RL_mb_metronome_counter_17 =
	     CAN_FIRE_RL_mb_metronome_counter_17 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_17
  assign CAN_FIRE_RL_mb_tick_pulse_off_17 = mb_valid_17 && mb_tick_pulse_17 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_17 =
	     CAN_FIRE_RL_mb_tick_pulse_off_17 ;

  // rule RL_mb_metronome_counter_18
  assign CAN_FIRE_RL_mb_metronome_counter_18 =
	     mb_valid_18 && mb_tick_pulse_18 ;
  assign WILL_FIRE_RL_mb_metronome_counter_18 =
	     CAN_FIRE_RL_mb_metronome_counter_18 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_18
  assign CAN_FIRE_RL_mb_tick_pulse_off_18 =
	     CAN_FIRE_RL_mb_metronome_counter_18 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_18 =
	     CAN_FIRE_RL_mb_metronome_counter_18 ;

  // rule RL_mb_metronome_counter_19
  assign CAN_FIRE_RL_mb_metronome_counter_19 =
	     mb_valid_19 && mb_tick_pulse_19 ;
  assign WILL_FIRE_RL_mb_metronome_counter_19 =
	     CAN_FIRE_RL_mb_metronome_counter_19 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_19
  assign CAN_FIRE_RL_mb_tick_pulse_off_19 =
	     CAN_FIRE_RL_mb_metronome_counter_19 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_19 =
	     CAN_FIRE_RL_mb_metronome_counter_19 ;

  // rule RL_mb_metronome_counter_20
  assign CAN_FIRE_RL_mb_metronome_counter_20 =
	     mb_valid_20 && mb_tick_pulse_20 ;
  assign WILL_FIRE_RL_mb_metronome_counter_20 =
	     CAN_FIRE_RL_mb_metronome_counter_20 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_20
  assign CAN_FIRE_RL_mb_tick_pulse_off_20 =
	     CAN_FIRE_RL_mb_metronome_counter_20 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_20 =
	     CAN_FIRE_RL_mb_metronome_counter_20 ;

  // rule RL_mb_metronome_counter_21
  assign CAN_FIRE_RL_mb_metronome_counter_21 =
	     mb_valid_21 && mb_tick_pulse_21 ;
  assign WILL_FIRE_RL_mb_metronome_counter_21 =
	     CAN_FIRE_RL_mb_metronome_counter_21 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_21
  assign CAN_FIRE_RL_mb_tick_pulse_off_21 =
	     CAN_FIRE_RL_mb_metronome_counter_21 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_21 =
	     CAN_FIRE_RL_mb_metronome_counter_21 ;

  // rule RL_mb_metronome_counter_22
  assign CAN_FIRE_RL_mb_metronome_counter_22 =
	     mb_valid_22 && mb_tick_pulse_22 ;
  assign WILL_FIRE_RL_mb_metronome_counter_22 =
	     CAN_FIRE_RL_mb_metronome_counter_22 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_22
  assign CAN_FIRE_RL_mb_tick_pulse_off_22 =
	     CAN_FIRE_RL_mb_metronome_counter_22 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_22 =
	     CAN_FIRE_RL_mb_metronome_counter_22 ;

  // rule RL_mb_metronome_counter_23
  assign CAN_FIRE_RL_mb_metronome_counter_23 =
	     mb_valid_23 && mb_tick_pulse_23 ;
  assign WILL_FIRE_RL_mb_metronome_counter_23 =
	     CAN_FIRE_RL_mb_metronome_counter_23 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_23
  assign CAN_FIRE_RL_mb_tick_pulse_off_23 =
	     CAN_FIRE_RL_mb_metronome_counter_23 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_23 =
	     CAN_FIRE_RL_mb_metronome_counter_23 ;

  // rule RL_mb_metronome_counter_24
  assign CAN_FIRE_RL_mb_metronome_counter_24 =
	     mb_valid_24 && mb_tick_pulse_24 ;
  assign WILL_FIRE_RL_mb_metronome_counter_24 =
	     CAN_FIRE_RL_mb_metronome_counter_24 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_24
  assign CAN_FIRE_RL_mb_tick_pulse_off_24 =
	     CAN_FIRE_RL_mb_metronome_counter_24 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_24 =
	     CAN_FIRE_RL_mb_metronome_counter_24 ;

  // rule RL_mb_metronome_counter_25
  assign CAN_FIRE_RL_mb_metronome_counter_25 =
	     mb_valid_25 && mb_tick_pulse_25 ;
  assign WILL_FIRE_RL_mb_metronome_counter_25 =
	     CAN_FIRE_RL_mb_metronome_counter_25 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_25
  assign CAN_FIRE_RL_mb_tick_pulse_off_25 =
	     CAN_FIRE_RL_mb_metronome_counter_25 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_25 =
	     CAN_FIRE_RL_mb_metronome_counter_25 ;

  // rule RL_mb_metronome_counter_26
  assign CAN_FIRE_RL_mb_metronome_counter_26 =
	     mb_valid_26 && mb_tick_pulse_26 ;
  assign WILL_FIRE_RL_mb_metronome_counter_26 =
	     CAN_FIRE_RL_mb_metronome_counter_26 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_26
  assign CAN_FIRE_RL_mb_tick_pulse_off_26 =
	     CAN_FIRE_RL_mb_metronome_counter_26 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_26 =
	     CAN_FIRE_RL_mb_metronome_counter_26 ;

  // rule RL_mb_metronome_counter_27
  assign CAN_FIRE_RL_mb_metronome_counter_27 =
	     CAN_FIRE_RL_mb_tick_pulse_off_27 ;
  assign WILL_FIRE_RL_mb_metronome_counter_27 =
	     CAN_FIRE_RL_mb_metronome_counter_27 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_27
  assign CAN_FIRE_RL_mb_tick_pulse_off_27 = mb_valid_27 && mb_tick_pulse_27 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_27 =
	     CAN_FIRE_RL_mb_tick_pulse_off_27 ;

  // rule RL_mb_metronome_counter_28
  assign CAN_FIRE_RL_mb_metronome_counter_28 =
	     mb_valid_28 && mb_tick_pulse_28 ;
  assign WILL_FIRE_RL_mb_metronome_counter_28 =
	     CAN_FIRE_RL_mb_metronome_counter_28 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_28
  assign CAN_FIRE_RL_mb_tick_pulse_off_28 =
	     CAN_FIRE_RL_mb_metronome_counter_28 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_28 =
	     CAN_FIRE_RL_mb_metronome_counter_28 ;

  // rule RL_mb_metronome_counter_29
  assign CAN_FIRE_RL_mb_metronome_counter_29 =
	     mb_valid_29 && mb_tick_pulse_29 ;
  assign WILL_FIRE_RL_mb_metronome_counter_29 =
	     CAN_FIRE_RL_mb_metronome_counter_29 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_29
  assign CAN_FIRE_RL_mb_tick_pulse_off_29 =
	     CAN_FIRE_RL_mb_metronome_counter_29 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_29 =
	     CAN_FIRE_RL_mb_metronome_counter_29 ;

  // rule RL_mb_metronome_counter_30
  assign CAN_FIRE_RL_mb_metronome_counter_30 =
	     CAN_FIRE_RL_mb_tick_pulse_off_30 ;
  assign WILL_FIRE_RL_mb_metronome_counter_30 =
	     CAN_FIRE_RL_mb_metronome_counter_30 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_30
  assign CAN_FIRE_RL_mb_tick_pulse_off_30 = mb_valid_30 && mb_tick_pulse_30 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_30 =
	     CAN_FIRE_RL_mb_tick_pulse_off_30 ;

  // rule RL_mb_metronome_counter_31
  assign CAN_FIRE_RL_mb_metronome_counter_31 =
	     mb_valid_31 && mb_tick_pulse_31 ;
  assign WILL_FIRE_RL_mb_metronome_counter_31 =
	     CAN_FIRE_RL_mb_metronome_counter_31 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_31
  assign CAN_FIRE_RL_mb_tick_pulse_off_31 =
	     CAN_FIRE_RL_mb_metronome_counter_31 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_31 =
	     CAN_FIRE_RL_mb_metronome_counter_31 ;

  // rule RL_mb_metronome_counter_32
  assign CAN_FIRE_RL_mb_metronome_counter_32 =
	     mb_valid_32 && mb_tick_pulse_32 ;
  assign WILL_FIRE_RL_mb_metronome_counter_32 =
	     CAN_FIRE_RL_mb_metronome_counter_32 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_32
  assign CAN_FIRE_RL_mb_tick_pulse_off_32 =
	     CAN_FIRE_RL_mb_metronome_counter_32 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_32 =
	     CAN_FIRE_RL_mb_metronome_counter_32 ;

  // rule RL_mb_metronome_counter_33
  assign CAN_FIRE_RL_mb_metronome_counter_33 =
	     mb_valid_33 && mb_tick_pulse_33 ;
  assign WILL_FIRE_RL_mb_metronome_counter_33 =
	     CAN_FIRE_RL_mb_metronome_counter_33 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_33
  assign CAN_FIRE_RL_mb_tick_pulse_off_33 =
	     CAN_FIRE_RL_mb_metronome_counter_33 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_33 =
	     CAN_FIRE_RL_mb_metronome_counter_33 ;

  // rule RL_mb_metronome_counter_34
  assign CAN_FIRE_RL_mb_metronome_counter_34 =
	     mb_valid_34 && mb_tick_pulse_34 ;
  assign WILL_FIRE_RL_mb_metronome_counter_34 =
	     CAN_FIRE_RL_mb_metronome_counter_34 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_34
  assign CAN_FIRE_RL_mb_tick_pulse_off_34 =
	     CAN_FIRE_RL_mb_metronome_counter_34 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_34 =
	     CAN_FIRE_RL_mb_metronome_counter_34 ;

  // rule RL_mb_metronome_counter_35
  assign CAN_FIRE_RL_mb_metronome_counter_35 =
	     mb_valid_35 && mb_tick_pulse_35 ;
  assign WILL_FIRE_RL_mb_metronome_counter_35 =
	     CAN_FIRE_RL_mb_metronome_counter_35 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_35
  assign CAN_FIRE_RL_mb_tick_pulse_off_35 =
	     CAN_FIRE_RL_mb_metronome_counter_35 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_35 =
	     CAN_FIRE_RL_mb_metronome_counter_35 ;

  // rule RL_mb_metronome_counter_36
  assign CAN_FIRE_RL_mb_metronome_counter_36 =
	     mb_valid_36 && mb_tick_pulse_36 ;
  assign WILL_FIRE_RL_mb_metronome_counter_36 =
	     CAN_FIRE_RL_mb_metronome_counter_36 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_36
  assign CAN_FIRE_RL_mb_tick_pulse_off_36 =
	     CAN_FIRE_RL_mb_metronome_counter_36 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_36 =
	     CAN_FIRE_RL_mb_metronome_counter_36 ;

  // rule RL_mb_metronome_counter_37
  assign CAN_FIRE_RL_mb_metronome_counter_37 =
	     mb_valid_37 && mb_tick_pulse_37 ;
  assign WILL_FIRE_RL_mb_metronome_counter_37 =
	     CAN_FIRE_RL_mb_metronome_counter_37 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_37
  assign CAN_FIRE_RL_mb_tick_pulse_off_37 =
	     CAN_FIRE_RL_mb_metronome_counter_37 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_37 =
	     CAN_FIRE_RL_mb_metronome_counter_37 ;

  // rule RL_mb_metronome_counter_38
  assign CAN_FIRE_RL_mb_metronome_counter_38 =
	     mb_valid_38 && mb_tick_pulse_38 ;
  assign WILL_FIRE_RL_mb_metronome_counter_38 =
	     CAN_FIRE_RL_mb_metronome_counter_38 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_38
  assign CAN_FIRE_RL_mb_tick_pulse_off_38 =
	     CAN_FIRE_RL_mb_metronome_counter_38 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_38 =
	     CAN_FIRE_RL_mb_metronome_counter_38 ;

  // rule RL_mb_metronome_counter_39
  assign CAN_FIRE_RL_mb_metronome_counter_39 =
	     mb_valid_39 && mb_tick_pulse_39 ;
  assign WILL_FIRE_RL_mb_metronome_counter_39 =
	     CAN_FIRE_RL_mb_metronome_counter_39 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_39
  assign CAN_FIRE_RL_mb_tick_pulse_off_39 =
	     CAN_FIRE_RL_mb_metronome_counter_39 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_39 =
	     CAN_FIRE_RL_mb_metronome_counter_39 ;

  // rule RL_mb_metronome_counter_40
  assign CAN_FIRE_RL_mb_metronome_counter_40 =
	     CAN_FIRE_RL_mb_tick_pulse_off_40 ;
  assign WILL_FIRE_RL_mb_metronome_counter_40 =
	     CAN_FIRE_RL_mb_metronome_counter_40 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_40
  assign CAN_FIRE_RL_mb_tick_pulse_off_40 = mb_valid_40 && mb_tick_pulse_40 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_40 =
	     CAN_FIRE_RL_mb_tick_pulse_off_40 ;

  // rule RL_mb_metronome_counter_41
  assign CAN_FIRE_RL_mb_metronome_counter_41 =
	     mb_valid_41 && mb_tick_pulse_41 ;
  assign WILL_FIRE_RL_mb_metronome_counter_41 =
	     CAN_FIRE_RL_mb_metronome_counter_41 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_41
  assign CAN_FIRE_RL_mb_tick_pulse_off_41 =
	     CAN_FIRE_RL_mb_metronome_counter_41 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_41 =
	     CAN_FIRE_RL_mb_metronome_counter_41 ;

  // rule RL_mb_metronome_counter_42
  assign CAN_FIRE_RL_mb_metronome_counter_42 =
	     mb_valid_42 && mb_tick_pulse_42 ;
  assign WILL_FIRE_RL_mb_metronome_counter_42 =
	     CAN_FIRE_RL_mb_metronome_counter_42 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_42
  assign CAN_FIRE_RL_mb_tick_pulse_off_42 =
	     CAN_FIRE_RL_mb_metronome_counter_42 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_42 =
	     CAN_FIRE_RL_mb_metronome_counter_42 ;

  // rule RL_mb_metronome_counter_43
  assign CAN_FIRE_RL_mb_metronome_counter_43 =
	     CAN_FIRE_RL_mb_tick_pulse_off_43 ;
  assign WILL_FIRE_RL_mb_metronome_counter_43 =
	     CAN_FIRE_RL_mb_metronome_counter_43 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_43
  assign CAN_FIRE_RL_mb_tick_pulse_off_43 = mb_valid_43 && mb_tick_pulse_43 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_43 =
	     CAN_FIRE_RL_mb_tick_pulse_off_43 ;

  // rule RL_mb_metronome_counter_44
  assign CAN_FIRE_RL_mb_metronome_counter_44 =
	     mb_valid_44 && mb_tick_pulse_44 ;
  assign WILL_FIRE_RL_mb_metronome_counter_44 =
	     CAN_FIRE_RL_mb_metronome_counter_44 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_44
  assign CAN_FIRE_RL_mb_tick_pulse_off_44 =
	     CAN_FIRE_RL_mb_metronome_counter_44 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_44 =
	     CAN_FIRE_RL_mb_metronome_counter_44 ;

  // rule RL_mb_metronome_counter_45
  assign CAN_FIRE_RL_mb_metronome_counter_45 =
	     mb_valid_45 && mb_tick_pulse_45 ;
  assign WILL_FIRE_RL_mb_metronome_counter_45 =
	     CAN_FIRE_RL_mb_metronome_counter_45 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_45
  assign CAN_FIRE_RL_mb_tick_pulse_off_45 =
	     CAN_FIRE_RL_mb_metronome_counter_45 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_45 =
	     CAN_FIRE_RL_mb_metronome_counter_45 ;

  // rule RL_mb_metronome_counter_46
  assign CAN_FIRE_RL_mb_metronome_counter_46 =
	     mb_valid_46 && mb_tick_pulse_46 ;
  assign WILL_FIRE_RL_mb_metronome_counter_46 =
	     CAN_FIRE_RL_mb_metronome_counter_46 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_46
  assign CAN_FIRE_RL_mb_tick_pulse_off_46 =
	     CAN_FIRE_RL_mb_metronome_counter_46 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_46 =
	     CAN_FIRE_RL_mb_metronome_counter_46 ;

  // rule RL_mb_metronome_counter_47
  assign CAN_FIRE_RL_mb_metronome_counter_47 =
	     mb_valid_47 && mb_tick_pulse_47 ;
  assign WILL_FIRE_RL_mb_metronome_counter_47 =
	     CAN_FIRE_RL_mb_metronome_counter_47 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_47
  assign CAN_FIRE_RL_mb_tick_pulse_off_47 =
	     CAN_FIRE_RL_mb_metronome_counter_47 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_47 =
	     CAN_FIRE_RL_mb_metronome_counter_47 ;

  // rule RL_mb_metronome_counter_48
  assign CAN_FIRE_RL_mb_metronome_counter_48 =
	     mb_valid_48 && mb_tick_pulse_48 ;
  assign WILL_FIRE_RL_mb_metronome_counter_48 =
	     CAN_FIRE_RL_mb_metronome_counter_48 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_48
  assign CAN_FIRE_RL_mb_tick_pulse_off_48 =
	     CAN_FIRE_RL_mb_metronome_counter_48 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_48 =
	     CAN_FIRE_RL_mb_metronome_counter_48 ;

  // rule RL_mb_metronome_counter_49
  assign CAN_FIRE_RL_mb_metronome_counter_49 =
	     mb_valid_49 && mb_tick_pulse_49 ;
  assign WILL_FIRE_RL_mb_metronome_counter_49 =
	     CAN_FIRE_RL_mb_metronome_counter_49 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_49
  assign CAN_FIRE_RL_mb_tick_pulse_off_49 =
	     CAN_FIRE_RL_mb_metronome_counter_49 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_49 =
	     CAN_FIRE_RL_mb_metronome_counter_49 ;

  // rule RL_mb_metronome_counter_50
  assign CAN_FIRE_RL_mb_metronome_counter_50 =
	     mb_valid_50 && mb_tick_pulse_50 ;
  assign WILL_FIRE_RL_mb_metronome_counter_50 =
	     CAN_FIRE_RL_mb_metronome_counter_50 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_50
  assign CAN_FIRE_RL_mb_tick_pulse_off_50 =
	     CAN_FIRE_RL_mb_metronome_counter_50 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_50 =
	     CAN_FIRE_RL_mb_metronome_counter_50 ;

  // rule RL_mb_metronome_counter_51
  assign CAN_FIRE_RL_mb_metronome_counter_51 =
	     mb_valid_51 && mb_tick_pulse_51 ;
  assign WILL_FIRE_RL_mb_metronome_counter_51 =
	     CAN_FIRE_RL_mb_metronome_counter_51 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_51
  assign CAN_FIRE_RL_mb_tick_pulse_off_51 =
	     CAN_FIRE_RL_mb_metronome_counter_51 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_51 =
	     CAN_FIRE_RL_mb_metronome_counter_51 ;

  // rule RL_mb_metronome_counter_52
  assign CAN_FIRE_RL_mb_metronome_counter_52 =
	     mb_valid_52 && mb_tick_pulse_52 ;
  assign WILL_FIRE_RL_mb_metronome_counter_52 =
	     CAN_FIRE_RL_mb_metronome_counter_52 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_52
  assign CAN_FIRE_RL_mb_tick_pulse_off_52 =
	     CAN_FIRE_RL_mb_metronome_counter_52 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_52 =
	     CAN_FIRE_RL_mb_metronome_counter_52 ;

  // rule RL_mb_metronome_counter_53
  assign CAN_FIRE_RL_mb_metronome_counter_53 =
	     CAN_FIRE_RL_mb_tick_pulse_off_53 ;
  assign WILL_FIRE_RL_mb_metronome_counter_53 =
	     CAN_FIRE_RL_mb_metronome_counter_53 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_53
  assign CAN_FIRE_RL_mb_tick_pulse_off_53 = mb_valid_53 && mb_tick_pulse_53 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_53 =
	     CAN_FIRE_RL_mb_tick_pulse_off_53 ;

  // rule RL_mb_metronome_counter_54
  assign CAN_FIRE_RL_mb_metronome_counter_54 =
	     mb_valid_54 && mb_tick_pulse_54 ;
  assign WILL_FIRE_RL_mb_metronome_counter_54 =
	     CAN_FIRE_RL_mb_metronome_counter_54 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_54
  assign CAN_FIRE_RL_mb_tick_pulse_off_54 =
	     CAN_FIRE_RL_mb_metronome_counter_54 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_54 =
	     CAN_FIRE_RL_mb_metronome_counter_54 ;

  // rule RL_mb_metronome_counter_55
  assign CAN_FIRE_RL_mb_metronome_counter_55 =
	     mb_valid_55 && mb_tick_pulse_55 ;
  assign WILL_FIRE_RL_mb_metronome_counter_55 =
	     CAN_FIRE_RL_mb_metronome_counter_55 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_55
  assign CAN_FIRE_RL_mb_tick_pulse_off_55 =
	     CAN_FIRE_RL_mb_metronome_counter_55 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_55 =
	     CAN_FIRE_RL_mb_metronome_counter_55 ;

  // rule RL_mb_metronome_counter_56
  assign CAN_FIRE_RL_mb_metronome_counter_56 =
	     CAN_FIRE_RL_mb_tick_pulse_off_56 ;
  assign WILL_FIRE_RL_mb_metronome_counter_56 =
	     CAN_FIRE_RL_mb_metronome_counter_56 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_56
  assign CAN_FIRE_RL_mb_tick_pulse_off_56 = mb_valid_56 && mb_tick_pulse_56 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_56 =
	     CAN_FIRE_RL_mb_tick_pulse_off_56 ;

  // rule RL_mb_metronome_counter_57
  assign CAN_FIRE_RL_mb_metronome_counter_57 =
	     mb_valid_57 && mb_tick_pulse_57 ;
  assign WILL_FIRE_RL_mb_metronome_counter_57 =
	     CAN_FIRE_RL_mb_metronome_counter_57 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_57
  assign CAN_FIRE_RL_mb_tick_pulse_off_57 =
	     CAN_FIRE_RL_mb_metronome_counter_57 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_57 =
	     CAN_FIRE_RL_mb_metronome_counter_57 ;

  // rule RL_mb_metronome_counter_58
  assign CAN_FIRE_RL_mb_metronome_counter_58 =
	     mb_valid_58 && mb_tick_pulse_58 ;
  assign WILL_FIRE_RL_mb_metronome_counter_58 =
	     CAN_FIRE_RL_mb_metronome_counter_58 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_58
  assign CAN_FIRE_RL_mb_tick_pulse_off_58 =
	     CAN_FIRE_RL_mb_metronome_counter_58 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_58 =
	     CAN_FIRE_RL_mb_metronome_counter_58 ;

  // rule RL_mb_metronome_counter_59
  assign CAN_FIRE_RL_mb_metronome_counter_59 =
	     mb_valid_59 && mb_tick_pulse_59 ;
  assign WILL_FIRE_RL_mb_metronome_counter_59 =
	     CAN_FIRE_RL_mb_metronome_counter_59 &&
	     !WILL_FIRE_RL_beat_injector_cont ;

  // rule RL_mb_tick_pulse_off_59
  assign CAN_FIRE_RL_mb_tick_pulse_off_59 =
	     CAN_FIRE_RL_mb_metronome_counter_59 ;
  assign WILL_FIRE_RL_mb_tick_pulse_off_59 =
	     CAN_FIRE_RL_mb_metronome_counter_59 ;

  // rule RL_init
  assign CAN_FIRE_RL_init = !init_done ;
  assign WILL_FIRE_RL_init = CAN_FIRE_RL_init ;

  // inputs to muxes for submodule ports
  assign MUX_bt_info$enq_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_start && sync_next ;
  assign MUX_mb_counter_1$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd1 ;
  assign MUX_mb_counter_10$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd10 ;
  assign MUX_mb_counter_11$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd11 ;
  assign MUX_mb_counter_12$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd12 ;
  assign MUX_mb_counter_13$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd13 ;
  assign MUX_mb_counter_14$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd14 ;
  assign MUX_mb_counter_15$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd15 ;
  assign MUX_mb_counter_16$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd16 ;
  assign MUX_mb_counter_17$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd17 ;
  assign MUX_mb_counter_18$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd18 ;
  assign MUX_mb_counter_19$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd19 ;
  assign MUX_mb_counter_2$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd2 ;
  assign MUX_mb_counter_20$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd20 ;
  assign MUX_mb_counter_21$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd21 ;
  assign MUX_mb_counter_22$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd22 ;
  assign MUX_mb_counter_23$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd23 ;
  assign MUX_mb_counter_24$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd24 ;
  assign MUX_mb_counter_25$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd25 ;
  assign MUX_mb_counter_26$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd26 ;
  assign MUX_mb_counter_27$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd27 ;
  assign MUX_mb_counter_28$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd28 ;
  assign MUX_mb_counter_29$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd29 ;
  assign MUX_mb_counter_3$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd3 ;
  assign MUX_mb_counter_30$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd30 ;
  assign MUX_mb_counter_31$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd31 ;
  assign MUX_mb_counter_32$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd32 ;
  assign MUX_mb_counter_33$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd33 ;
  assign MUX_mb_counter_34$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd34 ;
  assign MUX_mb_counter_35$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd35 ;
  assign MUX_mb_counter_36$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd36 ;
  assign MUX_mb_counter_37$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd37 ;
  assign MUX_mb_counter_38$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd38 ;
  assign MUX_mb_counter_39$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd39 ;
  assign MUX_mb_counter_4$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd4 ;
  assign MUX_mb_counter_40$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd40 ;
  assign MUX_mb_counter_41$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd41 ;
  assign MUX_mb_counter_42$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd42 ;
  assign MUX_mb_counter_43$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd43 ;
  assign MUX_mb_counter_44$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd44 ;
  assign MUX_mb_counter_45$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd45 ;
  assign MUX_mb_counter_46$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd46 ;
  assign MUX_mb_counter_47$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd47 ;
  assign MUX_mb_counter_48$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd48 ;
  assign MUX_mb_counter_49$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd49 ;
  assign MUX_mb_counter_5$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd5 ;
  assign MUX_mb_counter_50$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd50 ;
  assign MUX_mb_counter_51$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd51 ;
  assign MUX_mb_counter_52$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd52 ;
  assign MUX_mb_counter_53$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd53 ;
  assign MUX_mb_counter_54$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd54 ;
  assign MUX_mb_counter_55$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd55 ;
  assign MUX_mb_counter_56$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd56 ;
  assign MUX_mb_counter_57$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd57 ;
  assign MUX_mb_counter_58$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd58 ;
  assign MUX_mb_counter_59$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd59 ;
  assign MUX_mb_counter_6$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd6 ;
  assign MUX_mb_counter_7$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd7 ;
  assign MUX_mb_counter_8$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd8 ;
  assign MUX_mb_counter_9$write_1__SEL_1 =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd9 ;
  assign MUX_mb_tick_pulse$write_1__SEL_1 =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ;
  assign MUX_bc_cur_energy$write_1__VAL_1 =
	     bc_cur_energy +
	     (IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infifo_f_ETC___d849[27] ?
		-IF_IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infif_ETC___d846 :
		IF_IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infif_ETC___d846) ;
  assign MUX_bc_sample_count$write_1__VAL_1 = bc_sample_count + 12'd1 ;
  assign MUX_mb_counter$write_1__VAL_1 = mb_counter + mb_increment ;
  assign MUX_mb_counter_1$write_1__VAL_2 = mb_counter_1 + mb_increment_1 ;
  assign MUX_mb_counter_10$write_1__VAL_2 = mb_counter_10 + mb_increment_10 ;
  assign MUX_mb_counter_11$write_1__VAL_2 = mb_counter_11 + mb_increment_11 ;
  assign MUX_mb_counter_12$write_1__VAL_2 = mb_counter_12 + mb_increment_12 ;
  assign MUX_mb_counter_13$write_1__VAL_2 = mb_counter_13 + mb_increment_13 ;
  assign MUX_mb_counter_14$write_1__VAL_2 = mb_counter_14 + mb_increment_14 ;
  assign MUX_mb_counter_15$write_1__VAL_2 = mb_counter_15 + mb_increment_15 ;
  assign MUX_mb_counter_16$write_1__VAL_2 = mb_counter_16 + mb_increment_16 ;
  assign MUX_mb_counter_17$write_1__VAL_2 = mb_counter_17 + mb_increment_17 ;
  assign MUX_mb_counter_18$write_1__VAL_2 = mb_counter_18 + mb_increment_18 ;
  assign MUX_mb_counter_19$write_1__VAL_2 = mb_counter_19 + mb_increment_19 ;
  assign MUX_mb_counter_2$write_1__VAL_2 = mb_counter_2 + mb_increment_2 ;
  assign MUX_mb_counter_20$write_1__VAL_2 = mb_counter_20 + mb_increment_20 ;
  assign MUX_mb_counter_21$write_1__VAL_2 = mb_counter_21 + mb_increment_21 ;
  assign MUX_mb_counter_22$write_1__VAL_2 = mb_counter_22 + mb_increment_22 ;
  assign MUX_mb_counter_23$write_1__VAL_2 = mb_counter_23 + mb_increment_23 ;
  assign MUX_mb_counter_24$write_1__VAL_2 = mb_counter_24 + mb_increment_24 ;
  assign MUX_mb_counter_25$write_1__VAL_2 = mb_counter_25 + mb_increment_25 ;
  assign MUX_mb_counter_26$write_1__VAL_2 = mb_counter_26 + mb_increment_26 ;
  assign MUX_mb_counter_27$write_1__VAL_2 = mb_counter_27 + mb_increment_27 ;
  assign MUX_mb_counter_28$write_1__VAL_2 = mb_counter_28 + mb_increment_28 ;
  assign MUX_mb_counter_29$write_1__VAL_2 = mb_counter_29 + mb_increment_29 ;
  assign MUX_mb_counter_3$write_1__VAL_2 = mb_counter_3 + mb_increment_3 ;
  assign MUX_mb_counter_30$write_1__VAL_2 = mb_counter_30 + mb_increment_30 ;
  assign MUX_mb_counter_31$write_1__VAL_2 = mb_counter_31 + mb_increment_31 ;
  assign MUX_mb_counter_32$write_1__VAL_2 = mb_counter_32 + mb_increment_32 ;
  assign MUX_mb_counter_33$write_1__VAL_2 = mb_counter_33 + mb_increment_33 ;
  assign MUX_mb_counter_34$write_1__VAL_2 = mb_counter_34 + mb_increment_34 ;
  assign MUX_mb_counter_35$write_1__VAL_2 = mb_counter_35 + mb_increment_35 ;
  assign MUX_mb_counter_36$write_1__VAL_2 = mb_counter_36 + mb_increment_36 ;
  assign MUX_mb_counter_37$write_1__VAL_2 = mb_counter_37 + mb_increment_37 ;
  assign MUX_mb_counter_38$write_1__VAL_2 = mb_counter_38 + mb_increment_38 ;
  assign MUX_mb_counter_39$write_1__VAL_2 = mb_counter_39 + mb_increment_39 ;
  assign MUX_mb_counter_4$write_1__VAL_2 = mb_counter_4 + mb_increment_4 ;
  assign MUX_mb_counter_40$write_1__VAL_2 = mb_counter_40 + mb_increment_40 ;
  assign MUX_mb_counter_41$write_1__VAL_2 = mb_counter_41 + mb_increment_41 ;
  assign MUX_mb_counter_42$write_1__VAL_2 = mb_counter_42 + mb_increment_42 ;
  assign MUX_mb_counter_43$write_1__VAL_2 = mb_counter_43 + mb_increment_43 ;
  assign MUX_mb_counter_44$write_1__VAL_2 = mb_counter_44 + mb_increment_44 ;
  assign MUX_mb_counter_45$write_1__VAL_2 = mb_counter_45 + mb_increment_45 ;
  assign MUX_mb_counter_46$write_1__VAL_2 = mb_counter_46 + mb_increment_46 ;
  assign MUX_mb_counter_47$write_1__VAL_2 = mb_counter_47 + mb_increment_47 ;
  assign MUX_mb_counter_48$write_1__VAL_2 = mb_counter_48 + mb_increment_48 ;
  assign MUX_mb_counter_49$write_1__VAL_2 = mb_counter_49 + mb_increment_49 ;
  assign MUX_mb_counter_5$write_1__VAL_2 = mb_counter_5 + mb_increment_5 ;
  assign MUX_mb_counter_50$write_1__VAL_2 = mb_counter_50 + mb_increment_50 ;
  assign MUX_mb_counter_51$write_1__VAL_2 = mb_counter_51 + mb_increment_51 ;
  assign MUX_mb_counter_52$write_1__VAL_2 = mb_counter_52 + mb_increment_52 ;
  assign MUX_mb_counter_53$write_1__VAL_2 = mb_counter_53 + mb_increment_53 ;
  assign MUX_mb_counter_54$write_1__VAL_2 = mb_counter_54 + mb_increment_54 ;
  assign MUX_mb_counter_55$write_1__VAL_2 = mb_counter_55 + mb_increment_55 ;
  assign MUX_mb_counter_56$write_1__VAL_2 = mb_counter_56 + mb_increment_56 ;
  assign MUX_mb_counter_57$write_1__VAL_2 = mb_counter_57 + mb_increment_57 ;
  assign MUX_mb_counter_58$write_1__VAL_2 = mb_counter_58 + mb_increment_58 ;
  assign MUX_mb_counter_59$write_1__VAL_2 = mb_counter_59 + mb_increment_59 ;
  assign MUX_mb_counter_6$write_1__VAL_2 = mb_counter_6 + mb_increment_6 ;
  assign MUX_mb_counter_7$write_1__VAL_2 = mb_counter_7 + mb_increment_7 ;
  assign MUX_mb_counter_8$write_1__VAL_2 = mb_counter_8 + mb_increment_8 ;
  assign MUX_mb_counter_9$write_1__VAL_2 = mb_counter_9 + mb_increment_9 ;
  assign MUX_mb_out_count$write_1__VAL_1 =
	     (mb_out_count == 6'd59) ? 6'd0 : mb_out_count + 6'd1 ;

  // register bc_avg_energy
  assign bc_avg_energy$D_IN =
	     IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_IF_bc_avg_ETC___d785 +
	     (bc_cur_energy[27] ?
		-IF_bc_cur_energy_BIT_27_4_THEN_NEG_bc_cur_ener_ETC___d848 :
		IF_bc_cur_energy_BIT_27_4_THEN_NEG_bc_cur_ener_ETC___d848) ;
  assign bc_avg_energy$EN = CAN_FIRE_RL_bc_compare_energies ;

  // register bc_cur_energy
  assign bc_cur_energy$D_IN =
	     WILL_FIRE_RL_bc_inject_sample ?
	       MUX_bc_cur_energy$write_1__VAL_1 :
	       28'd0 ;
  assign bc_cur_energy$EN =
	     WILL_FIRE_RL_bc_inject_sample ||
	     WILL_FIRE_RL_bc_compare_energies ;

  // register bc_sample_count
  assign bc_sample_count$D_IN =
	     WILL_FIRE_RL_bc_inject_sample ?
	       MUX_bc_sample_count$write_1__VAL_1 :
	       12'd0 ;
  assign bc_sample_count$EN =
	     WILL_FIRE_RL_bc_inject_sample ||
	     WILL_FIRE_RL_bc_compare_energies ;

  // register beat_guess
  assign beat_guess$D_IN = bc_outfifo$D_OUT ;
  assign beat_guess$EN = WILL_FIRE_RL_beat_injector_start ;

  // register init_done
  assign init_done$D_IN = 1'd1 ;
  assign init_done$EN = CAN_FIRE_RL_init ;

  // register mb_counter
  assign mb_counter$D_IN =
	     WILL_FIRE_RL_mb_metronome_counter ?
	       MUX_mb_counter$write_1__VAL_1 :
	       22'd0 ;
  assign mb_counter$EN =
	     WILL_FIRE_RL_mb_metronome_counter ||
	     WILL_FIRE_RL_beat_injector_start ;

  // register mb_counter_1
  assign mb_counter_1$D_IN =
	     MUX_mb_counter_1$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_1$write_1__VAL_2 ;
  assign mb_counter_1$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd1 ||
	     WILL_FIRE_RL_mb_metronome_counter_1 ;

  // register mb_counter_10
  assign mb_counter_10$D_IN =
	     MUX_mb_counter_10$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_10$write_1__VAL_2 ;
  assign mb_counter_10$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd10 ||
	     WILL_FIRE_RL_mb_metronome_counter_10 ;

  // register mb_counter_11
  assign mb_counter_11$D_IN =
	     MUX_mb_counter_11$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_11$write_1__VAL_2 ;
  assign mb_counter_11$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd11 ||
	     WILL_FIRE_RL_mb_metronome_counter_11 ;

  // register mb_counter_12
  assign mb_counter_12$D_IN =
	     MUX_mb_counter_12$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_12$write_1__VAL_2 ;
  assign mb_counter_12$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd12 ||
	     WILL_FIRE_RL_mb_metronome_counter_12 ;

  // register mb_counter_13
  assign mb_counter_13$D_IN =
	     MUX_mb_counter_13$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_13$write_1__VAL_2 ;
  assign mb_counter_13$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd13 ||
	     WILL_FIRE_RL_mb_metronome_counter_13 ;

  // register mb_counter_14
  assign mb_counter_14$D_IN =
	     MUX_mb_counter_14$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_14$write_1__VAL_2 ;
  assign mb_counter_14$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd14 ||
	     WILL_FIRE_RL_mb_metronome_counter_14 ;

  // register mb_counter_15
  assign mb_counter_15$D_IN =
	     MUX_mb_counter_15$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_15$write_1__VAL_2 ;
  assign mb_counter_15$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd15 ||
	     WILL_FIRE_RL_mb_metronome_counter_15 ;

  // register mb_counter_16
  assign mb_counter_16$D_IN =
	     MUX_mb_counter_16$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_16$write_1__VAL_2 ;
  assign mb_counter_16$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd16 ||
	     WILL_FIRE_RL_mb_metronome_counter_16 ;

  // register mb_counter_17
  assign mb_counter_17$D_IN =
	     MUX_mb_counter_17$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_17$write_1__VAL_2 ;
  assign mb_counter_17$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd17 ||
	     WILL_FIRE_RL_mb_metronome_counter_17 ;

  // register mb_counter_18
  assign mb_counter_18$D_IN =
	     MUX_mb_counter_18$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_18$write_1__VAL_2 ;
  assign mb_counter_18$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd18 ||
	     WILL_FIRE_RL_mb_metronome_counter_18 ;

  // register mb_counter_19
  assign mb_counter_19$D_IN =
	     MUX_mb_counter_19$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_19$write_1__VAL_2 ;
  assign mb_counter_19$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd19 ||
	     WILL_FIRE_RL_mb_metronome_counter_19 ;

  // register mb_counter_2
  assign mb_counter_2$D_IN =
	     MUX_mb_counter_2$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_2$write_1__VAL_2 ;
  assign mb_counter_2$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd2 ||
	     WILL_FIRE_RL_mb_metronome_counter_2 ;

  // register mb_counter_20
  assign mb_counter_20$D_IN =
	     MUX_mb_counter_20$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_20$write_1__VAL_2 ;
  assign mb_counter_20$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd20 ||
	     WILL_FIRE_RL_mb_metronome_counter_20 ;

  // register mb_counter_21
  assign mb_counter_21$D_IN =
	     MUX_mb_counter_21$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_21$write_1__VAL_2 ;
  assign mb_counter_21$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd21 ||
	     WILL_FIRE_RL_mb_metronome_counter_21 ;

  // register mb_counter_22
  assign mb_counter_22$D_IN =
	     MUX_mb_counter_22$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_22$write_1__VAL_2 ;
  assign mb_counter_22$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd22 ||
	     WILL_FIRE_RL_mb_metronome_counter_22 ;

  // register mb_counter_23
  assign mb_counter_23$D_IN =
	     MUX_mb_counter_23$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_23$write_1__VAL_2 ;
  assign mb_counter_23$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd23 ||
	     WILL_FIRE_RL_mb_metronome_counter_23 ;

  // register mb_counter_24
  assign mb_counter_24$D_IN =
	     MUX_mb_counter_24$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_24$write_1__VAL_2 ;
  assign mb_counter_24$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd24 ||
	     WILL_FIRE_RL_mb_metronome_counter_24 ;

  // register mb_counter_25
  assign mb_counter_25$D_IN =
	     MUX_mb_counter_25$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_25$write_1__VAL_2 ;
  assign mb_counter_25$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd25 ||
	     WILL_FIRE_RL_mb_metronome_counter_25 ;

  // register mb_counter_26
  assign mb_counter_26$D_IN =
	     MUX_mb_counter_26$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_26$write_1__VAL_2 ;
  assign mb_counter_26$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd26 ||
	     WILL_FIRE_RL_mb_metronome_counter_26 ;

  // register mb_counter_27
  assign mb_counter_27$D_IN =
	     MUX_mb_counter_27$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_27$write_1__VAL_2 ;
  assign mb_counter_27$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd27 ||
	     WILL_FIRE_RL_mb_metronome_counter_27 ;

  // register mb_counter_28
  assign mb_counter_28$D_IN =
	     MUX_mb_counter_28$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_28$write_1__VAL_2 ;
  assign mb_counter_28$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd28 ||
	     WILL_FIRE_RL_mb_metronome_counter_28 ;

  // register mb_counter_29
  assign mb_counter_29$D_IN =
	     MUX_mb_counter_29$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_29$write_1__VAL_2 ;
  assign mb_counter_29$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd29 ||
	     WILL_FIRE_RL_mb_metronome_counter_29 ;

  // register mb_counter_3
  assign mb_counter_3$D_IN =
	     MUX_mb_counter_3$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_3$write_1__VAL_2 ;
  assign mb_counter_3$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd3 ||
	     WILL_FIRE_RL_mb_metronome_counter_3 ;

  // register mb_counter_30
  assign mb_counter_30$D_IN =
	     MUX_mb_counter_30$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_30$write_1__VAL_2 ;
  assign mb_counter_30$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd30 ||
	     WILL_FIRE_RL_mb_metronome_counter_30 ;

  // register mb_counter_31
  assign mb_counter_31$D_IN =
	     MUX_mb_counter_31$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_31$write_1__VAL_2 ;
  assign mb_counter_31$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd31 ||
	     WILL_FIRE_RL_mb_metronome_counter_31 ;

  // register mb_counter_32
  assign mb_counter_32$D_IN =
	     MUX_mb_counter_32$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_32$write_1__VAL_2 ;
  assign mb_counter_32$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd32 ||
	     WILL_FIRE_RL_mb_metronome_counter_32 ;

  // register mb_counter_33
  assign mb_counter_33$D_IN =
	     MUX_mb_counter_33$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_33$write_1__VAL_2 ;
  assign mb_counter_33$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd33 ||
	     WILL_FIRE_RL_mb_metronome_counter_33 ;

  // register mb_counter_34
  assign mb_counter_34$D_IN =
	     MUX_mb_counter_34$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_34$write_1__VAL_2 ;
  assign mb_counter_34$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd34 ||
	     WILL_FIRE_RL_mb_metronome_counter_34 ;

  // register mb_counter_35
  assign mb_counter_35$D_IN =
	     MUX_mb_counter_35$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_35$write_1__VAL_2 ;
  assign mb_counter_35$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd35 ||
	     WILL_FIRE_RL_mb_metronome_counter_35 ;

  // register mb_counter_36
  assign mb_counter_36$D_IN =
	     MUX_mb_counter_36$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_36$write_1__VAL_2 ;
  assign mb_counter_36$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd36 ||
	     WILL_FIRE_RL_mb_metronome_counter_36 ;

  // register mb_counter_37
  assign mb_counter_37$D_IN =
	     MUX_mb_counter_37$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_37$write_1__VAL_2 ;
  assign mb_counter_37$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd37 ||
	     WILL_FIRE_RL_mb_metronome_counter_37 ;

  // register mb_counter_38
  assign mb_counter_38$D_IN =
	     MUX_mb_counter_38$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_38$write_1__VAL_2 ;
  assign mb_counter_38$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd38 ||
	     WILL_FIRE_RL_mb_metronome_counter_38 ;

  // register mb_counter_39
  assign mb_counter_39$D_IN =
	     MUX_mb_counter_39$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_39$write_1__VAL_2 ;
  assign mb_counter_39$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd39 ||
	     WILL_FIRE_RL_mb_metronome_counter_39 ;

  // register mb_counter_4
  assign mb_counter_4$D_IN =
	     MUX_mb_counter_4$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_4$write_1__VAL_2 ;
  assign mb_counter_4$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd4 ||
	     WILL_FIRE_RL_mb_metronome_counter_4 ;

  // register mb_counter_40
  assign mb_counter_40$D_IN =
	     MUX_mb_counter_40$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_40$write_1__VAL_2 ;
  assign mb_counter_40$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd40 ||
	     WILL_FIRE_RL_mb_metronome_counter_40 ;

  // register mb_counter_41
  assign mb_counter_41$D_IN =
	     MUX_mb_counter_41$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_41$write_1__VAL_2 ;
  assign mb_counter_41$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd41 ||
	     WILL_FIRE_RL_mb_metronome_counter_41 ;

  // register mb_counter_42
  assign mb_counter_42$D_IN =
	     MUX_mb_counter_42$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_42$write_1__VAL_2 ;
  assign mb_counter_42$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd42 ||
	     WILL_FIRE_RL_mb_metronome_counter_42 ;

  // register mb_counter_43
  assign mb_counter_43$D_IN =
	     MUX_mb_counter_43$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_43$write_1__VAL_2 ;
  assign mb_counter_43$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd43 ||
	     WILL_FIRE_RL_mb_metronome_counter_43 ;

  // register mb_counter_44
  assign mb_counter_44$D_IN =
	     MUX_mb_counter_44$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_44$write_1__VAL_2 ;
  assign mb_counter_44$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd44 ||
	     WILL_FIRE_RL_mb_metronome_counter_44 ;

  // register mb_counter_45
  assign mb_counter_45$D_IN =
	     MUX_mb_counter_45$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_45$write_1__VAL_2 ;
  assign mb_counter_45$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd45 ||
	     WILL_FIRE_RL_mb_metronome_counter_45 ;

  // register mb_counter_46
  assign mb_counter_46$D_IN =
	     MUX_mb_counter_46$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_46$write_1__VAL_2 ;
  assign mb_counter_46$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd46 ||
	     WILL_FIRE_RL_mb_metronome_counter_46 ;

  // register mb_counter_47
  assign mb_counter_47$D_IN =
	     MUX_mb_counter_47$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_47$write_1__VAL_2 ;
  assign mb_counter_47$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd47 ||
	     WILL_FIRE_RL_mb_metronome_counter_47 ;

  // register mb_counter_48
  assign mb_counter_48$D_IN =
	     MUX_mb_counter_48$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_48$write_1__VAL_2 ;
  assign mb_counter_48$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd48 ||
	     WILL_FIRE_RL_mb_metronome_counter_48 ;

  // register mb_counter_49
  assign mb_counter_49$D_IN =
	     MUX_mb_counter_49$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_49$write_1__VAL_2 ;
  assign mb_counter_49$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd49 ||
	     WILL_FIRE_RL_mb_metronome_counter_49 ;

  // register mb_counter_5
  assign mb_counter_5$D_IN =
	     MUX_mb_counter_5$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_5$write_1__VAL_2 ;
  assign mb_counter_5$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd5 ||
	     WILL_FIRE_RL_mb_metronome_counter_5 ;

  // register mb_counter_50
  assign mb_counter_50$D_IN =
	     MUX_mb_counter_50$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_50$write_1__VAL_2 ;
  assign mb_counter_50$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd50 ||
	     WILL_FIRE_RL_mb_metronome_counter_50 ;

  // register mb_counter_51
  assign mb_counter_51$D_IN =
	     MUX_mb_counter_51$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_51$write_1__VAL_2 ;
  assign mb_counter_51$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd51 ||
	     WILL_FIRE_RL_mb_metronome_counter_51 ;

  // register mb_counter_52
  assign mb_counter_52$D_IN =
	     MUX_mb_counter_52$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_52$write_1__VAL_2 ;
  assign mb_counter_52$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd52 ||
	     WILL_FIRE_RL_mb_metronome_counter_52 ;

  // register mb_counter_53
  assign mb_counter_53$D_IN =
	     MUX_mb_counter_53$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_53$write_1__VAL_2 ;
  assign mb_counter_53$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd53 ||
	     WILL_FIRE_RL_mb_metronome_counter_53 ;

  // register mb_counter_54
  assign mb_counter_54$D_IN =
	     MUX_mb_counter_54$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_54$write_1__VAL_2 ;
  assign mb_counter_54$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd54 ||
	     WILL_FIRE_RL_mb_metronome_counter_54 ;

  // register mb_counter_55
  assign mb_counter_55$D_IN =
	     MUX_mb_counter_55$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_55$write_1__VAL_2 ;
  assign mb_counter_55$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd55 ||
	     WILL_FIRE_RL_mb_metronome_counter_55 ;

  // register mb_counter_56
  assign mb_counter_56$D_IN =
	     MUX_mb_counter_56$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_56$write_1__VAL_2 ;
  assign mb_counter_56$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd56 ||
	     WILL_FIRE_RL_mb_metronome_counter_56 ;

  // register mb_counter_57
  assign mb_counter_57$D_IN =
	     MUX_mb_counter_57$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_57$write_1__VAL_2 ;
  assign mb_counter_57$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd57 ||
	     WILL_FIRE_RL_mb_metronome_counter_57 ;

  // register mb_counter_58
  assign mb_counter_58$D_IN =
	     MUX_mb_counter_58$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_58$write_1__VAL_2 ;
  assign mb_counter_58$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd58 ||
	     WILL_FIRE_RL_mb_metronome_counter_58 ;

  // register mb_counter_59
  assign mb_counter_59$D_IN =
	     MUX_mb_counter_59$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_59$write_1__VAL_2 ;
  assign mb_counter_59$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd59 ||
	     WILL_FIRE_RL_mb_metronome_counter_59 ;

  // register mb_counter_6
  assign mb_counter_6$D_IN =
	     MUX_mb_counter_6$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_6$write_1__VAL_2 ;
  assign mb_counter_6$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd6 ||
	     WILL_FIRE_RL_mb_metronome_counter_6 ;

  // register mb_counter_7
  assign mb_counter_7$D_IN =
	     MUX_mb_counter_7$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_7$write_1__VAL_2 ;
  assign mb_counter_7$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd7 ||
	     WILL_FIRE_RL_mb_metronome_counter_7 ;

  // register mb_counter_8
  assign mb_counter_8$D_IN =
	     MUX_mb_counter_8$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_8$write_1__VAL_2 ;
  assign mb_counter_8$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd8 ||
	     WILL_FIRE_RL_mb_metronome_counter_8 ;

  // register mb_counter_9
  assign mb_counter_9$D_IN =
	     MUX_mb_counter_9$write_1__SEL_1 ?
	       22'd0 :
	       MUX_mb_counter_9$write_1__VAL_2 ;
  assign mb_counter_9$EN =
	     WILL_FIRE_RL_beat_injector_cont && mb_out_count == 6'd9 ||
	     WILL_FIRE_RL_mb_metronome_counter_9 ;

  // register mb_increment
  assign mb_increment$D_IN = 22'd172 ;
  assign mb_increment$EN = CAN_FIRE_RL_init ;

  // register mb_increment_1
  assign mb_increment_1$D_IN = 22'd173 ;
  assign mb_increment_1$EN = CAN_FIRE_RL_init ;

  // register mb_increment_10
  assign mb_increment_10$D_IN = 22'd186 ;
  assign mb_increment_10$EN = CAN_FIRE_RL_init ;

  // register mb_increment_11
  assign mb_increment_11$D_IN = 22'd188 ;
  assign mb_increment_11$EN = CAN_FIRE_RL_init ;

  // register mb_increment_12
  assign mb_increment_12$D_IN = 22'd189 ;
  assign mb_increment_12$EN = CAN_FIRE_RL_init ;

  // register mb_increment_13
  assign mb_increment_13$D_IN = 22'd190 ;
  assign mb_increment_13$EN = CAN_FIRE_RL_init ;

  // register mb_increment_14
  assign mb_increment_14$D_IN = 22'd192 ;
  assign mb_increment_14$EN = CAN_FIRE_RL_init ;

  // register mb_increment_15
  assign mb_increment_15$D_IN = 22'd193 ;
  assign mb_increment_15$EN = CAN_FIRE_RL_init ;

  // register mb_increment_16
  assign mb_increment_16$D_IN = 22'd195 ;
  assign mb_increment_16$EN = CAN_FIRE_RL_init ;

  // register mb_increment_17
  assign mb_increment_17$D_IN = 22'd196 ;
  assign mb_increment_17$EN = CAN_FIRE_RL_init ;

  // register mb_increment_18
  assign mb_increment_18$D_IN = 22'd198 ;
  assign mb_increment_18$EN = CAN_FIRE_RL_init ;

  // register mb_increment_19
  assign mb_increment_19$D_IN = 22'd199 ;
  assign mb_increment_19$EN = CAN_FIRE_RL_init ;

  // register mb_increment_2
  assign mb_increment_2$D_IN = 22'd175 ;
  assign mb_increment_2$EN = CAN_FIRE_RL_init ;

  // register mb_increment_20
  assign mb_increment_20$D_IN = 22'd200 ;
  assign mb_increment_20$EN = CAN_FIRE_RL_init ;

  // register mb_increment_21
  assign mb_increment_21$D_IN = 22'd202 ;
  assign mb_increment_21$EN = CAN_FIRE_RL_init ;

  // register mb_increment_22
  assign mb_increment_22$D_IN = 22'd203 ;
  assign mb_increment_22$EN = CAN_FIRE_RL_init ;

  // register mb_increment_23
  assign mb_increment_23$D_IN = 22'd205 ;
  assign mb_increment_23$EN = CAN_FIRE_RL_init ;

  // register mb_increment_24
  assign mb_increment_24$D_IN = 22'd206 ;
  assign mb_increment_24$EN = CAN_FIRE_RL_init ;

  // register mb_increment_25
  assign mb_increment_25$D_IN = 22'd208 ;
  assign mb_increment_25$EN = CAN_FIRE_RL_init ;

  // register mb_increment_26
  assign mb_increment_26$D_IN = 22'd209 ;
  assign mb_increment_26$EN = CAN_FIRE_RL_init ;

  // register mb_increment_27
  assign mb_increment_27$D_IN = 22'd210 ;
  assign mb_increment_27$EN = CAN_FIRE_RL_init ;

  // register mb_increment_28
  assign mb_increment_28$D_IN = 22'd212 ;
  assign mb_increment_28$EN = CAN_FIRE_RL_init ;

  // register mb_increment_29
  assign mb_increment_29$D_IN = 22'd213 ;
  assign mb_increment_29$EN = CAN_FIRE_RL_init ;

  // register mb_increment_3
  assign mb_increment_3$D_IN = 22'd176 ;
  assign mb_increment_3$EN = CAN_FIRE_RL_init ;

  // register mb_increment_30
  assign mb_increment_30$D_IN = 22'd215 ;
  assign mb_increment_30$EN = CAN_FIRE_RL_init ;

  // register mb_increment_31
  assign mb_increment_31$D_IN = 22'd216 ;
  assign mb_increment_31$EN = CAN_FIRE_RL_init ;

  // register mb_increment_32
  assign mb_increment_32$D_IN = 22'd218 ;
  assign mb_increment_32$EN = CAN_FIRE_RL_init ;

  // register mb_increment_33
  assign mb_increment_33$D_IN = 22'd219 ;
  assign mb_increment_33$EN = CAN_FIRE_RL_init ;

  // register mb_increment_34
  assign mb_increment_34$D_IN = 22'd220 ;
  assign mb_increment_34$EN = CAN_FIRE_RL_init ;

  // register mb_increment_35
  assign mb_increment_35$D_IN = 22'd222 ;
  assign mb_increment_35$EN = CAN_FIRE_RL_init ;

  // register mb_increment_36
  assign mb_increment_36$D_IN = 22'd223 ;
  assign mb_increment_36$EN = CAN_FIRE_RL_init ;

  // register mb_increment_37
  assign mb_increment_37$D_IN = 22'd225 ;
  assign mb_increment_37$EN = CAN_FIRE_RL_init ;

  // register mb_increment_38
  assign mb_increment_38$D_IN = 22'd226 ;
  assign mb_increment_38$EN = CAN_FIRE_RL_init ;

  // register mb_increment_39
  assign mb_increment_39$D_IN = 22'd228 ;
  assign mb_increment_39$EN = CAN_FIRE_RL_init ;

  // register mb_increment_4
  assign mb_increment_4$D_IN = 22'd178 ;
  assign mb_increment_4$EN = CAN_FIRE_RL_init ;

  // register mb_increment_40
  assign mb_increment_40$D_IN = 22'd229 ;
  assign mb_increment_40$EN = CAN_FIRE_RL_init ;

  // register mb_increment_41
  assign mb_increment_41$D_IN = 22'd230 ;
  assign mb_increment_41$EN = CAN_FIRE_RL_init ;

  // register mb_increment_42
  assign mb_increment_42$D_IN = 22'd232 ;
  assign mb_increment_42$EN = CAN_FIRE_RL_init ;

  // register mb_increment_43
  assign mb_increment_43$D_IN = 22'd233 ;
  assign mb_increment_43$EN = CAN_FIRE_RL_init ;

  // register mb_increment_44
  assign mb_increment_44$D_IN = 22'd235 ;
  assign mb_increment_44$EN = CAN_FIRE_RL_init ;

  // register mb_increment_45
  assign mb_increment_45$D_IN = 22'd236 ;
  assign mb_increment_45$EN = CAN_FIRE_RL_init ;

  // register mb_increment_46
  assign mb_increment_46$D_IN = 22'd238 ;
  assign mb_increment_46$EN = CAN_FIRE_RL_init ;

  // register mb_increment_47
  assign mb_increment_47$D_IN = 22'd239 ;
  assign mb_increment_47$EN = CAN_FIRE_RL_init ;

  // register mb_increment_48
  assign mb_increment_48$D_IN = 22'd241 ;
  assign mb_increment_48$EN = CAN_FIRE_RL_init ;

  // register mb_increment_49
  assign mb_increment_49$D_IN = 22'd242 ;
  assign mb_increment_49$EN = CAN_FIRE_RL_init ;

  // register mb_increment_5
  assign mb_increment_5$D_IN = 22'd179 ;
  assign mb_increment_5$EN = CAN_FIRE_RL_init ;

  // register mb_increment_50
  assign mb_increment_50$D_IN = 22'd243 ;
  assign mb_increment_50$EN = CAN_FIRE_RL_init ;

  // register mb_increment_51
  assign mb_increment_51$D_IN = 22'd245 ;
  assign mb_increment_51$EN = CAN_FIRE_RL_init ;

  // register mb_increment_52
  assign mb_increment_52$D_IN = 22'd246 ;
  assign mb_increment_52$EN = CAN_FIRE_RL_init ;

  // register mb_increment_53
  assign mb_increment_53$D_IN = 22'd248 ;
  assign mb_increment_53$EN = CAN_FIRE_RL_init ;

  // register mb_increment_54
  assign mb_increment_54$D_IN = 22'd249 ;
  assign mb_increment_54$EN = CAN_FIRE_RL_init ;

  // register mb_increment_55
  assign mb_increment_55$D_IN = 22'd251 ;
  assign mb_increment_55$EN = CAN_FIRE_RL_init ;

  // register mb_increment_56
  assign mb_increment_56$D_IN = 22'd252 ;
  assign mb_increment_56$EN = CAN_FIRE_RL_init ;

  // register mb_increment_57
  assign mb_increment_57$D_IN = 22'd253 ;
  assign mb_increment_57$EN = CAN_FIRE_RL_init ;

  // register mb_increment_58
  assign mb_increment_58$D_IN = 22'd255 ;
  assign mb_increment_58$EN = CAN_FIRE_RL_init ;

  // register mb_increment_59
  assign mb_increment_59$D_IN = 22'd256 ;
  assign mb_increment_59$EN = CAN_FIRE_RL_init ;

  // register mb_increment_6
  assign mb_increment_6$D_IN = 22'd180 ;
  assign mb_increment_6$EN = CAN_FIRE_RL_init ;

  // register mb_increment_7
  assign mb_increment_7$D_IN = 22'd182 ;
  assign mb_increment_7$EN = CAN_FIRE_RL_init ;

  // register mb_increment_8
  assign mb_increment_8$D_IN = 22'd183 ;
  assign mb_increment_8$EN = CAN_FIRE_RL_init ;

  // register mb_increment_9
  assign mb_increment_9$D_IN = 22'd185 ;
  assign mb_increment_9$EN = CAN_FIRE_RL_init ;

  // register mb_last_counter
  assign mb_last_counter$D_IN = MUX_mb_counter$write_1__VAL_1 ;
  assign mb_last_counter$EN = WILL_FIRE_RL_mb_metronome_counter ;

  // register mb_last_counter_1
  assign mb_last_counter_1$D_IN = MUX_mb_counter_1$write_1__VAL_2 ;
  assign mb_last_counter_1$EN = WILL_FIRE_RL_mb_metronome_counter_1 ;

  // register mb_last_counter_10
  assign mb_last_counter_10$D_IN = MUX_mb_counter_10$write_1__VAL_2 ;
  assign mb_last_counter_10$EN = WILL_FIRE_RL_mb_metronome_counter_10 ;

  // register mb_last_counter_11
  assign mb_last_counter_11$D_IN = MUX_mb_counter_11$write_1__VAL_2 ;
  assign mb_last_counter_11$EN = WILL_FIRE_RL_mb_metronome_counter_11 ;

  // register mb_last_counter_12
  assign mb_last_counter_12$D_IN = MUX_mb_counter_12$write_1__VAL_2 ;
  assign mb_last_counter_12$EN = WILL_FIRE_RL_mb_metronome_counter_12 ;

  // register mb_last_counter_13
  assign mb_last_counter_13$D_IN = MUX_mb_counter_13$write_1__VAL_2 ;
  assign mb_last_counter_13$EN = WILL_FIRE_RL_mb_metronome_counter_13 ;

  // register mb_last_counter_14
  assign mb_last_counter_14$D_IN = MUX_mb_counter_14$write_1__VAL_2 ;
  assign mb_last_counter_14$EN = WILL_FIRE_RL_mb_metronome_counter_14 ;

  // register mb_last_counter_15
  assign mb_last_counter_15$D_IN = MUX_mb_counter_15$write_1__VAL_2 ;
  assign mb_last_counter_15$EN = WILL_FIRE_RL_mb_metronome_counter_15 ;

  // register mb_last_counter_16
  assign mb_last_counter_16$D_IN = MUX_mb_counter_16$write_1__VAL_2 ;
  assign mb_last_counter_16$EN = WILL_FIRE_RL_mb_metronome_counter_16 ;

  // register mb_last_counter_17
  assign mb_last_counter_17$D_IN = MUX_mb_counter_17$write_1__VAL_2 ;
  assign mb_last_counter_17$EN = WILL_FIRE_RL_mb_metronome_counter_17 ;

  // register mb_last_counter_18
  assign mb_last_counter_18$D_IN = MUX_mb_counter_18$write_1__VAL_2 ;
  assign mb_last_counter_18$EN = WILL_FIRE_RL_mb_metronome_counter_18 ;

  // register mb_last_counter_19
  assign mb_last_counter_19$D_IN = MUX_mb_counter_19$write_1__VAL_2 ;
  assign mb_last_counter_19$EN = WILL_FIRE_RL_mb_metronome_counter_19 ;

  // register mb_last_counter_2
  assign mb_last_counter_2$D_IN = MUX_mb_counter_2$write_1__VAL_2 ;
  assign mb_last_counter_2$EN = WILL_FIRE_RL_mb_metronome_counter_2 ;

  // register mb_last_counter_20
  assign mb_last_counter_20$D_IN = MUX_mb_counter_20$write_1__VAL_2 ;
  assign mb_last_counter_20$EN = WILL_FIRE_RL_mb_metronome_counter_20 ;

  // register mb_last_counter_21
  assign mb_last_counter_21$D_IN = MUX_mb_counter_21$write_1__VAL_2 ;
  assign mb_last_counter_21$EN = WILL_FIRE_RL_mb_metronome_counter_21 ;

  // register mb_last_counter_22
  assign mb_last_counter_22$D_IN = MUX_mb_counter_22$write_1__VAL_2 ;
  assign mb_last_counter_22$EN = WILL_FIRE_RL_mb_metronome_counter_22 ;

  // register mb_last_counter_23
  assign mb_last_counter_23$D_IN = MUX_mb_counter_23$write_1__VAL_2 ;
  assign mb_last_counter_23$EN = WILL_FIRE_RL_mb_metronome_counter_23 ;

  // register mb_last_counter_24
  assign mb_last_counter_24$D_IN = MUX_mb_counter_24$write_1__VAL_2 ;
  assign mb_last_counter_24$EN = WILL_FIRE_RL_mb_metronome_counter_24 ;

  // register mb_last_counter_25
  assign mb_last_counter_25$D_IN = MUX_mb_counter_25$write_1__VAL_2 ;
  assign mb_last_counter_25$EN = WILL_FIRE_RL_mb_metronome_counter_25 ;

  // register mb_last_counter_26
  assign mb_last_counter_26$D_IN = MUX_mb_counter_26$write_1__VAL_2 ;
  assign mb_last_counter_26$EN = WILL_FIRE_RL_mb_metronome_counter_26 ;

  // register mb_last_counter_27
  assign mb_last_counter_27$D_IN = MUX_mb_counter_27$write_1__VAL_2 ;
  assign mb_last_counter_27$EN = WILL_FIRE_RL_mb_metronome_counter_27 ;

  // register mb_last_counter_28
  assign mb_last_counter_28$D_IN = MUX_mb_counter_28$write_1__VAL_2 ;
  assign mb_last_counter_28$EN = WILL_FIRE_RL_mb_metronome_counter_28 ;

  // register mb_last_counter_29
  assign mb_last_counter_29$D_IN = MUX_mb_counter_29$write_1__VAL_2 ;
  assign mb_last_counter_29$EN = WILL_FIRE_RL_mb_metronome_counter_29 ;

  // register mb_last_counter_3
  assign mb_last_counter_3$D_IN = MUX_mb_counter_3$write_1__VAL_2 ;
  assign mb_last_counter_3$EN = WILL_FIRE_RL_mb_metronome_counter_3 ;

  // register mb_last_counter_30
  assign mb_last_counter_30$D_IN = MUX_mb_counter_30$write_1__VAL_2 ;
  assign mb_last_counter_30$EN = WILL_FIRE_RL_mb_metronome_counter_30 ;

  // register mb_last_counter_31
  assign mb_last_counter_31$D_IN = MUX_mb_counter_31$write_1__VAL_2 ;
  assign mb_last_counter_31$EN = WILL_FIRE_RL_mb_metronome_counter_31 ;

  // register mb_last_counter_32
  assign mb_last_counter_32$D_IN = MUX_mb_counter_32$write_1__VAL_2 ;
  assign mb_last_counter_32$EN = WILL_FIRE_RL_mb_metronome_counter_32 ;

  // register mb_last_counter_33
  assign mb_last_counter_33$D_IN = MUX_mb_counter_33$write_1__VAL_2 ;
  assign mb_last_counter_33$EN = WILL_FIRE_RL_mb_metronome_counter_33 ;

  // register mb_last_counter_34
  assign mb_last_counter_34$D_IN = MUX_mb_counter_34$write_1__VAL_2 ;
  assign mb_last_counter_34$EN = WILL_FIRE_RL_mb_metronome_counter_34 ;

  // register mb_last_counter_35
  assign mb_last_counter_35$D_IN = MUX_mb_counter_35$write_1__VAL_2 ;
  assign mb_last_counter_35$EN = WILL_FIRE_RL_mb_metronome_counter_35 ;

  // register mb_last_counter_36
  assign mb_last_counter_36$D_IN = MUX_mb_counter_36$write_1__VAL_2 ;
  assign mb_last_counter_36$EN = WILL_FIRE_RL_mb_metronome_counter_36 ;

  // register mb_last_counter_37
  assign mb_last_counter_37$D_IN = MUX_mb_counter_37$write_1__VAL_2 ;
  assign mb_last_counter_37$EN = WILL_FIRE_RL_mb_metronome_counter_37 ;

  // register mb_last_counter_38
  assign mb_last_counter_38$D_IN = MUX_mb_counter_38$write_1__VAL_2 ;
  assign mb_last_counter_38$EN = WILL_FIRE_RL_mb_metronome_counter_38 ;

  // register mb_last_counter_39
  assign mb_last_counter_39$D_IN = MUX_mb_counter_39$write_1__VAL_2 ;
  assign mb_last_counter_39$EN = WILL_FIRE_RL_mb_metronome_counter_39 ;

  // register mb_last_counter_4
  assign mb_last_counter_4$D_IN = MUX_mb_counter_4$write_1__VAL_2 ;
  assign mb_last_counter_4$EN = WILL_FIRE_RL_mb_metronome_counter_4 ;

  // register mb_last_counter_40
  assign mb_last_counter_40$D_IN = MUX_mb_counter_40$write_1__VAL_2 ;
  assign mb_last_counter_40$EN = WILL_FIRE_RL_mb_metronome_counter_40 ;

  // register mb_last_counter_41
  assign mb_last_counter_41$D_IN = MUX_mb_counter_41$write_1__VAL_2 ;
  assign mb_last_counter_41$EN = WILL_FIRE_RL_mb_metronome_counter_41 ;

  // register mb_last_counter_42
  assign mb_last_counter_42$D_IN = MUX_mb_counter_42$write_1__VAL_2 ;
  assign mb_last_counter_42$EN = WILL_FIRE_RL_mb_metronome_counter_42 ;

  // register mb_last_counter_43
  assign mb_last_counter_43$D_IN = MUX_mb_counter_43$write_1__VAL_2 ;
  assign mb_last_counter_43$EN = WILL_FIRE_RL_mb_metronome_counter_43 ;

  // register mb_last_counter_44
  assign mb_last_counter_44$D_IN = MUX_mb_counter_44$write_1__VAL_2 ;
  assign mb_last_counter_44$EN = WILL_FIRE_RL_mb_metronome_counter_44 ;

  // register mb_last_counter_45
  assign mb_last_counter_45$D_IN = MUX_mb_counter_45$write_1__VAL_2 ;
  assign mb_last_counter_45$EN = WILL_FIRE_RL_mb_metronome_counter_45 ;

  // register mb_last_counter_46
  assign mb_last_counter_46$D_IN = MUX_mb_counter_46$write_1__VAL_2 ;
  assign mb_last_counter_46$EN = WILL_FIRE_RL_mb_metronome_counter_46 ;

  // register mb_last_counter_47
  assign mb_last_counter_47$D_IN = MUX_mb_counter_47$write_1__VAL_2 ;
  assign mb_last_counter_47$EN = WILL_FIRE_RL_mb_metronome_counter_47 ;

  // register mb_last_counter_48
  assign mb_last_counter_48$D_IN = MUX_mb_counter_48$write_1__VAL_2 ;
  assign mb_last_counter_48$EN = WILL_FIRE_RL_mb_metronome_counter_48 ;

  // register mb_last_counter_49
  assign mb_last_counter_49$D_IN = MUX_mb_counter_49$write_1__VAL_2 ;
  assign mb_last_counter_49$EN = WILL_FIRE_RL_mb_metronome_counter_49 ;

  // register mb_last_counter_5
  assign mb_last_counter_5$D_IN = MUX_mb_counter_5$write_1__VAL_2 ;
  assign mb_last_counter_5$EN = WILL_FIRE_RL_mb_metronome_counter_5 ;

  // register mb_last_counter_50
  assign mb_last_counter_50$D_IN = MUX_mb_counter_50$write_1__VAL_2 ;
  assign mb_last_counter_50$EN = WILL_FIRE_RL_mb_metronome_counter_50 ;

  // register mb_last_counter_51
  assign mb_last_counter_51$D_IN = MUX_mb_counter_51$write_1__VAL_2 ;
  assign mb_last_counter_51$EN = WILL_FIRE_RL_mb_metronome_counter_51 ;

  // register mb_last_counter_52
  assign mb_last_counter_52$D_IN = MUX_mb_counter_52$write_1__VAL_2 ;
  assign mb_last_counter_52$EN = WILL_FIRE_RL_mb_metronome_counter_52 ;

  // register mb_last_counter_53
  assign mb_last_counter_53$D_IN = MUX_mb_counter_53$write_1__VAL_2 ;
  assign mb_last_counter_53$EN = WILL_FIRE_RL_mb_metronome_counter_53 ;

  // register mb_last_counter_54
  assign mb_last_counter_54$D_IN = MUX_mb_counter_54$write_1__VAL_2 ;
  assign mb_last_counter_54$EN = WILL_FIRE_RL_mb_metronome_counter_54 ;

  // register mb_last_counter_55
  assign mb_last_counter_55$D_IN = MUX_mb_counter_55$write_1__VAL_2 ;
  assign mb_last_counter_55$EN = WILL_FIRE_RL_mb_metronome_counter_55 ;

  // register mb_last_counter_56
  assign mb_last_counter_56$D_IN = MUX_mb_counter_56$write_1__VAL_2 ;
  assign mb_last_counter_56$EN = WILL_FIRE_RL_mb_metronome_counter_56 ;

  // register mb_last_counter_57
  assign mb_last_counter_57$D_IN = MUX_mb_counter_57$write_1__VAL_2 ;
  assign mb_last_counter_57$EN = WILL_FIRE_RL_mb_metronome_counter_57 ;

  // register mb_last_counter_58
  assign mb_last_counter_58$D_IN = MUX_mb_counter_58$write_1__VAL_2 ;
  assign mb_last_counter_58$EN = WILL_FIRE_RL_mb_metronome_counter_58 ;

  // register mb_last_counter_59
  assign mb_last_counter_59$D_IN = MUX_mb_counter_59$write_1__VAL_2 ;
  assign mb_last_counter_59$EN = WILL_FIRE_RL_mb_metronome_counter_59 ;

  // register mb_last_counter_6
  assign mb_last_counter_6$D_IN = MUX_mb_counter_6$write_1__VAL_2 ;
  assign mb_last_counter_6$EN = WILL_FIRE_RL_mb_metronome_counter_6 ;

  // register mb_last_counter_7
  assign mb_last_counter_7$D_IN = MUX_mb_counter_7$write_1__VAL_2 ;
  assign mb_last_counter_7$EN = WILL_FIRE_RL_mb_metronome_counter_7 ;

  // register mb_last_counter_8
  assign mb_last_counter_8$D_IN = MUX_mb_counter_8$write_1__VAL_2 ;
  assign mb_last_counter_8$EN = WILL_FIRE_RL_mb_metronome_counter_8 ;

  // register mb_last_counter_9
  assign mb_last_counter_9$D_IN = MUX_mb_counter_9$write_1__VAL_2 ;
  assign mb_last_counter_9$EN = WILL_FIRE_RL_mb_metronome_counter_9 ;

  // register mb_out_count
  assign mb_out_count$D_IN =
	     WILL_FIRE_RL_beat_injector_cont ?
	       MUX_mb_out_count$write_1__VAL_1 :
	       6'd1 ;
  assign mb_out_count$EN =
	     WILL_FIRE_RL_beat_injector_cont ||
	     WILL_FIRE_RL_beat_injector_start ;

  // register mb_tick_pulse
  assign mb_tick_pulse$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off ;

  // register mb_tick_pulse_1
  assign mb_tick_pulse_1$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_1$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_1 ;

  // register mb_tick_pulse_10
  assign mb_tick_pulse_10$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_10$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_10 ;

  // register mb_tick_pulse_11
  assign mb_tick_pulse_11$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_11$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_11 ;

  // register mb_tick_pulse_12
  assign mb_tick_pulse_12$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_12$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_12 ;

  // register mb_tick_pulse_13
  assign mb_tick_pulse_13$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_13$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_13 ;

  // register mb_tick_pulse_14
  assign mb_tick_pulse_14$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_14$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_14 ;

  // register mb_tick_pulse_15
  assign mb_tick_pulse_15$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_15$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_15 ;

  // register mb_tick_pulse_16
  assign mb_tick_pulse_16$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_16$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_16 ;

  // register mb_tick_pulse_17
  assign mb_tick_pulse_17$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_17$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_17 ;

  // register mb_tick_pulse_18
  assign mb_tick_pulse_18$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_18$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_18 ;

  // register mb_tick_pulse_19
  assign mb_tick_pulse_19$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_19$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_19 ;

  // register mb_tick_pulse_2
  assign mb_tick_pulse_2$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_2$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_2 ;

  // register mb_tick_pulse_20
  assign mb_tick_pulse_20$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_20$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_20 ;

  // register mb_tick_pulse_21
  assign mb_tick_pulse_21$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_21$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_21 ;

  // register mb_tick_pulse_22
  assign mb_tick_pulse_22$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_22$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_22 ;

  // register mb_tick_pulse_23
  assign mb_tick_pulse_23$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_23$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_23 ;

  // register mb_tick_pulse_24
  assign mb_tick_pulse_24$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_24$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_24 ;

  // register mb_tick_pulse_25
  assign mb_tick_pulse_25$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_25$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_25 ;

  // register mb_tick_pulse_26
  assign mb_tick_pulse_26$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_26$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_26 ;

  // register mb_tick_pulse_27
  assign mb_tick_pulse_27$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_27$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_27 ;

  // register mb_tick_pulse_28
  assign mb_tick_pulse_28$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_28$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_28 ;

  // register mb_tick_pulse_29
  assign mb_tick_pulse_29$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_29$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_29 ;

  // register mb_tick_pulse_3
  assign mb_tick_pulse_3$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_3$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_3 ;

  // register mb_tick_pulse_30
  assign mb_tick_pulse_30$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_30$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_30 ;

  // register mb_tick_pulse_31
  assign mb_tick_pulse_31$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_31$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_31 ;

  // register mb_tick_pulse_32
  assign mb_tick_pulse_32$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_32$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_32 ;

  // register mb_tick_pulse_33
  assign mb_tick_pulse_33$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_33$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_33 ;

  // register mb_tick_pulse_34
  assign mb_tick_pulse_34$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_34$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_34 ;

  // register mb_tick_pulse_35
  assign mb_tick_pulse_35$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_35$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_35 ;

  // register mb_tick_pulse_36
  assign mb_tick_pulse_36$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_36$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_36 ;

  // register mb_tick_pulse_37
  assign mb_tick_pulse_37$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_37$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_37 ;

  // register mb_tick_pulse_38
  assign mb_tick_pulse_38$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_38$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_38 ;

  // register mb_tick_pulse_39
  assign mb_tick_pulse_39$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_39$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_39 ;

  // register mb_tick_pulse_4
  assign mb_tick_pulse_4$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_4$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_4 ;

  // register mb_tick_pulse_40
  assign mb_tick_pulse_40$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_40$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_40 ;

  // register mb_tick_pulse_41
  assign mb_tick_pulse_41$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_41$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_41 ;

  // register mb_tick_pulse_42
  assign mb_tick_pulse_42$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_42$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_42 ;

  // register mb_tick_pulse_43
  assign mb_tick_pulse_43$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_43$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_43 ;

  // register mb_tick_pulse_44
  assign mb_tick_pulse_44$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_44$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_44 ;

  // register mb_tick_pulse_45
  assign mb_tick_pulse_45$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_45$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_45 ;

  // register mb_tick_pulse_46
  assign mb_tick_pulse_46$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_46$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_46 ;

  // register mb_tick_pulse_47
  assign mb_tick_pulse_47$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_47$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_47 ;

  // register mb_tick_pulse_48
  assign mb_tick_pulse_48$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_48$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_48 ;

  // register mb_tick_pulse_49
  assign mb_tick_pulse_49$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_49$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_49 ;

  // register mb_tick_pulse_5
  assign mb_tick_pulse_5$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_5$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_5 ;

  // register mb_tick_pulse_50
  assign mb_tick_pulse_50$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_50$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_50 ;

  // register mb_tick_pulse_51
  assign mb_tick_pulse_51$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_51$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_51 ;

  // register mb_tick_pulse_52
  assign mb_tick_pulse_52$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_52$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_52 ;

  // register mb_tick_pulse_53
  assign mb_tick_pulse_53$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_53$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_53 ;

  // register mb_tick_pulse_54
  assign mb_tick_pulse_54$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_54$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_54 ;

  // register mb_tick_pulse_55
  assign mb_tick_pulse_55$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_55$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_55 ;

  // register mb_tick_pulse_56
  assign mb_tick_pulse_56$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_56$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_56 ;

  // register mb_tick_pulse_57
  assign mb_tick_pulse_57$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_57$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_57 ;

  // register mb_tick_pulse_58
  assign mb_tick_pulse_58$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_58$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_58 ;

  // register mb_tick_pulse_59
  assign mb_tick_pulse_59$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_59$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_59 ;

  // register mb_tick_pulse_6
  assign mb_tick_pulse_6$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_6$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_6 ;

  // register mb_tick_pulse_7
  assign mb_tick_pulse_7$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_7$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_7 ;

  // register mb_tick_pulse_8
  assign mb_tick_pulse_8$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_8$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_8 ;

  // register mb_tick_pulse_9
  assign mb_tick_pulse_9$D_IN = MUX_mb_tick_pulse$write_1__SEL_1 ;
  assign mb_tick_pulse_9$EN =
	     WILL_FIRE_RL_pulser && mpc == 9'd511 ||
	     WILL_FIRE_RL_mb_tick_pulse_off_9 ;

  // register mb_valid
  assign mb_valid$D_IN = 1'd1 ;
  assign mb_valid$EN = CAN_FIRE_RL_init ;

  // register mb_valid_1
  assign mb_valid_1$D_IN = 1'd1 ;
  assign mb_valid_1$EN = CAN_FIRE_RL_init ;

  // register mb_valid_10
  assign mb_valid_10$D_IN = 1'd1 ;
  assign mb_valid_10$EN = CAN_FIRE_RL_init ;

  // register mb_valid_11
  assign mb_valid_11$D_IN = 1'd1 ;
  assign mb_valid_11$EN = CAN_FIRE_RL_init ;

  // register mb_valid_12
  assign mb_valid_12$D_IN = 1'd1 ;
  assign mb_valid_12$EN = CAN_FIRE_RL_init ;

  // register mb_valid_13
  assign mb_valid_13$D_IN = 1'd1 ;
  assign mb_valid_13$EN = CAN_FIRE_RL_init ;

  // register mb_valid_14
  assign mb_valid_14$D_IN = 1'd1 ;
  assign mb_valid_14$EN = CAN_FIRE_RL_init ;

  // register mb_valid_15
  assign mb_valid_15$D_IN = 1'd1 ;
  assign mb_valid_15$EN = CAN_FIRE_RL_init ;

  // register mb_valid_16
  assign mb_valid_16$D_IN = 1'd1 ;
  assign mb_valid_16$EN = CAN_FIRE_RL_init ;

  // register mb_valid_17
  assign mb_valid_17$D_IN = 1'd1 ;
  assign mb_valid_17$EN = CAN_FIRE_RL_init ;

  // register mb_valid_18
  assign mb_valid_18$D_IN = 1'd1 ;
  assign mb_valid_18$EN = CAN_FIRE_RL_init ;

  // register mb_valid_19
  assign mb_valid_19$D_IN = 1'd1 ;
  assign mb_valid_19$EN = CAN_FIRE_RL_init ;

  // register mb_valid_2
  assign mb_valid_2$D_IN = 1'd1 ;
  assign mb_valid_2$EN = CAN_FIRE_RL_init ;

  // register mb_valid_20
  assign mb_valid_20$D_IN = 1'd1 ;
  assign mb_valid_20$EN = CAN_FIRE_RL_init ;

  // register mb_valid_21
  assign mb_valid_21$D_IN = 1'd1 ;
  assign mb_valid_21$EN = CAN_FIRE_RL_init ;

  // register mb_valid_22
  assign mb_valid_22$D_IN = 1'd1 ;
  assign mb_valid_22$EN = CAN_FIRE_RL_init ;

  // register mb_valid_23
  assign mb_valid_23$D_IN = 1'd1 ;
  assign mb_valid_23$EN = CAN_FIRE_RL_init ;

  // register mb_valid_24
  assign mb_valid_24$D_IN = 1'd1 ;
  assign mb_valid_24$EN = CAN_FIRE_RL_init ;

  // register mb_valid_25
  assign mb_valid_25$D_IN = 1'd1 ;
  assign mb_valid_25$EN = CAN_FIRE_RL_init ;

  // register mb_valid_26
  assign mb_valid_26$D_IN = 1'd1 ;
  assign mb_valid_26$EN = CAN_FIRE_RL_init ;

  // register mb_valid_27
  assign mb_valid_27$D_IN = 1'd1 ;
  assign mb_valid_27$EN = CAN_FIRE_RL_init ;

  // register mb_valid_28
  assign mb_valid_28$D_IN = 1'd1 ;
  assign mb_valid_28$EN = CAN_FIRE_RL_init ;

  // register mb_valid_29
  assign mb_valid_29$D_IN = 1'd1 ;
  assign mb_valid_29$EN = CAN_FIRE_RL_init ;

  // register mb_valid_3
  assign mb_valid_3$D_IN = 1'd1 ;
  assign mb_valid_3$EN = CAN_FIRE_RL_init ;

  // register mb_valid_30
  assign mb_valid_30$D_IN = 1'd1 ;
  assign mb_valid_30$EN = CAN_FIRE_RL_init ;

  // register mb_valid_31
  assign mb_valid_31$D_IN = 1'd1 ;
  assign mb_valid_31$EN = CAN_FIRE_RL_init ;

  // register mb_valid_32
  assign mb_valid_32$D_IN = 1'd1 ;
  assign mb_valid_32$EN = CAN_FIRE_RL_init ;

  // register mb_valid_33
  assign mb_valid_33$D_IN = 1'd1 ;
  assign mb_valid_33$EN = CAN_FIRE_RL_init ;

  // register mb_valid_34
  assign mb_valid_34$D_IN = 1'd1 ;
  assign mb_valid_34$EN = CAN_FIRE_RL_init ;

  // register mb_valid_35
  assign mb_valid_35$D_IN = 1'd1 ;
  assign mb_valid_35$EN = CAN_FIRE_RL_init ;

  // register mb_valid_36
  assign mb_valid_36$D_IN = 1'd1 ;
  assign mb_valid_36$EN = CAN_FIRE_RL_init ;

  // register mb_valid_37
  assign mb_valid_37$D_IN = 1'd1 ;
  assign mb_valid_37$EN = CAN_FIRE_RL_init ;

  // register mb_valid_38
  assign mb_valid_38$D_IN = 1'd1 ;
  assign mb_valid_38$EN = CAN_FIRE_RL_init ;

  // register mb_valid_39
  assign mb_valid_39$D_IN = 1'd1 ;
  assign mb_valid_39$EN = CAN_FIRE_RL_init ;

  // register mb_valid_4
  assign mb_valid_4$D_IN = 1'd1 ;
  assign mb_valid_4$EN = CAN_FIRE_RL_init ;

  // register mb_valid_40
  assign mb_valid_40$D_IN = 1'd1 ;
  assign mb_valid_40$EN = CAN_FIRE_RL_init ;

  // register mb_valid_41
  assign mb_valid_41$D_IN = 1'd1 ;
  assign mb_valid_41$EN = CAN_FIRE_RL_init ;

  // register mb_valid_42
  assign mb_valid_42$D_IN = 1'd1 ;
  assign mb_valid_42$EN = CAN_FIRE_RL_init ;

  // register mb_valid_43
  assign mb_valid_43$D_IN = 1'd1 ;
  assign mb_valid_43$EN = CAN_FIRE_RL_init ;

  // register mb_valid_44
  assign mb_valid_44$D_IN = 1'd1 ;
  assign mb_valid_44$EN = CAN_FIRE_RL_init ;

  // register mb_valid_45
  assign mb_valid_45$D_IN = 1'd1 ;
  assign mb_valid_45$EN = CAN_FIRE_RL_init ;

  // register mb_valid_46
  assign mb_valid_46$D_IN = 1'd1 ;
  assign mb_valid_46$EN = CAN_FIRE_RL_init ;

  // register mb_valid_47
  assign mb_valid_47$D_IN = 1'd1 ;
  assign mb_valid_47$EN = CAN_FIRE_RL_init ;

  // register mb_valid_48
  assign mb_valid_48$D_IN = 1'd1 ;
  assign mb_valid_48$EN = CAN_FIRE_RL_init ;

  // register mb_valid_49
  assign mb_valid_49$D_IN = 1'd1 ;
  assign mb_valid_49$EN = CAN_FIRE_RL_init ;

  // register mb_valid_5
  assign mb_valid_5$D_IN = 1'd1 ;
  assign mb_valid_5$EN = CAN_FIRE_RL_init ;

  // register mb_valid_50
  assign mb_valid_50$D_IN = 1'd1 ;
  assign mb_valid_50$EN = CAN_FIRE_RL_init ;

  // register mb_valid_51
  assign mb_valid_51$D_IN = 1'd1 ;
  assign mb_valid_51$EN = CAN_FIRE_RL_init ;

  // register mb_valid_52
  assign mb_valid_52$D_IN = 1'd1 ;
  assign mb_valid_52$EN = CAN_FIRE_RL_init ;

  // register mb_valid_53
  assign mb_valid_53$D_IN = 1'd1 ;
  assign mb_valid_53$EN = CAN_FIRE_RL_init ;

  // register mb_valid_54
  assign mb_valid_54$D_IN = 1'd1 ;
  assign mb_valid_54$EN = CAN_FIRE_RL_init ;

  // register mb_valid_55
  assign mb_valid_55$D_IN = 1'd1 ;
  assign mb_valid_55$EN = CAN_FIRE_RL_init ;

  // register mb_valid_56
  assign mb_valid_56$D_IN = 1'd1 ;
  assign mb_valid_56$EN = CAN_FIRE_RL_init ;

  // register mb_valid_57
  assign mb_valid_57$D_IN = 1'd1 ;
  assign mb_valid_57$EN = CAN_FIRE_RL_init ;

  // register mb_valid_58
  assign mb_valid_58$D_IN = 1'd1 ;
  assign mb_valid_58$EN = CAN_FIRE_RL_init ;

  // register mb_valid_59
  assign mb_valid_59$D_IN = 1'd1 ;
  assign mb_valid_59$EN = CAN_FIRE_RL_init ;

  // register mb_valid_6
  assign mb_valid_6$D_IN = 1'd1 ;
  assign mb_valid_6$EN = CAN_FIRE_RL_init ;

  // register mb_valid_7
  assign mb_valid_7$D_IN = 1'd1 ;
  assign mb_valid_7$EN = CAN_FIRE_RL_init ;

  // register mb_valid_8
  assign mb_valid_8$D_IN = 1'd1 ;
  assign mb_valid_8$EN = CAN_FIRE_RL_init ;

  // register mb_valid_9
  assign mb_valid_9$D_IN = 1'd1 ;
  assign mb_valid_9$EN = CAN_FIRE_RL_init ;

  // register mpc
  assign mpc$D_IN = (mpc == 9'd511) ? 9'd0 : mpc + 9'd1 ;
  assign mpc$EN = CAN_FIRE_RL_pulser ;

  // register sync_next
  assign sync_next$D_IN = !WILL_FIRE_RL_beat_injector_start ;
  assign sync_next$EN = WILL_FIRE_RL_beat_injector_start || EN_q_sync ;

  // register sync_this
  assign sync_this$D_IN = sync_next ;
  assign sync_this$EN = WILL_FIRE_RL_beat_injector_start ;

  // submodule bc_infifo
  assign bc_infifo$D_IN = putSampleInput_in ;
  assign bc_infifo$ENQ = EN_putSampleInput ;
  assign bc_infifo$DEQ = CAN_FIRE_RL_bc_inject_sample ;
  assign bc_infifo$CLR = 1'b0 ;

  // submodule bc_outfifo
  assign bc_outfifo$D_IN = bc_avg_energy ;
  assign bc_outfifo$ENQ =
	     WILL_FIRE_RL_bc_compare_energies &&
	     NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31 ;
  assign bc_outfifo$DEQ = WILL_FIRE_RL_beat_injector_start ;
  assign bc_outfifo$CLR = 1'b0 ;

  // submodule bt_info
  assign bt_info$D_IN =
	     MUX_bt_info$enq_1__SEL_1 ?
	       mb_last_counter[21:14] :
	       IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781[21:14] ;
  assign bt_info$ENQ =
	     WILL_FIRE_RL_beat_injector_start && sync_next ||
	     WILL_FIRE_RL_beat_injector_cont && sync_this ;
  assign bt_info$DEQ = EN_getBeatInfo ;
  assign bt_info$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infif_ETC___d846 =
	     (IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infifo_f_ETC___d849[27] ?
		-IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infifo_f_ETC___d849 :
		IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infifo_f_ETC___d849) >>
	     12 ;
  assign IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_IF_bc_avg_ETC___d785 =
	     bc_avg_energy[27] ?
	       -IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_bc_avg_en_ETC___d847 :
	       IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_bc_avg_en_ETC___d847 ;
  assign IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_bc_avg_en_ETC___d847 =
	     (bc_avg_energy[27] ? -bc_avg_energy : bc_avg_energy) >> 1 ;
  assign IF_bc_cur_energy_BIT_27_4_THEN_NEG_bc_cur_ener_ETC___d848 =
	     (bc_cur_energy[27] ? -bc_cur_energy : bc_cur_energy) >> 1 ;
  assign IF_bc_infifo_first_BIT_13_THEN_NEG_bc_infifo_f_ETC___d849 =
	     x__h508 * x__h508 ;
  assign NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31 =
	     (bc_cur_energy ^ 28'h8000000) >
	     (bc_avg_energy +
	      IF_bc_avg_energy_2_BIT_27_3_THEN_NEG_IF_bc_avg_ETC___d785 ^
	      28'h8000000) ;
  assign mb_valid_11_07_AND_NOT_mb_tick_pulse_11_08_25__ETC___d570 =
	     mb_valid_11 && !mb_tick_pulse_11 && mb_valid_12 &&
	     !mb_tick_pulse_12 &&
	     mb_valid_13_19_AND_NOT_mb_tick_pulse_13_20_29__ETC___d568 ;
  assign mb_valid_13_19_AND_NOT_mb_tick_pulse_13_20_29__ETC___d568 =
	     mb_valid_13 && !mb_tick_pulse_13 && mb_valid_14 &&
	     !mb_tick_pulse_14 &&
	     mb_valid_15_31_AND_NOT_mb_tick_pulse_15_32_33__ETC___d566 ;
  assign mb_valid_15_31_AND_NOT_mb_tick_pulse_15_32_33__ETC___d566 =
	     mb_valid_15 && !mb_tick_pulse_15 && mb_valid_16 &&
	     !mb_tick_pulse_16 &&
	     mb_valid_17_43_AND_NOT_mb_tick_pulse_17_44_37__ETC___d564 ;
  assign mb_valid_17_43_AND_NOT_mb_tick_pulse_17_44_37__ETC___d564 =
	     mb_valid_17 && !mb_tick_pulse_17 && mb_valid_18 &&
	     !mb_tick_pulse_18 &&
	     mb_valid_19_55_AND_NOT_mb_tick_pulse_19_56_41__ETC___d562 ;
  assign mb_valid_19_55_AND_NOT_mb_tick_pulse_19_56_41__ETC___d562 =
	     mb_valid_19 && !mb_tick_pulse_19 && mb_valid_20 &&
	     !mb_tick_pulse_20 &&
	     mb_valid_21_67_AND_NOT_mb_tick_pulse_21_68_45__ETC___d560 ;
  assign mb_valid_1_7_AND_NOT_mb_tick_pulse_1_8_05_06_A_ETC___d580 =
	     mb_valid_1 && !mb_tick_pulse_1 && mb_valid_2 &&
	     !mb_tick_pulse_2 &&
	     mb_valid_3_9_AND_NOT_mb_tick_pulse_3_0_09_10_A_ETC___d578 ;
  assign mb_valid_21_67_AND_NOT_mb_tick_pulse_21_68_45__ETC___d560 =
	     mb_valid_21 && !mb_tick_pulse_21 && mb_valid_22 &&
	     !mb_tick_pulse_22 &&
	     mb_valid_23_79_AND_NOT_mb_tick_pulse_23_80_49__ETC___d558 ;
  assign mb_valid_23_79_AND_NOT_mb_tick_pulse_23_80_49__ETC___d558 =
	     mb_valid_23 && !mb_tick_pulse_23 && mb_valid_24 &&
	     !mb_tick_pulse_24 &&
	     mb_valid_25_91_AND_NOT_mb_tick_pulse_25_92_53__ETC___d556 ;
  assign mb_valid_25_91_AND_NOT_mb_tick_pulse_25_92_53__ETC___d556 =
	     mb_valid_25 && !mb_tick_pulse_25 && mb_valid_26 &&
	     !mb_tick_pulse_26 &&
	     mb_valid_27_03_AND_NOT_mb_tick_pulse_27_04_57__ETC___d554 ;
  assign mb_valid_27_03_AND_NOT_mb_tick_pulse_27_04_57__ETC___d554 =
	     mb_valid_27 && !mb_tick_pulse_27 && mb_valid_28 &&
	     !mb_tick_pulse_28 &&
	     mb_valid_29_15_AND_NOT_mb_tick_pulse_29_16_61__ETC___d552 ;
  assign mb_valid_29_15_AND_NOT_mb_tick_pulse_29_16_61__ETC___d552 =
	     mb_valid_29 && !mb_tick_pulse_29 && mb_valid_30 &&
	     !mb_tick_pulse_30 &&
	     mb_valid_31_27_AND_NOT_mb_tick_pulse_31_28_65__ETC___d550 ;
  assign mb_valid_31_27_AND_NOT_mb_tick_pulse_31_28_65__ETC___d550 =
	     mb_valid_31 && !mb_tick_pulse_31 && mb_valid_32 &&
	     !mb_tick_pulse_32 &&
	     mb_valid_33_39_AND_NOT_mb_tick_pulse_33_40_69__ETC___d548 ;
  assign mb_valid_33_39_AND_NOT_mb_tick_pulse_33_40_69__ETC___d548 =
	     mb_valid_33 && !mb_tick_pulse_33 && mb_valid_34 &&
	     !mb_tick_pulse_34 &&
	     mb_valid_35_51_AND_NOT_mb_tick_pulse_35_52_73__ETC___d546 ;
  assign mb_valid_35_51_AND_NOT_mb_tick_pulse_35_52_73__ETC___d546 =
	     mb_valid_35 && !mb_tick_pulse_35 && mb_valid_36 &&
	     !mb_tick_pulse_36 &&
	     mb_valid_37_63_AND_NOT_mb_tick_pulse_37_64_77__ETC___d544 ;
  assign mb_valid_37_63_AND_NOT_mb_tick_pulse_37_64_77__ETC___d544 =
	     mb_valid_37 && !mb_tick_pulse_37 && mb_valid_38 &&
	     !mb_tick_pulse_38 &&
	     mb_valid_39_75_AND_NOT_mb_tick_pulse_39_76_81__ETC___d542 ;
  assign mb_valid_39_75_AND_NOT_mb_tick_pulse_39_76_81__ETC___d542 =
	     mb_valid_39 && !mb_tick_pulse_39 && mb_valid_40 &&
	     !mb_tick_pulse_40 &&
	     mb_valid_41_87_AND_NOT_mb_tick_pulse_41_88_85__ETC___d540 ;
  assign mb_valid_3_9_AND_NOT_mb_tick_pulse_3_0_09_10_A_ETC___d578 =
	     mb_valid_3 && !mb_tick_pulse_3 && mb_valid_4 &&
	     !mb_tick_pulse_4 &&
	     mb_valid_5_1_AND_NOT_mb_tick_pulse_5_2_13_14_A_ETC___d576 ;
  assign mb_valid_41_87_AND_NOT_mb_tick_pulse_41_88_85__ETC___d540 =
	     mb_valid_41 && !mb_tick_pulse_41 && mb_valid_42 &&
	     !mb_tick_pulse_42 &&
	     mb_valid_43_99_AND_NOT_mb_tick_pulse_43_00_89__ETC___d538 ;
  assign mb_valid_43_99_AND_NOT_mb_tick_pulse_43_00_89__ETC___d538 =
	     mb_valid_43 && !mb_tick_pulse_43 && mb_valid_44 &&
	     !mb_tick_pulse_44 &&
	     mb_valid_45_11_AND_NOT_mb_tick_pulse_45_12_93__ETC___d536 ;
  assign mb_valid_45_11_AND_NOT_mb_tick_pulse_45_12_93__ETC___d536 =
	     mb_valid_45 && !mb_tick_pulse_45 && mb_valid_46 &&
	     !mb_tick_pulse_46 &&
	     mb_valid_47_23_AND_NOT_mb_tick_pulse_47_24_97__ETC___d534 ;
  assign mb_valid_47_23_AND_NOT_mb_tick_pulse_47_24_97__ETC___d534 =
	     mb_valid_47 && !mb_tick_pulse_47 && mb_valid_48 &&
	     !mb_tick_pulse_48 &&
	     mb_valid_49_35_AND_NOT_mb_tick_pulse_49_36_01__ETC___d532 ;
  assign mb_valid_49_35_AND_NOT_mb_tick_pulse_49_36_01__ETC___d532 =
	     mb_valid_49 && !mb_tick_pulse_49 && mb_valid_50 &&
	     !mb_tick_pulse_50 &&
	     mb_valid_51_47_AND_NOT_mb_tick_pulse_51_48_05__ETC___d530 ;
  assign mb_valid_51_47_AND_NOT_mb_tick_pulse_51_48_05__ETC___d530 =
	     mb_valid_51 && !mb_tick_pulse_51 && mb_valid_52 &&
	     !mb_tick_pulse_52 &&
	     mb_valid_53_59_AND_NOT_mb_tick_pulse_53_60_09__ETC___d528 ;
  assign mb_valid_53_59_AND_NOT_mb_tick_pulse_53_60_09__ETC___d528 =
	     mb_valid_53 && !mb_tick_pulse_53 && mb_valid_54 &&
	     !mb_tick_pulse_54 &&
	     mb_valid_55_71_AND_NOT_mb_tick_pulse_55_72_13__ETC___d526 ;
  assign mb_valid_55_71_AND_NOT_mb_tick_pulse_55_72_13__ETC___d526 =
	     mb_valid_55 && !mb_tick_pulse_55 && mb_valid_56 &&
	     !mb_tick_pulse_56 &&
	     mb_valid_57_83_AND_NOT_mb_tick_pulse_57_84_17__ETC___d524 ;
  assign mb_valid_57_83_AND_NOT_mb_tick_pulse_57_84_17__ETC___d524 =
	     mb_valid_57 && !mb_tick_pulse_57 && mb_valid_58 &&
	     !mb_tick_pulse_58 &&
	     mb_valid_59 &&
	     !mb_tick_pulse_59 ;
  assign mb_valid_5_1_AND_NOT_mb_tick_pulse_5_2_13_14_A_ETC___d576 =
	     mb_valid_5 && !mb_tick_pulse_5 && mb_valid_6 &&
	     !mb_tick_pulse_6 &&
	     mb_valid_7_3_AND_NOT_mb_tick_pulse_7_4_17_18_A_ETC___d574 ;
  assign mb_valid_7_3_AND_NOT_mb_tick_pulse_7_4_17_18_A_ETC___d574 =
	     mb_valid_7 && !mb_tick_pulse_7 && mb_valid_8 &&
	     !mb_tick_pulse_8 &&
	     mb_valid_9_5_AND_NOT_mb_tick_pulse_9_6_21_22_A_ETC___d572 ;
  assign mb_valid_9_5_AND_NOT_mb_tick_pulse_9_6_21_22_A_ETC___d572 =
	     mb_valid_9 && !mb_tick_pulse_9 && mb_valid_10 &&
	     !mb_tick_pulse_10 &&
	     mb_valid_11_07_AND_NOT_mb_tick_pulse_11_08_25__ETC___d570 ;
  assign x__h508 = bc_infifo$D_OUT[13] ? -bc_infifo$D_OUT : bc_infifo$D_OUT ;
  always@(mb_out_count or
	  mb_last_counter_59 or
	  mb_last_counter or
	  mb_last_counter_1 or
	  mb_last_counter_2 or
	  mb_last_counter_3 or
	  mb_last_counter_4 or
	  mb_last_counter_5 or
	  mb_last_counter_6 or
	  mb_last_counter_7 or
	  mb_last_counter_8 or
	  mb_last_counter_9 or
	  mb_last_counter_10 or
	  mb_last_counter_11 or
	  mb_last_counter_12 or
	  mb_last_counter_13 or
	  mb_last_counter_14 or
	  mb_last_counter_15 or
	  mb_last_counter_16 or
	  mb_last_counter_17 or
	  mb_last_counter_18 or
	  mb_last_counter_19 or
	  mb_last_counter_20 or
	  mb_last_counter_21 or
	  mb_last_counter_22 or
	  mb_last_counter_23 or
	  mb_last_counter_24 or
	  mb_last_counter_25 or
	  mb_last_counter_26 or
	  mb_last_counter_27 or
	  mb_last_counter_28 or
	  mb_last_counter_29 or
	  mb_last_counter_30 or
	  mb_last_counter_31 or
	  mb_last_counter_32 or
	  mb_last_counter_33 or
	  mb_last_counter_34 or
	  mb_last_counter_35 or
	  mb_last_counter_36 or
	  mb_last_counter_37 or
	  mb_last_counter_38 or
	  mb_last_counter_39 or
	  mb_last_counter_40 or
	  mb_last_counter_41 or
	  mb_last_counter_42 or
	  mb_last_counter_43 or
	  mb_last_counter_44 or
	  mb_last_counter_45 or
	  mb_last_counter_46 or
	  mb_last_counter_47 or
	  mb_last_counter_48 or
	  mb_last_counter_49 or
	  mb_last_counter_50 or
	  mb_last_counter_51 or
	  mb_last_counter_52 or
	  mb_last_counter_53 or
	  mb_last_counter_54 or
	  mb_last_counter_55 or
	  mb_last_counter_56 or mb_last_counter_57 or mb_last_counter_58)
  begin
    case (mb_out_count)
      6'd0:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter;
      6'd1:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_1;
      6'd2:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_2;
      6'd3:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_3;
      6'd4:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_4;
      6'd5:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_5;
      6'd6:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_6;
      6'd7:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_7;
      6'd8:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_8;
      6'd9:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_9;
      6'd10:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_10;
      6'd11:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_11;
      6'd12:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_12;
      6'd13:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_13;
      6'd14:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_14;
      6'd15:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_15;
      6'd16:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_16;
      6'd17:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_17;
      6'd18:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_18;
      6'd19:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_19;
      6'd20:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_20;
      6'd21:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_21;
      6'd22:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_22;
      6'd23:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_23;
      6'd24:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_24;
      6'd25:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_25;
      6'd26:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_26;
      6'd27:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_27;
      6'd28:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_28;
      6'd29:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_29;
      6'd30:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_30;
      6'd31:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_31;
      6'd32:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_32;
      6'd33:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_33;
      6'd34:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_34;
      6'd35:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_35;
      6'd36:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_36;
      6'd37:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_37;
      6'd38:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_38;
      6'd39:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_39;
      6'd40:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_40;
      6'd41:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_41;
      6'd42:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_42;
      6'd43:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_43;
      6'd44:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_44;
      6'd45:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_45;
      6'd46:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_46;
      6'd47:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_47;
      6'd48:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_48;
      6'd49:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_49;
      6'd50:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_50;
      6'd51:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_51;
      6'd52:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_52;
      6'd53:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_53;
      6'd54:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_54;
      6'd55:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_55;
      6'd56:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_56;
      6'd57:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_57;
      6'd58:
	  IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
	      mb_last_counter_58;
      default: IF_mb_out_count_90_EQ_0_91_THEN_mb_last_counte_ETC___d781 =
		   mb_last_counter_59;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bc_avg_energy <= `BSV_ASSIGNMENT_DELAY 28'd0;
	bc_cur_energy <= `BSV_ASSIGNMENT_DELAY 28'd0;
	bc_sample_count <= `BSV_ASSIGNMENT_DELAY 12'd0;
	beat_guess <= `BSV_ASSIGNMENT_DELAY 28'd0;
	init_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_counter <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_16 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_17 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_18 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_19 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_20 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_21 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_22 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_23 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_24 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_25 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_26 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_27 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_28 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_29 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_30 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_31 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_32 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_33 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_34 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_35 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_36 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_37 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_38 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_39 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_40 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_41 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_42 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_43 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_44 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_45 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_46 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_47 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_48 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_49 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_50 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_51 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_52 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_53 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_54 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_55 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_56 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_57 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_58 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_59 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_counter_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_16 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_17 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_18 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_19 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_20 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_21 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_22 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_23 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_24 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_25 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_26 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_27 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_28 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_29 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_30 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_31 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_32 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_33 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_34 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_35 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_36 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_37 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_38 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_39 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_40 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_41 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_42 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_43 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_44 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_45 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_46 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_47 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_48 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_49 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_50 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_51 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_52 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_53 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_54 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_55 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_56 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_57 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_58 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_59 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_increment_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_16 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_17 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_18 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_19 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_20 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_21 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_22 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_23 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_24 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_25 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_26 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_27 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_28 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_29 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_30 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_31 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_32 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_33 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_34 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_35 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_36 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_37 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_38 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_39 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_40 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_41 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_42 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_43 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_44 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_45 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_46 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_47 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_48 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_49 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_50 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_51 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_52 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_53 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_54 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_55 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_56 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_57 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_58 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_59 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_last_counter_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	mb_out_count <= `BSV_ASSIGNMENT_DELAY 6'd0;
	mb_tick_pulse <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_16 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_17 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_18 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_19 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_20 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_21 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_22 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_23 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_24 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_25 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_26 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_27 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_28 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_29 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_30 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_31 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_32 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_33 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_34 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_35 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_36 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_37 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_38 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_39 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_40 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_41 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_42 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_43 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_44 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_45 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_46 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_47 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_48 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_49 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_50 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_51 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_52 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_53 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_54 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_55 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_56 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_57 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_58 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_59 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_tick_pulse_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_16 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_17 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_18 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_19 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_20 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_21 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_22 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_23 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_24 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_25 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_26 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_27 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_28 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_29 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_30 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_31 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_32 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_33 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_34 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_35 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_36 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_37 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_38 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_39 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_40 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_41 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_42 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_43 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_44 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_45 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_46 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_47 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_48 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_49 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_50 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_51 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_52 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_53 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_54 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_55 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_56 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_57 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_58 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_59 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mb_valid_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mpc <= `BSV_ASSIGNMENT_DELAY 9'd0;
	sync_next <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sync_this <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (bc_avg_energy$EN)
	  bc_avg_energy <= `BSV_ASSIGNMENT_DELAY bc_avg_energy$D_IN;
	if (bc_cur_energy$EN)
	  bc_cur_energy <= `BSV_ASSIGNMENT_DELAY bc_cur_energy$D_IN;
	if (bc_sample_count$EN)
	  bc_sample_count <= `BSV_ASSIGNMENT_DELAY bc_sample_count$D_IN;
	if (beat_guess$EN)
	  beat_guess <= `BSV_ASSIGNMENT_DELAY beat_guess$D_IN;
	if (init_done$EN) init_done <= `BSV_ASSIGNMENT_DELAY init_done$D_IN;
	if (mb_counter$EN)
	  mb_counter <= `BSV_ASSIGNMENT_DELAY mb_counter$D_IN;
	if (mb_counter_1$EN)
	  mb_counter_1 <= `BSV_ASSIGNMENT_DELAY mb_counter_1$D_IN;
	if (mb_counter_10$EN)
	  mb_counter_10 <= `BSV_ASSIGNMENT_DELAY mb_counter_10$D_IN;
	if (mb_counter_11$EN)
	  mb_counter_11 <= `BSV_ASSIGNMENT_DELAY mb_counter_11$D_IN;
	if (mb_counter_12$EN)
	  mb_counter_12 <= `BSV_ASSIGNMENT_DELAY mb_counter_12$D_IN;
	if (mb_counter_13$EN)
	  mb_counter_13 <= `BSV_ASSIGNMENT_DELAY mb_counter_13$D_IN;
	if (mb_counter_14$EN)
	  mb_counter_14 <= `BSV_ASSIGNMENT_DELAY mb_counter_14$D_IN;
	if (mb_counter_15$EN)
	  mb_counter_15 <= `BSV_ASSIGNMENT_DELAY mb_counter_15$D_IN;
	if (mb_counter_16$EN)
	  mb_counter_16 <= `BSV_ASSIGNMENT_DELAY mb_counter_16$D_IN;
	if (mb_counter_17$EN)
	  mb_counter_17 <= `BSV_ASSIGNMENT_DELAY mb_counter_17$D_IN;
	if (mb_counter_18$EN)
	  mb_counter_18 <= `BSV_ASSIGNMENT_DELAY mb_counter_18$D_IN;
	if (mb_counter_19$EN)
	  mb_counter_19 <= `BSV_ASSIGNMENT_DELAY mb_counter_19$D_IN;
	if (mb_counter_2$EN)
	  mb_counter_2 <= `BSV_ASSIGNMENT_DELAY mb_counter_2$D_IN;
	if (mb_counter_20$EN)
	  mb_counter_20 <= `BSV_ASSIGNMENT_DELAY mb_counter_20$D_IN;
	if (mb_counter_21$EN)
	  mb_counter_21 <= `BSV_ASSIGNMENT_DELAY mb_counter_21$D_IN;
	if (mb_counter_22$EN)
	  mb_counter_22 <= `BSV_ASSIGNMENT_DELAY mb_counter_22$D_IN;
	if (mb_counter_23$EN)
	  mb_counter_23 <= `BSV_ASSIGNMENT_DELAY mb_counter_23$D_IN;
	if (mb_counter_24$EN)
	  mb_counter_24 <= `BSV_ASSIGNMENT_DELAY mb_counter_24$D_IN;
	if (mb_counter_25$EN)
	  mb_counter_25 <= `BSV_ASSIGNMENT_DELAY mb_counter_25$D_IN;
	if (mb_counter_26$EN)
	  mb_counter_26 <= `BSV_ASSIGNMENT_DELAY mb_counter_26$D_IN;
	if (mb_counter_27$EN)
	  mb_counter_27 <= `BSV_ASSIGNMENT_DELAY mb_counter_27$D_IN;
	if (mb_counter_28$EN)
	  mb_counter_28 <= `BSV_ASSIGNMENT_DELAY mb_counter_28$D_IN;
	if (mb_counter_29$EN)
	  mb_counter_29 <= `BSV_ASSIGNMENT_DELAY mb_counter_29$D_IN;
	if (mb_counter_3$EN)
	  mb_counter_3 <= `BSV_ASSIGNMENT_DELAY mb_counter_3$D_IN;
	if (mb_counter_30$EN)
	  mb_counter_30 <= `BSV_ASSIGNMENT_DELAY mb_counter_30$D_IN;
	if (mb_counter_31$EN)
	  mb_counter_31 <= `BSV_ASSIGNMENT_DELAY mb_counter_31$D_IN;
	if (mb_counter_32$EN)
	  mb_counter_32 <= `BSV_ASSIGNMENT_DELAY mb_counter_32$D_IN;
	if (mb_counter_33$EN)
	  mb_counter_33 <= `BSV_ASSIGNMENT_DELAY mb_counter_33$D_IN;
	if (mb_counter_34$EN)
	  mb_counter_34 <= `BSV_ASSIGNMENT_DELAY mb_counter_34$D_IN;
	if (mb_counter_35$EN)
	  mb_counter_35 <= `BSV_ASSIGNMENT_DELAY mb_counter_35$D_IN;
	if (mb_counter_36$EN)
	  mb_counter_36 <= `BSV_ASSIGNMENT_DELAY mb_counter_36$D_IN;
	if (mb_counter_37$EN)
	  mb_counter_37 <= `BSV_ASSIGNMENT_DELAY mb_counter_37$D_IN;
	if (mb_counter_38$EN)
	  mb_counter_38 <= `BSV_ASSIGNMENT_DELAY mb_counter_38$D_IN;
	if (mb_counter_39$EN)
	  mb_counter_39 <= `BSV_ASSIGNMENT_DELAY mb_counter_39$D_IN;
	if (mb_counter_4$EN)
	  mb_counter_4 <= `BSV_ASSIGNMENT_DELAY mb_counter_4$D_IN;
	if (mb_counter_40$EN)
	  mb_counter_40 <= `BSV_ASSIGNMENT_DELAY mb_counter_40$D_IN;
	if (mb_counter_41$EN)
	  mb_counter_41 <= `BSV_ASSIGNMENT_DELAY mb_counter_41$D_IN;
	if (mb_counter_42$EN)
	  mb_counter_42 <= `BSV_ASSIGNMENT_DELAY mb_counter_42$D_IN;
	if (mb_counter_43$EN)
	  mb_counter_43 <= `BSV_ASSIGNMENT_DELAY mb_counter_43$D_IN;
	if (mb_counter_44$EN)
	  mb_counter_44 <= `BSV_ASSIGNMENT_DELAY mb_counter_44$D_IN;
	if (mb_counter_45$EN)
	  mb_counter_45 <= `BSV_ASSIGNMENT_DELAY mb_counter_45$D_IN;
	if (mb_counter_46$EN)
	  mb_counter_46 <= `BSV_ASSIGNMENT_DELAY mb_counter_46$D_IN;
	if (mb_counter_47$EN)
	  mb_counter_47 <= `BSV_ASSIGNMENT_DELAY mb_counter_47$D_IN;
	if (mb_counter_48$EN)
	  mb_counter_48 <= `BSV_ASSIGNMENT_DELAY mb_counter_48$D_IN;
	if (mb_counter_49$EN)
	  mb_counter_49 <= `BSV_ASSIGNMENT_DELAY mb_counter_49$D_IN;
	if (mb_counter_5$EN)
	  mb_counter_5 <= `BSV_ASSIGNMENT_DELAY mb_counter_5$D_IN;
	if (mb_counter_50$EN)
	  mb_counter_50 <= `BSV_ASSIGNMENT_DELAY mb_counter_50$D_IN;
	if (mb_counter_51$EN)
	  mb_counter_51 <= `BSV_ASSIGNMENT_DELAY mb_counter_51$D_IN;
	if (mb_counter_52$EN)
	  mb_counter_52 <= `BSV_ASSIGNMENT_DELAY mb_counter_52$D_IN;
	if (mb_counter_53$EN)
	  mb_counter_53 <= `BSV_ASSIGNMENT_DELAY mb_counter_53$D_IN;
	if (mb_counter_54$EN)
	  mb_counter_54 <= `BSV_ASSIGNMENT_DELAY mb_counter_54$D_IN;
	if (mb_counter_55$EN)
	  mb_counter_55 <= `BSV_ASSIGNMENT_DELAY mb_counter_55$D_IN;
	if (mb_counter_56$EN)
	  mb_counter_56 <= `BSV_ASSIGNMENT_DELAY mb_counter_56$D_IN;
	if (mb_counter_57$EN)
	  mb_counter_57 <= `BSV_ASSIGNMENT_DELAY mb_counter_57$D_IN;
	if (mb_counter_58$EN)
	  mb_counter_58 <= `BSV_ASSIGNMENT_DELAY mb_counter_58$D_IN;
	if (mb_counter_59$EN)
	  mb_counter_59 <= `BSV_ASSIGNMENT_DELAY mb_counter_59$D_IN;
	if (mb_counter_6$EN)
	  mb_counter_6 <= `BSV_ASSIGNMENT_DELAY mb_counter_6$D_IN;
	if (mb_counter_7$EN)
	  mb_counter_7 <= `BSV_ASSIGNMENT_DELAY mb_counter_7$D_IN;
	if (mb_counter_8$EN)
	  mb_counter_8 <= `BSV_ASSIGNMENT_DELAY mb_counter_8$D_IN;
	if (mb_counter_9$EN)
	  mb_counter_9 <= `BSV_ASSIGNMENT_DELAY mb_counter_9$D_IN;
	if (mb_increment$EN)
	  mb_increment <= `BSV_ASSIGNMENT_DELAY mb_increment$D_IN;
	if (mb_increment_1$EN)
	  mb_increment_1 <= `BSV_ASSIGNMENT_DELAY mb_increment_1$D_IN;
	if (mb_increment_10$EN)
	  mb_increment_10 <= `BSV_ASSIGNMENT_DELAY mb_increment_10$D_IN;
	if (mb_increment_11$EN)
	  mb_increment_11 <= `BSV_ASSIGNMENT_DELAY mb_increment_11$D_IN;
	if (mb_increment_12$EN)
	  mb_increment_12 <= `BSV_ASSIGNMENT_DELAY mb_increment_12$D_IN;
	if (mb_increment_13$EN)
	  mb_increment_13 <= `BSV_ASSIGNMENT_DELAY mb_increment_13$D_IN;
	if (mb_increment_14$EN)
	  mb_increment_14 <= `BSV_ASSIGNMENT_DELAY mb_increment_14$D_IN;
	if (mb_increment_15$EN)
	  mb_increment_15 <= `BSV_ASSIGNMENT_DELAY mb_increment_15$D_IN;
	if (mb_increment_16$EN)
	  mb_increment_16 <= `BSV_ASSIGNMENT_DELAY mb_increment_16$D_IN;
	if (mb_increment_17$EN)
	  mb_increment_17 <= `BSV_ASSIGNMENT_DELAY mb_increment_17$D_IN;
	if (mb_increment_18$EN)
	  mb_increment_18 <= `BSV_ASSIGNMENT_DELAY mb_increment_18$D_IN;
	if (mb_increment_19$EN)
	  mb_increment_19 <= `BSV_ASSIGNMENT_DELAY mb_increment_19$D_IN;
	if (mb_increment_2$EN)
	  mb_increment_2 <= `BSV_ASSIGNMENT_DELAY mb_increment_2$D_IN;
	if (mb_increment_20$EN)
	  mb_increment_20 <= `BSV_ASSIGNMENT_DELAY mb_increment_20$D_IN;
	if (mb_increment_21$EN)
	  mb_increment_21 <= `BSV_ASSIGNMENT_DELAY mb_increment_21$D_IN;
	if (mb_increment_22$EN)
	  mb_increment_22 <= `BSV_ASSIGNMENT_DELAY mb_increment_22$D_IN;
	if (mb_increment_23$EN)
	  mb_increment_23 <= `BSV_ASSIGNMENT_DELAY mb_increment_23$D_IN;
	if (mb_increment_24$EN)
	  mb_increment_24 <= `BSV_ASSIGNMENT_DELAY mb_increment_24$D_IN;
	if (mb_increment_25$EN)
	  mb_increment_25 <= `BSV_ASSIGNMENT_DELAY mb_increment_25$D_IN;
	if (mb_increment_26$EN)
	  mb_increment_26 <= `BSV_ASSIGNMENT_DELAY mb_increment_26$D_IN;
	if (mb_increment_27$EN)
	  mb_increment_27 <= `BSV_ASSIGNMENT_DELAY mb_increment_27$D_IN;
	if (mb_increment_28$EN)
	  mb_increment_28 <= `BSV_ASSIGNMENT_DELAY mb_increment_28$D_IN;
	if (mb_increment_29$EN)
	  mb_increment_29 <= `BSV_ASSIGNMENT_DELAY mb_increment_29$D_IN;
	if (mb_increment_3$EN)
	  mb_increment_3 <= `BSV_ASSIGNMENT_DELAY mb_increment_3$D_IN;
	if (mb_increment_30$EN)
	  mb_increment_30 <= `BSV_ASSIGNMENT_DELAY mb_increment_30$D_IN;
	if (mb_increment_31$EN)
	  mb_increment_31 <= `BSV_ASSIGNMENT_DELAY mb_increment_31$D_IN;
	if (mb_increment_32$EN)
	  mb_increment_32 <= `BSV_ASSIGNMENT_DELAY mb_increment_32$D_IN;
	if (mb_increment_33$EN)
	  mb_increment_33 <= `BSV_ASSIGNMENT_DELAY mb_increment_33$D_IN;
	if (mb_increment_34$EN)
	  mb_increment_34 <= `BSV_ASSIGNMENT_DELAY mb_increment_34$D_IN;
	if (mb_increment_35$EN)
	  mb_increment_35 <= `BSV_ASSIGNMENT_DELAY mb_increment_35$D_IN;
	if (mb_increment_36$EN)
	  mb_increment_36 <= `BSV_ASSIGNMENT_DELAY mb_increment_36$D_IN;
	if (mb_increment_37$EN)
	  mb_increment_37 <= `BSV_ASSIGNMENT_DELAY mb_increment_37$D_IN;
	if (mb_increment_38$EN)
	  mb_increment_38 <= `BSV_ASSIGNMENT_DELAY mb_increment_38$D_IN;
	if (mb_increment_39$EN)
	  mb_increment_39 <= `BSV_ASSIGNMENT_DELAY mb_increment_39$D_IN;
	if (mb_increment_4$EN)
	  mb_increment_4 <= `BSV_ASSIGNMENT_DELAY mb_increment_4$D_IN;
	if (mb_increment_40$EN)
	  mb_increment_40 <= `BSV_ASSIGNMENT_DELAY mb_increment_40$D_IN;
	if (mb_increment_41$EN)
	  mb_increment_41 <= `BSV_ASSIGNMENT_DELAY mb_increment_41$D_IN;
	if (mb_increment_42$EN)
	  mb_increment_42 <= `BSV_ASSIGNMENT_DELAY mb_increment_42$D_IN;
	if (mb_increment_43$EN)
	  mb_increment_43 <= `BSV_ASSIGNMENT_DELAY mb_increment_43$D_IN;
	if (mb_increment_44$EN)
	  mb_increment_44 <= `BSV_ASSIGNMENT_DELAY mb_increment_44$D_IN;
	if (mb_increment_45$EN)
	  mb_increment_45 <= `BSV_ASSIGNMENT_DELAY mb_increment_45$D_IN;
	if (mb_increment_46$EN)
	  mb_increment_46 <= `BSV_ASSIGNMENT_DELAY mb_increment_46$D_IN;
	if (mb_increment_47$EN)
	  mb_increment_47 <= `BSV_ASSIGNMENT_DELAY mb_increment_47$D_IN;
	if (mb_increment_48$EN)
	  mb_increment_48 <= `BSV_ASSIGNMENT_DELAY mb_increment_48$D_IN;
	if (mb_increment_49$EN)
	  mb_increment_49 <= `BSV_ASSIGNMENT_DELAY mb_increment_49$D_IN;
	if (mb_increment_5$EN)
	  mb_increment_5 <= `BSV_ASSIGNMENT_DELAY mb_increment_5$D_IN;
	if (mb_increment_50$EN)
	  mb_increment_50 <= `BSV_ASSIGNMENT_DELAY mb_increment_50$D_IN;
	if (mb_increment_51$EN)
	  mb_increment_51 <= `BSV_ASSIGNMENT_DELAY mb_increment_51$D_IN;
	if (mb_increment_52$EN)
	  mb_increment_52 <= `BSV_ASSIGNMENT_DELAY mb_increment_52$D_IN;
	if (mb_increment_53$EN)
	  mb_increment_53 <= `BSV_ASSIGNMENT_DELAY mb_increment_53$D_IN;
	if (mb_increment_54$EN)
	  mb_increment_54 <= `BSV_ASSIGNMENT_DELAY mb_increment_54$D_IN;
	if (mb_increment_55$EN)
	  mb_increment_55 <= `BSV_ASSIGNMENT_DELAY mb_increment_55$D_IN;
	if (mb_increment_56$EN)
	  mb_increment_56 <= `BSV_ASSIGNMENT_DELAY mb_increment_56$D_IN;
	if (mb_increment_57$EN)
	  mb_increment_57 <= `BSV_ASSIGNMENT_DELAY mb_increment_57$D_IN;
	if (mb_increment_58$EN)
	  mb_increment_58 <= `BSV_ASSIGNMENT_DELAY mb_increment_58$D_IN;
	if (mb_increment_59$EN)
	  mb_increment_59 <= `BSV_ASSIGNMENT_DELAY mb_increment_59$D_IN;
	if (mb_increment_6$EN)
	  mb_increment_6 <= `BSV_ASSIGNMENT_DELAY mb_increment_6$D_IN;
	if (mb_increment_7$EN)
	  mb_increment_7 <= `BSV_ASSIGNMENT_DELAY mb_increment_7$D_IN;
	if (mb_increment_8$EN)
	  mb_increment_8 <= `BSV_ASSIGNMENT_DELAY mb_increment_8$D_IN;
	if (mb_increment_9$EN)
	  mb_increment_9 <= `BSV_ASSIGNMENT_DELAY mb_increment_9$D_IN;
	if (mb_last_counter$EN)
	  mb_last_counter <= `BSV_ASSIGNMENT_DELAY mb_last_counter$D_IN;
	if (mb_last_counter_1$EN)
	  mb_last_counter_1 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_1$D_IN;
	if (mb_last_counter_10$EN)
	  mb_last_counter_10 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_10$D_IN;
	if (mb_last_counter_11$EN)
	  mb_last_counter_11 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_11$D_IN;
	if (mb_last_counter_12$EN)
	  mb_last_counter_12 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_12$D_IN;
	if (mb_last_counter_13$EN)
	  mb_last_counter_13 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_13$D_IN;
	if (mb_last_counter_14$EN)
	  mb_last_counter_14 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_14$D_IN;
	if (mb_last_counter_15$EN)
	  mb_last_counter_15 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_15$D_IN;
	if (mb_last_counter_16$EN)
	  mb_last_counter_16 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_16$D_IN;
	if (mb_last_counter_17$EN)
	  mb_last_counter_17 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_17$D_IN;
	if (mb_last_counter_18$EN)
	  mb_last_counter_18 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_18$D_IN;
	if (mb_last_counter_19$EN)
	  mb_last_counter_19 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_19$D_IN;
	if (mb_last_counter_2$EN)
	  mb_last_counter_2 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_2$D_IN;
	if (mb_last_counter_20$EN)
	  mb_last_counter_20 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_20$D_IN;
	if (mb_last_counter_21$EN)
	  mb_last_counter_21 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_21$D_IN;
	if (mb_last_counter_22$EN)
	  mb_last_counter_22 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_22$D_IN;
	if (mb_last_counter_23$EN)
	  mb_last_counter_23 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_23$D_IN;
	if (mb_last_counter_24$EN)
	  mb_last_counter_24 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_24$D_IN;
	if (mb_last_counter_25$EN)
	  mb_last_counter_25 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_25$D_IN;
	if (mb_last_counter_26$EN)
	  mb_last_counter_26 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_26$D_IN;
	if (mb_last_counter_27$EN)
	  mb_last_counter_27 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_27$D_IN;
	if (mb_last_counter_28$EN)
	  mb_last_counter_28 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_28$D_IN;
	if (mb_last_counter_29$EN)
	  mb_last_counter_29 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_29$D_IN;
	if (mb_last_counter_3$EN)
	  mb_last_counter_3 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_3$D_IN;
	if (mb_last_counter_30$EN)
	  mb_last_counter_30 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_30$D_IN;
	if (mb_last_counter_31$EN)
	  mb_last_counter_31 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_31$D_IN;
	if (mb_last_counter_32$EN)
	  mb_last_counter_32 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_32$D_IN;
	if (mb_last_counter_33$EN)
	  mb_last_counter_33 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_33$D_IN;
	if (mb_last_counter_34$EN)
	  mb_last_counter_34 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_34$D_IN;
	if (mb_last_counter_35$EN)
	  mb_last_counter_35 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_35$D_IN;
	if (mb_last_counter_36$EN)
	  mb_last_counter_36 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_36$D_IN;
	if (mb_last_counter_37$EN)
	  mb_last_counter_37 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_37$D_IN;
	if (mb_last_counter_38$EN)
	  mb_last_counter_38 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_38$D_IN;
	if (mb_last_counter_39$EN)
	  mb_last_counter_39 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_39$D_IN;
	if (mb_last_counter_4$EN)
	  mb_last_counter_4 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_4$D_IN;
	if (mb_last_counter_40$EN)
	  mb_last_counter_40 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_40$D_IN;
	if (mb_last_counter_41$EN)
	  mb_last_counter_41 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_41$D_IN;
	if (mb_last_counter_42$EN)
	  mb_last_counter_42 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_42$D_IN;
	if (mb_last_counter_43$EN)
	  mb_last_counter_43 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_43$D_IN;
	if (mb_last_counter_44$EN)
	  mb_last_counter_44 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_44$D_IN;
	if (mb_last_counter_45$EN)
	  mb_last_counter_45 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_45$D_IN;
	if (mb_last_counter_46$EN)
	  mb_last_counter_46 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_46$D_IN;
	if (mb_last_counter_47$EN)
	  mb_last_counter_47 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_47$D_IN;
	if (mb_last_counter_48$EN)
	  mb_last_counter_48 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_48$D_IN;
	if (mb_last_counter_49$EN)
	  mb_last_counter_49 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_49$D_IN;
	if (mb_last_counter_5$EN)
	  mb_last_counter_5 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_5$D_IN;
	if (mb_last_counter_50$EN)
	  mb_last_counter_50 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_50$D_IN;
	if (mb_last_counter_51$EN)
	  mb_last_counter_51 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_51$D_IN;
	if (mb_last_counter_52$EN)
	  mb_last_counter_52 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_52$D_IN;
	if (mb_last_counter_53$EN)
	  mb_last_counter_53 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_53$D_IN;
	if (mb_last_counter_54$EN)
	  mb_last_counter_54 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_54$D_IN;
	if (mb_last_counter_55$EN)
	  mb_last_counter_55 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_55$D_IN;
	if (mb_last_counter_56$EN)
	  mb_last_counter_56 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_56$D_IN;
	if (mb_last_counter_57$EN)
	  mb_last_counter_57 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_57$D_IN;
	if (mb_last_counter_58$EN)
	  mb_last_counter_58 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_58$D_IN;
	if (mb_last_counter_59$EN)
	  mb_last_counter_59 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_59$D_IN;
	if (mb_last_counter_6$EN)
	  mb_last_counter_6 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_6$D_IN;
	if (mb_last_counter_7$EN)
	  mb_last_counter_7 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_7$D_IN;
	if (mb_last_counter_8$EN)
	  mb_last_counter_8 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_8$D_IN;
	if (mb_last_counter_9$EN)
	  mb_last_counter_9 <= `BSV_ASSIGNMENT_DELAY mb_last_counter_9$D_IN;
	if (mb_out_count$EN)
	  mb_out_count <= `BSV_ASSIGNMENT_DELAY mb_out_count$D_IN;
	if (mb_tick_pulse$EN)
	  mb_tick_pulse <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse$D_IN;
	if (mb_tick_pulse_1$EN)
	  mb_tick_pulse_1 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_1$D_IN;
	if (mb_tick_pulse_10$EN)
	  mb_tick_pulse_10 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_10$D_IN;
	if (mb_tick_pulse_11$EN)
	  mb_tick_pulse_11 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_11$D_IN;
	if (mb_tick_pulse_12$EN)
	  mb_tick_pulse_12 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_12$D_IN;
	if (mb_tick_pulse_13$EN)
	  mb_tick_pulse_13 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_13$D_IN;
	if (mb_tick_pulse_14$EN)
	  mb_tick_pulse_14 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_14$D_IN;
	if (mb_tick_pulse_15$EN)
	  mb_tick_pulse_15 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_15$D_IN;
	if (mb_tick_pulse_16$EN)
	  mb_tick_pulse_16 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_16$D_IN;
	if (mb_tick_pulse_17$EN)
	  mb_tick_pulse_17 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_17$D_IN;
	if (mb_tick_pulse_18$EN)
	  mb_tick_pulse_18 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_18$D_IN;
	if (mb_tick_pulse_19$EN)
	  mb_tick_pulse_19 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_19$D_IN;
	if (mb_tick_pulse_2$EN)
	  mb_tick_pulse_2 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_2$D_IN;
	if (mb_tick_pulse_20$EN)
	  mb_tick_pulse_20 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_20$D_IN;
	if (mb_tick_pulse_21$EN)
	  mb_tick_pulse_21 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_21$D_IN;
	if (mb_tick_pulse_22$EN)
	  mb_tick_pulse_22 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_22$D_IN;
	if (mb_tick_pulse_23$EN)
	  mb_tick_pulse_23 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_23$D_IN;
	if (mb_tick_pulse_24$EN)
	  mb_tick_pulse_24 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_24$D_IN;
	if (mb_tick_pulse_25$EN)
	  mb_tick_pulse_25 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_25$D_IN;
	if (mb_tick_pulse_26$EN)
	  mb_tick_pulse_26 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_26$D_IN;
	if (mb_tick_pulse_27$EN)
	  mb_tick_pulse_27 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_27$D_IN;
	if (mb_tick_pulse_28$EN)
	  mb_tick_pulse_28 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_28$D_IN;
	if (mb_tick_pulse_29$EN)
	  mb_tick_pulse_29 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_29$D_IN;
	if (mb_tick_pulse_3$EN)
	  mb_tick_pulse_3 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_3$D_IN;
	if (mb_tick_pulse_30$EN)
	  mb_tick_pulse_30 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_30$D_IN;
	if (mb_tick_pulse_31$EN)
	  mb_tick_pulse_31 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_31$D_IN;
	if (mb_tick_pulse_32$EN)
	  mb_tick_pulse_32 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_32$D_IN;
	if (mb_tick_pulse_33$EN)
	  mb_tick_pulse_33 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_33$D_IN;
	if (mb_tick_pulse_34$EN)
	  mb_tick_pulse_34 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_34$D_IN;
	if (mb_tick_pulse_35$EN)
	  mb_tick_pulse_35 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_35$D_IN;
	if (mb_tick_pulse_36$EN)
	  mb_tick_pulse_36 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_36$D_IN;
	if (mb_tick_pulse_37$EN)
	  mb_tick_pulse_37 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_37$D_IN;
	if (mb_tick_pulse_38$EN)
	  mb_tick_pulse_38 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_38$D_IN;
	if (mb_tick_pulse_39$EN)
	  mb_tick_pulse_39 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_39$D_IN;
	if (mb_tick_pulse_4$EN)
	  mb_tick_pulse_4 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_4$D_IN;
	if (mb_tick_pulse_40$EN)
	  mb_tick_pulse_40 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_40$D_IN;
	if (mb_tick_pulse_41$EN)
	  mb_tick_pulse_41 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_41$D_IN;
	if (mb_tick_pulse_42$EN)
	  mb_tick_pulse_42 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_42$D_IN;
	if (mb_tick_pulse_43$EN)
	  mb_tick_pulse_43 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_43$D_IN;
	if (mb_tick_pulse_44$EN)
	  mb_tick_pulse_44 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_44$D_IN;
	if (mb_tick_pulse_45$EN)
	  mb_tick_pulse_45 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_45$D_IN;
	if (mb_tick_pulse_46$EN)
	  mb_tick_pulse_46 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_46$D_IN;
	if (mb_tick_pulse_47$EN)
	  mb_tick_pulse_47 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_47$D_IN;
	if (mb_tick_pulse_48$EN)
	  mb_tick_pulse_48 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_48$D_IN;
	if (mb_tick_pulse_49$EN)
	  mb_tick_pulse_49 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_49$D_IN;
	if (mb_tick_pulse_5$EN)
	  mb_tick_pulse_5 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_5$D_IN;
	if (mb_tick_pulse_50$EN)
	  mb_tick_pulse_50 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_50$D_IN;
	if (mb_tick_pulse_51$EN)
	  mb_tick_pulse_51 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_51$D_IN;
	if (mb_tick_pulse_52$EN)
	  mb_tick_pulse_52 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_52$D_IN;
	if (mb_tick_pulse_53$EN)
	  mb_tick_pulse_53 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_53$D_IN;
	if (mb_tick_pulse_54$EN)
	  mb_tick_pulse_54 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_54$D_IN;
	if (mb_tick_pulse_55$EN)
	  mb_tick_pulse_55 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_55$D_IN;
	if (mb_tick_pulse_56$EN)
	  mb_tick_pulse_56 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_56$D_IN;
	if (mb_tick_pulse_57$EN)
	  mb_tick_pulse_57 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_57$D_IN;
	if (mb_tick_pulse_58$EN)
	  mb_tick_pulse_58 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_58$D_IN;
	if (mb_tick_pulse_59$EN)
	  mb_tick_pulse_59 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_59$D_IN;
	if (mb_tick_pulse_6$EN)
	  mb_tick_pulse_6 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_6$D_IN;
	if (mb_tick_pulse_7$EN)
	  mb_tick_pulse_7 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_7$D_IN;
	if (mb_tick_pulse_8$EN)
	  mb_tick_pulse_8 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_8$D_IN;
	if (mb_tick_pulse_9$EN)
	  mb_tick_pulse_9 <= `BSV_ASSIGNMENT_DELAY mb_tick_pulse_9$D_IN;
	if (mb_valid$EN) mb_valid <= `BSV_ASSIGNMENT_DELAY mb_valid$D_IN;
	if (mb_valid_1$EN)
	  mb_valid_1 <= `BSV_ASSIGNMENT_DELAY mb_valid_1$D_IN;
	if (mb_valid_10$EN)
	  mb_valid_10 <= `BSV_ASSIGNMENT_DELAY mb_valid_10$D_IN;
	if (mb_valid_11$EN)
	  mb_valid_11 <= `BSV_ASSIGNMENT_DELAY mb_valid_11$D_IN;
	if (mb_valid_12$EN)
	  mb_valid_12 <= `BSV_ASSIGNMENT_DELAY mb_valid_12$D_IN;
	if (mb_valid_13$EN)
	  mb_valid_13 <= `BSV_ASSIGNMENT_DELAY mb_valid_13$D_IN;
	if (mb_valid_14$EN)
	  mb_valid_14 <= `BSV_ASSIGNMENT_DELAY mb_valid_14$D_IN;
	if (mb_valid_15$EN)
	  mb_valid_15 <= `BSV_ASSIGNMENT_DELAY mb_valid_15$D_IN;
	if (mb_valid_16$EN)
	  mb_valid_16 <= `BSV_ASSIGNMENT_DELAY mb_valid_16$D_IN;
	if (mb_valid_17$EN)
	  mb_valid_17 <= `BSV_ASSIGNMENT_DELAY mb_valid_17$D_IN;
	if (mb_valid_18$EN)
	  mb_valid_18 <= `BSV_ASSIGNMENT_DELAY mb_valid_18$D_IN;
	if (mb_valid_19$EN)
	  mb_valid_19 <= `BSV_ASSIGNMENT_DELAY mb_valid_19$D_IN;
	if (mb_valid_2$EN)
	  mb_valid_2 <= `BSV_ASSIGNMENT_DELAY mb_valid_2$D_IN;
	if (mb_valid_20$EN)
	  mb_valid_20 <= `BSV_ASSIGNMENT_DELAY mb_valid_20$D_IN;
	if (mb_valid_21$EN)
	  mb_valid_21 <= `BSV_ASSIGNMENT_DELAY mb_valid_21$D_IN;
	if (mb_valid_22$EN)
	  mb_valid_22 <= `BSV_ASSIGNMENT_DELAY mb_valid_22$D_IN;
	if (mb_valid_23$EN)
	  mb_valid_23 <= `BSV_ASSIGNMENT_DELAY mb_valid_23$D_IN;
	if (mb_valid_24$EN)
	  mb_valid_24 <= `BSV_ASSIGNMENT_DELAY mb_valid_24$D_IN;
	if (mb_valid_25$EN)
	  mb_valid_25 <= `BSV_ASSIGNMENT_DELAY mb_valid_25$D_IN;
	if (mb_valid_26$EN)
	  mb_valid_26 <= `BSV_ASSIGNMENT_DELAY mb_valid_26$D_IN;
	if (mb_valid_27$EN)
	  mb_valid_27 <= `BSV_ASSIGNMENT_DELAY mb_valid_27$D_IN;
	if (mb_valid_28$EN)
	  mb_valid_28 <= `BSV_ASSIGNMENT_DELAY mb_valid_28$D_IN;
	if (mb_valid_29$EN)
	  mb_valid_29 <= `BSV_ASSIGNMENT_DELAY mb_valid_29$D_IN;
	if (mb_valid_3$EN)
	  mb_valid_3 <= `BSV_ASSIGNMENT_DELAY mb_valid_3$D_IN;
	if (mb_valid_30$EN)
	  mb_valid_30 <= `BSV_ASSIGNMENT_DELAY mb_valid_30$D_IN;
	if (mb_valid_31$EN)
	  mb_valid_31 <= `BSV_ASSIGNMENT_DELAY mb_valid_31$D_IN;
	if (mb_valid_32$EN)
	  mb_valid_32 <= `BSV_ASSIGNMENT_DELAY mb_valid_32$D_IN;
	if (mb_valid_33$EN)
	  mb_valid_33 <= `BSV_ASSIGNMENT_DELAY mb_valid_33$D_IN;
	if (mb_valid_34$EN)
	  mb_valid_34 <= `BSV_ASSIGNMENT_DELAY mb_valid_34$D_IN;
	if (mb_valid_35$EN)
	  mb_valid_35 <= `BSV_ASSIGNMENT_DELAY mb_valid_35$D_IN;
	if (mb_valid_36$EN)
	  mb_valid_36 <= `BSV_ASSIGNMENT_DELAY mb_valid_36$D_IN;
	if (mb_valid_37$EN)
	  mb_valid_37 <= `BSV_ASSIGNMENT_DELAY mb_valid_37$D_IN;
	if (mb_valid_38$EN)
	  mb_valid_38 <= `BSV_ASSIGNMENT_DELAY mb_valid_38$D_IN;
	if (mb_valid_39$EN)
	  mb_valid_39 <= `BSV_ASSIGNMENT_DELAY mb_valid_39$D_IN;
	if (mb_valid_4$EN)
	  mb_valid_4 <= `BSV_ASSIGNMENT_DELAY mb_valid_4$D_IN;
	if (mb_valid_40$EN)
	  mb_valid_40 <= `BSV_ASSIGNMENT_DELAY mb_valid_40$D_IN;
	if (mb_valid_41$EN)
	  mb_valid_41 <= `BSV_ASSIGNMENT_DELAY mb_valid_41$D_IN;
	if (mb_valid_42$EN)
	  mb_valid_42 <= `BSV_ASSIGNMENT_DELAY mb_valid_42$D_IN;
	if (mb_valid_43$EN)
	  mb_valid_43 <= `BSV_ASSIGNMENT_DELAY mb_valid_43$D_IN;
	if (mb_valid_44$EN)
	  mb_valid_44 <= `BSV_ASSIGNMENT_DELAY mb_valid_44$D_IN;
	if (mb_valid_45$EN)
	  mb_valid_45 <= `BSV_ASSIGNMENT_DELAY mb_valid_45$D_IN;
	if (mb_valid_46$EN)
	  mb_valid_46 <= `BSV_ASSIGNMENT_DELAY mb_valid_46$D_IN;
	if (mb_valid_47$EN)
	  mb_valid_47 <= `BSV_ASSIGNMENT_DELAY mb_valid_47$D_IN;
	if (mb_valid_48$EN)
	  mb_valid_48 <= `BSV_ASSIGNMENT_DELAY mb_valid_48$D_IN;
	if (mb_valid_49$EN)
	  mb_valid_49 <= `BSV_ASSIGNMENT_DELAY mb_valid_49$D_IN;
	if (mb_valid_5$EN)
	  mb_valid_5 <= `BSV_ASSIGNMENT_DELAY mb_valid_5$D_IN;
	if (mb_valid_50$EN)
	  mb_valid_50 <= `BSV_ASSIGNMENT_DELAY mb_valid_50$D_IN;
	if (mb_valid_51$EN)
	  mb_valid_51 <= `BSV_ASSIGNMENT_DELAY mb_valid_51$D_IN;
	if (mb_valid_52$EN)
	  mb_valid_52 <= `BSV_ASSIGNMENT_DELAY mb_valid_52$D_IN;
	if (mb_valid_53$EN)
	  mb_valid_53 <= `BSV_ASSIGNMENT_DELAY mb_valid_53$D_IN;
	if (mb_valid_54$EN)
	  mb_valid_54 <= `BSV_ASSIGNMENT_DELAY mb_valid_54$D_IN;
	if (mb_valid_55$EN)
	  mb_valid_55 <= `BSV_ASSIGNMENT_DELAY mb_valid_55$D_IN;
	if (mb_valid_56$EN)
	  mb_valid_56 <= `BSV_ASSIGNMENT_DELAY mb_valid_56$D_IN;
	if (mb_valid_57$EN)
	  mb_valid_57 <= `BSV_ASSIGNMENT_DELAY mb_valid_57$D_IN;
	if (mb_valid_58$EN)
	  mb_valid_58 <= `BSV_ASSIGNMENT_DELAY mb_valid_58$D_IN;
	if (mb_valid_59$EN)
	  mb_valid_59 <= `BSV_ASSIGNMENT_DELAY mb_valid_59$D_IN;
	if (mb_valid_6$EN)
	  mb_valid_6 <= `BSV_ASSIGNMENT_DELAY mb_valid_6$D_IN;
	if (mb_valid_7$EN)
	  mb_valid_7 <= `BSV_ASSIGNMENT_DELAY mb_valid_7$D_IN;
	if (mb_valid_8$EN)
	  mb_valid_8 <= `BSV_ASSIGNMENT_DELAY mb_valid_8$D_IN;
	if (mb_valid_9$EN)
	  mb_valid_9 <= `BSV_ASSIGNMENT_DELAY mb_valid_9$D_IN;
	if (mpc$EN) mpc <= `BSV_ASSIGNMENT_DELAY mpc$D_IN;
	if (sync_next$EN) sync_next <= `BSV_ASSIGNMENT_DELAY sync_next$D_IN;
	if (sync_this$EN) sync_this <= `BSV_ASSIGNMENT_DELAY sync_this$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bc_avg_energy = 28'hAAAAAAA;
    bc_cur_energy = 28'hAAAAAAA;
    bc_sample_count = 12'hAAA;
    beat_guess = 28'hAAAAAAA;
    init_done = 1'h0;
    mb_counter = 22'h2AAAAA;
    mb_counter_1 = 22'h2AAAAA;
    mb_counter_10 = 22'h2AAAAA;
    mb_counter_11 = 22'h2AAAAA;
    mb_counter_12 = 22'h2AAAAA;
    mb_counter_13 = 22'h2AAAAA;
    mb_counter_14 = 22'h2AAAAA;
    mb_counter_15 = 22'h2AAAAA;
    mb_counter_16 = 22'h2AAAAA;
    mb_counter_17 = 22'h2AAAAA;
    mb_counter_18 = 22'h2AAAAA;
    mb_counter_19 = 22'h2AAAAA;
    mb_counter_2 = 22'h2AAAAA;
    mb_counter_20 = 22'h2AAAAA;
    mb_counter_21 = 22'h2AAAAA;
    mb_counter_22 = 22'h2AAAAA;
    mb_counter_23 = 22'h2AAAAA;
    mb_counter_24 = 22'h2AAAAA;
    mb_counter_25 = 22'h2AAAAA;
    mb_counter_26 = 22'h2AAAAA;
    mb_counter_27 = 22'h2AAAAA;
    mb_counter_28 = 22'h2AAAAA;
    mb_counter_29 = 22'h2AAAAA;
    mb_counter_3 = 22'h2AAAAA;
    mb_counter_30 = 22'h2AAAAA;
    mb_counter_31 = 22'h2AAAAA;
    mb_counter_32 = 22'h2AAAAA;
    mb_counter_33 = 22'h2AAAAA;
    mb_counter_34 = 22'h2AAAAA;
    mb_counter_35 = 22'h2AAAAA;
    mb_counter_36 = 22'h2AAAAA;
    mb_counter_37 = 22'h2AAAAA;
    mb_counter_38 = 22'h2AAAAA;
    mb_counter_39 = 22'h2AAAAA;
    mb_counter_4 = 22'h2AAAAA;
    mb_counter_40 = 22'h2AAAAA;
    mb_counter_41 = 22'h2AAAAA;
    mb_counter_42 = 22'h2AAAAA;
    mb_counter_43 = 22'h2AAAAA;
    mb_counter_44 = 22'h2AAAAA;
    mb_counter_45 = 22'h2AAAAA;
    mb_counter_46 = 22'h2AAAAA;
    mb_counter_47 = 22'h2AAAAA;
    mb_counter_48 = 22'h2AAAAA;
    mb_counter_49 = 22'h2AAAAA;
    mb_counter_5 = 22'h2AAAAA;
    mb_counter_50 = 22'h2AAAAA;
    mb_counter_51 = 22'h2AAAAA;
    mb_counter_52 = 22'h2AAAAA;
    mb_counter_53 = 22'h2AAAAA;
    mb_counter_54 = 22'h2AAAAA;
    mb_counter_55 = 22'h2AAAAA;
    mb_counter_56 = 22'h2AAAAA;
    mb_counter_57 = 22'h2AAAAA;
    mb_counter_58 = 22'h2AAAAA;
    mb_counter_59 = 22'h2AAAAA;
    mb_counter_6 = 22'h2AAAAA;
    mb_counter_7 = 22'h2AAAAA;
    mb_counter_8 = 22'h2AAAAA;
    mb_counter_9 = 22'h2AAAAA;
    mb_increment = 22'h2AAAAA;
    mb_increment_1 = 22'h2AAAAA;
    mb_increment_10 = 22'h2AAAAA;
    mb_increment_11 = 22'h2AAAAA;
    mb_increment_12 = 22'h2AAAAA;
    mb_increment_13 = 22'h2AAAAA;
    mb_increment_14 = 22'h2AAAAA;
    mb_increment_15 = 22'h2AAAAA;
    mb_increment_16 = 22'h2AAAAA;
    mb_increment_17 = 22'h2AAAAA;
    mb_increment_18 = 22'h2AAAAA;
    mb_increment_19 = 22'h2AAAAA;
    mb_increment_2 = 22'h2AAAAA;
    mb_increment_20 = 22'h2AAAAA;
    mb_increment_21 = 22'h2AAAAA;
    mb_increment_22 = 22'h2AAAAA;
    mb_increment_23 = 22'h2AAAAA;
    mb_increment_24 = 22'h2AAAAA;
    mb_increment_25 = 22'h2AAAAA;
    mb_increment_26 = 22'h2AAAAA;
    mb_increment_27 = 22'h2AAAAA;
    mb_increment_28 = 22'h2AAAAA;
    mb_increment_29 = 22'h2AAAAA;
    mb_increment_3 = 22'h2AAAAA;
    mb_increment_30 = 22'h2AAAAA;
    mb_increment_31 = 22'h2AAAAA;
    mb_increment_32 = 22'h2AAAAA;
    mb_increment_33 = 22'h2AAAAA;
    mb_increment_34 = 22'h2AAAAA;
    mb_increment_35 = 22'h2AAAAA;
    mb_increment_36 = 22'h2AAAAA;
    mb_increment_37 = 22'h2AAAAA;
    mb_increment_38 = 22'h2AAAAA;
    mb_increment_39 = 22'h2AAAAA;
    mb_increment_4 = 22'h2AAAAA;
    mb_increment_40 = 22'h2AAAAA;
    mb_increment_41 = 22'h2AAAAA;
    mb_increment_42 = 22'h2AAAAA;
    mb_increment_43 = 22'h2AAAAA;
    mb_increment_44 = 22'h2AAAAA;
    mb_increment_45 = 22'h2AAAAA;
    mb_increment_46 = 22'h2AAAAA;
    mb_increment_47 = 22'h2AAAAA;
    mb_increment_48 = 22'h2AAAAA;
    mb_increment_49 = 22'h2AAAAA;
    mb_increment_5 = 22'h2AAAAA;
    mb_increment_50 = 22'h2AAAAA;
    mb_increment_51 = 22'h2AAAAA;
    mb_increment_52 = 22'h2AAAAA;
    mb_increment_53 = 22'h2AAAAA;
    mb_increment_54 = 22'h2AAAAA;
    mb_increment_55 = 22'h2AAAAA;
    mb_increment_56 = 22'h2AAAAA;
    mb_increment_57 = 22'h2AAAAA;
    mb_increment_58 = 22'h2AAAAA;
    mb_increment_59 = 22'h2AAAAA;
    mb_increment_6 = 22'h2AAAAA;
    mb_increment_7 = 22'h2AAAAA;
    mb_increment_8 = 22'h2AAAAA;
    mb_increment_9 = 22'h2AAAAA;
    mb_last_counter = 22'h2AAAAA;
    mb_last_counter_1 = 22'h2AAAAA;
    mb_last_counter_10 = 22'h2AAAAA;
    mb_last_counter_11 = 22'h2AAAAA;
    mb_last_counter_12 = 22'h2AAAAA;
    mb_last_counter_13 = 22'h2AAAAA;
    mb_last_counter_14 = 22'h2AAAAA;
    mb_last_counter_15 = 22'h2AAAAA;
    mb_last_counter_16 = 22'h2AAAAA;
    mb_last_counter_17 = 22'h2AAAAA;
    mb_last_counter_18 = 22'h2AAAAA;
    mb_last_counter_19 = 22'h2AAAAA;
    mb_last_counter_2 = 22'h2AAAAA;
    mb_last_counter_20 = 22'h2AAAAA;
    mb_last_counter_21 = 22'h2AAAAA;
    mb_last_counter_22 = 22'h2AAAAA;
    mb_last_counter_23 = 22'h2AAAAA;
    mb_last_counter_24 = 22'h2AAAAA;
    mb_last_counter_25 = 22'h2AAAAA;
    mb_last_counter_26 = 22'h2AAAAA;
    mb_last_counter_27 = 22'h2AAAAA;
    mb_last_counter_28 = 22'h2AAAAA;
    mb_last_counter_29 = 22'h2AAAAA;
    mb_last_counter_3 = 22'h2AAAAA;
    mb_last_counter_30 = 22'h2AAAAA;
    mb_last_counter_31 = 22'h2AAAAA;
    mb_last_counter_32 = 22'h2AAAAA;
    mb_last_counter_33 = 22'h2AAAAA;
    mb_last_counter_34 = 22'h2AAAAA;
    mb_last_counter_35 = 22'h2AAAAA;
    mb_last_counter_36 = 22'h2AAAAA;
    mb_last_counter_37 = 22'h2AAAAA;
    mb_last_counter_38 = 22'h2AAAAA;
    mb_last_counter_39 = 22'h2AAAAA;
    mb_last_counter_4 = 22'h2AAAAA;
    mb_last_counter_40 = 22'h2AAAAA;
    mb_last_counter_41 = 22'h2AAAAA;
    mb_last_counter_42 = 22'h2AAAAA;
    mb_last_counter_43 = 22'h2AAAAA;
    mb_last_counter_44 = 22'h2AAAAA;
    mb_last_counter_45 = 22'h2AAAAA;
    mb_last_counter_46 = 22'h2AAAAA;
    mb_last_counter_47 = 22'h2AAAAA;
    mb_last_counter_48 = 22'h2AAAAA;
    mb_last_counter_49 = 22'h2AAAAA;
    mb_last_counter_5 = 22'h2AAAAA;
    mb_last_counter_50 = 22'h2AAAAA;
    mb_last_counter_51 = 22'h2AAAAA;
    mb_last_counter_52 = 22'h2AAAAA;
    mb_last_counter_53 = 22'h2AAAAA;
    mb_last_counter_54 = 22'h2AAAAA;
    mb_last_counter_55 = 22'h2AAAAA;
    mb_last_counter_56 = 22'h2AAAAA;
    mb_last_counter_57 = 22'h2AAAAA;
    mb_last_counter_58 = 22'h2AAAAA;
    mb_last_counter_59 = 22'h2AAAAA;
    mb_last_counter_6 = 22'h2AAAAA;
    mb_last_counter_7 = 22'h2AAAAA;
    mb_last_counter_8 = 22'h2AAAAA;
    mb_last_counter_9 = 22'h2AAAAA;
    mb_out_count = 6'h2A;
    mb_tick_pulse = 1'h0;
    mb_tick_pulse_1 = 1'h0;
    mb_tick_pulse_10 = 1'h0;
    mb_tick_pulse_11 = 1'h0;
    mb_tick_pulse_12 = 1'h0;
    mb_tick_pulse_13 = 1'h0;
    mb_tick_pulse_14 = 1'h0;
    mb_tick_pulse_15 = 1'h0;
    mb_tick_pulse_16 = 1'h0;
    mb_tick_pulse_17 = 1'h0;
    mb_tick_pulse_18 = 1'h0;
    mb_tick_pulse_19 = 1'h0;
    mb_tick_pulse_2 = 1'h0;
    mb_tick_pulse_20 = 1'h0;
    mb_tick_pulse_21 = 1'h0;
    mb_tick_pulse_22 = 1'h0;
    mb_tick_pulse_23 = 1'h0;
    mb_tick_pulse_24 = 1'h0;
    mb_tick_pulse_25 = 1'h0;
    mb_tick_pulse_26 = 1'h0;
    mb_tick_pulse_27 = 1'h0;
    mb_tick_pulse_28 = 1'h0;
    mb_tick_pulse_29 = 1'h0;
    mb_tick_pulse_3 = 1'h0;
    mb_tick_pulse_30 = 1'h0;
    mb_tick_pulse_31 = 1'h0;
    mb_tick_pulse_32 = 1'h0;
    mb_tick_pulse_33 = 1'h0;
    mb_tick_pulse_34 = 1'h0;
    mb_tick_pulse_35 = 1'h0;
    mb_tick_pulse_36 = 1'h0;
    mb_tick_pulse_37 = 1'h0;
    mb_tick_pulse_38 = 1'h0;
    mb_tick_pulse_39 = 1'h0;
    mb_tick_pulse_4 = 1'h0;
    mb_tick_pulse_40 = 1'h0;
    mb_tick_pulse_41 = 1'h0;
    mb_tick_pulse_42 = 1'h0;
    mb_tick_pulse_43 = 1'h0;
    mb_tick_pulse_44 = 1'h0;
    mb_tick_pulse_45 = 1'h0;
    mb_tick_pulse_46 = 1'h0;
    mb_tick_pulse_47 = 1'h0;
    mb_tick_pulse_48 = 1'h0;
    mb_tick_pulse_49 = 1'h0;
    mb_tick_pulse_5 = 1'h0;
    mb_tick_pulse_50 = 1'h0;
    mb_tick_pulse_51 = 1'h0;
    mb_tick_pulse_52 = 1'h0;
    mb_tick_pulse_53 = 1'h0;
    mb_tick_pulse_54 = 1'h0;
    mb_tick_pulse_55 = 1'h0;
    mb_tick_pulse_56 = 1'h0;
    mb_tick_pulse_57 = 1'h0;
    mb_tick_pulse_58 = 1'h0;
    mb_tick_pulse_59 = 1'h0;
    mb_tick_pulse_6 = 1'h0;
    mb_tick_pulse_7 = 1'h0;
    mb_tick_pulse_8 = 1'h0;
    mb_tick_pulse_9 = 1'h0;
    mb_valid = 1'h0;
    mb_valid_1 = 1'h0;
    mb_valid_10 = 1'h0;
    mb_valid_11 = 1'h0;
    mb_valid_12 = 1'h0;
    mb_valid_13 = 1'h0;
    mb_valid_14 = 1'h0;
    mb_valid_15 = 1'h0;
    mb_valid_16 = 1'h0;
    mb_valid_17 = 1'h0;
    mb_valid_18 = 1'h0;
    mb_valid_19 = 1'h0;
    mb_valid_2 = 1'h0;
    mb_valid_20 = 1'h0;
    mb_valid_21 = 1'h0;
    mb_valid_22 = 1'h0;
    mb_valid_23 = 1'h0;
    mb_valid_24 = 1'h0;
    mb_valid_25 = 1'h0;
    mb_valid_26 = 1'h0;
    mb_valid_27 = 1'h0;
    mb_valid_28 = 1'h0;
    mb_valid_29 = 1'h0;
    mb_valid_3 = 1'h0;
    mb_valid_30 = 1'h0;
    mb_valid_31 = 1'h0;
    mb_valid_32 = 1'h0;
    mb_valid_33 = 1'h0;
    mb_valid_34 = 1'h0;
    mb_valid_35 = 1'h0;
    mb_valid_36 = 1'h0;
    mb_valid_37 = 1'h0;
    mb_valid_38 = 1'h0;
    mb_valid_39 = 1'h0;
    mb_valid_4 = 1'h0;
    mb_valid_40 = 1'h0;
    mb_valid_41 = 1'h0;
    mb_valid_42 = 1'h0;
    mb_valid_43 = 1'h0;
    mb_valid_44 = 1'h0;
    mb_valid_45 = 1'h0;
    mb_valid_46 = 1'h0;
    mb_valid_47 = 1'h0;
    mb_valid_48 = 1'h0;
    mb_valid_49 = 1'h0;
    mb_valid_5 = 1'h0;
    mb_valid_50 = 1'h0;
    mb_valid_51 = 1'h0;
    mb_valid_52 = 1'h0;
    mb_valid_53 = 1'h0;
    mb_valid_54 = 1'h0;
    mb_valid_55 = 1'h0;
    mb_valid_56 = 1'h0;
    mb_valid_57 = 1'h0;
    mb_valid_58 = 1'h0;
    mb_valid_59 = 1'h0;
    mb_valid_6 = 1'h0;
    mb_valid_7 = 1'h0;
    mb_valid_8 = 1'h0;
    mb_valid_9 = 1'h0;
    mpc = 9'h0AA;
    sync_next = 1'h0;
    sync_this = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_compare_energies &&
	  NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31)
	$write("UNS ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_compare_energies &&
	  NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31)
	$write("%d", $signed(bc_cur_energy));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_compare_energies &&
	  NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31)
	$write("/");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_compare_energies &&
	  NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31)
	$write("%d", $signed(bc_avg_energy));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bc_compare_energies &&
	  NOT_bc_cur_energy_SLE_bc_avg_energy_2_PLUS_IF__ETC___d31)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkBeatTracker

